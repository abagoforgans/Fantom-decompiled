contract main {




// =====================  Runtime code  =====================


#
#  - allDollarBalances()
#  - recoverERC20(address arg1, uint256 arg2)
#
address owner;
address nominatedOwner;
address stor2;
address stor3;
address sub_92e51617Address;
address stor5;
address sub_9b41830bAddress;
address sub_3e0551edAddress;
address sub_9d5194acAddress;
address timelock_address;
address custodian_address;
address routerAddress;
address zapperAddress;
array of address sub_136e4b88;
mapping of uint8 stor14;
uint256 sub_ed163800;
uint256 missing_decimals;
uint256 stor17;

function sub_136e4b88(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_136e4b88.length
    return sub_136e4b88[arg1]
}

function sub_3e0551ed(?) payable {
    return sub_3e0551edAddress
}

function missing_decimals() payable {
    return missing_decimals
}

function sub_5223c685(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return bool(stor14[arg1])
}

function nominatedOwner() payable {
    return nominatedOwner
}

function custodian_address() payable {
    return custodian_address
}

function owner() payable {
    return owner
}

function sub_92e51617(?) payable {
    return sub_92e51617Address
}

function sub_9b41830b(?) payable {
    return sub_9b41830bAddress
}

function sub_9d5194ac(?) payable {
    return sub_9d5194acAddress
}

function zapper() payable {
    return zapperAddress
}

function timelock_address() payable {
    return timelock_address
}

function sub_ed163800(?) payable {
    return sub_ed163800
}

function router() payable {
    return routerAddress
}

function _fallback() payable {
    revert
}

function setSlippages(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    sub_ed163800 = arg1
}

function setCustodian(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    if not arg1:
        revert with 0, 'Zero address detected'
    custodian_address = arg1
}

function nominateNewOwner(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Only the contract owner may perform this action'
    nominatedOwner = arg1
    emit OwnerNominated(arg1);
}

function acceptOwnership() payable {
    if nominatedOwner != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'You must be nominated before you can accept ownership'
    emit OwnerChanged(owner, nominatedOwner);
    owner = nominatedOwner
    nominatedOwner = 0
}

function borrowed_fxs() payable {
    require ext_code.size(sub_92e51617Address)
    staticcall sub_92e51617Address.0x3906f181 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function borrowed_frax() payable {
    require ext_code.size(sub_92e51617Address)
    staticcall sub_92e51617Address.0x3001f398 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function borrowed_collat() payable {
    require ext_code.size(sub_92e51617Address)
    staticcall sub_92e51617Address.0x5242e71d with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function removeTrackedLP(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    if bool(stor14[address(arg1)]) != 1:
        revert with 0, 'LP not already present'
    stor14[address(arg1)] = 0
    idx = 0
    while idx < sub_136e4b88.length:
        mem[0] = 13
        if sub_136e4b88[idx] != arg1:
            if idx == -1:
                revert with 'NH{q', 17
            idx = idx + 1
            continue 
        if idx >= sub_136e4b88.length:
            revert with 'NH{q', 50
        sub_136e4b88[idx] = 0
}

function setAMOMinter(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    sub_92e51617Address = arg1
    require ext_code.size(arg1)
    staticcall arg1.0xdc6663c7 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    timelock_address = ext_call.return_data[12 len 20]
    if not ext_call.return_data[12 len 20]:
        revert with 0, 'Invalid timelock'
}

function giveFXSBack(uint256 arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    require ext_code.size(stor3)
    call stor3.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args sub_92e51617Address, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    require ext_code.size(sub_92e51617Address)
    call sub_92e51617Address.'ueg:' with:
         gas gas_remaining wei
        args sub_3e0551edAddress, arg1, arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function giveFRAXBack(uint256 arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    require ext_code.size(stor2)
    call stor2.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args sub_92e51617Address, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    require ext_code.size(sub_92e51617Address)
    call sub_92e51617Address.'ueg:' with:
         gas gas_remaining wei
        args sub_9b41830bAddress, arg1, arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function giveCollatBack(uint256 arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    require ext_code.size(stor5)
    call stor5.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args sub_92e51617Address, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    require ext_code.size(sub_92e51617Address)
    call sub_92e51617Address.'ueg:' with:
         gas gas_remaining wei
        args sub_9d5194acAddress, arg1, arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function showTokenBalances() payable {
    require ext_code.size(stor2)
    staticcall stor2.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor3)
    staticcall stor3.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor5)
    staticcall stor5.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0]
}

function execute(address arg1, uint256 arg2, bytes arg3) payable {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg3 <= test266151307()
    require arg3 + 35 < calldata.size
    require arg3.length <= test266151307()
    require arg3 + arg3.length + 36 <= calldata.size
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    mem[96 len arg3.length] = arg3[all]
    mem[arg3.length + 96] = 0
    call arg1 with:
       value arg2 wei
         gas gas_remaining wei
        args arg3[all]
    if return_data.size:
        return bool(ext_call.success), Array(len=return_data.size, data=ext_call.return_data[0 len return_data.size])
    mem[96] = bool(ext_call.success)
    mem[128] = 64
    mem[160] = bool(ext_call.success)
    mem[192 len ceil32(bool(ext_call.success))] = mem[128 len ceil32(bool(ext_call.success))]
    if ceil32(bool(ext_call.success)) > bool(ext_call.success):
        mem[bool(ext_call.success) + 192] = 0
    return memory
      from 96
       len ceil32(bool(ext_call.success)) + 96
}

function removeLiquidity(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    if not stor14[address(arg1)]:
        revert with 0, 'LP address not allowed'
    require ext_code.size(arg1)
    call arg1.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args routerAddress, arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(arg1)
    staticcall arg1.token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(routerAddress)
    call routerAddress.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
         gas gas_remaining wei
        args address(ext_call.return_data[0]), address(ext_call.return_data[0]), arg2, 0, 0, this.address, 2105300114
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    return ext_call.return_data[0], ext_call.return_data[32]
}

function addTrackedLP(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(arg1)
    if ext_call.return_data[12 len 20] != sub_9b41830bAddress:
        staticcall arg1.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != sub_3e0551edAddress:
        require ext_code.size(arg1)
        staticcall arg1.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if address(ext_call.return_data[0]) != sub_9b41830bAddress:
        if ext_call.return_data[12 len 20] != sub_3e0551edAddress:
            revert with 0, 'FRAX or FXS not in pair'
    if stor14[address(arg1)]:
        revert with 0, 'LP already exists'
    stor14[address(arg1)] = 1
    sub_136e4b88.length++
    sub_136e4b88[sub_136e4b88.length] = arg1
}

function addLiquidity(address arg1, address arg2, uint256 arg3, address arg4, uint256 arg5) payable {
    require calldata.size - 4 >= 160
    require arg1 == arg1
    require arg2 == arg2
    require arg4 == arg4
    if timelock_address != msg.sender:
        if owner != msg.sender:
            revert with 0, 'Not owner or timelock'
    if not stor14[address(arg1)]:
        revert with 0, 'LP address not allowed'
    require ext_code.size(arg2)
    call arg2.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args routerAddress, arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    require ext_code.size(arg4)
    call arg4.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args routerAddress, arg5
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    if arg3 and sub_ed163800 > -1 / arg3:
        revert with 'NH{q', 17
    if not stor17:
        revert with 'NH{q', 18
    if arg3 < arg3 * sub_ed163800 / stor17:
        revert with 'NH{q', 17
    if arg5 and sub_ed163800 > -1 / arg5:
        revert with 'NH{q', 17
    if not stor17:
        revert with 'NH{q', 18
    if arg5 < arg5 * sub_ed163800 / stor17:
        revert with 'NH{q', 17
    require ext_code.size(routerAddress)
    call routerAddress.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
         gas gas_remaining wei
        args address(arg2), address(arg4), arg3, arg5, arg3 - (arg3 * sub_ed163800 / stor17), arg5 - (arg5 * sub_ed163800 / stor17), this.address, 2105300114
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    return ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64]
}

function pair_reserve_ratio_E18(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(arg1)
    staticcall arg1.token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    require ext_code.size(arg1)
    staticcall arg1.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if uint8(ext_call.return_data[0]) >= uint8(ext_call.return_data[0]):
        if ext_call.return_data[50 len 14] and 1 > -1 / ext_call.return_data[50 len 14]:
            revert with 'NH{q', 17
    else:
        if uint8(ext_call.return_data[0]) < uint8(ext_call.return_data[0]):
            revert with 'NH{q', 17
        if uint8(ext_call.return_data[0]) < uint8(ext_call.return_data[0]):
            if ext_call.return_data[18 len 14] and 1 > -1 / ext_call.return_data[18 len 14]:
                revert with 'NH{q', 17
        else:
            if ext_call.return_data[50 len 14] and 1 > -1 / ext_call.return_data[50 len 14]:
                revert with 'NH{q', 17
    if address(ext_call.return_data[0]) == arg2:
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 'NH{q', 17
        if not ext_call.return_data[50 len 14]:
            revert with 'NH{q', 18
        return (10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14])
    if address(ext_call.return_data[0]) != arg2:
        revert with 0, 'Token not in pair'
    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 'NH{q', 17
    if not ext_call.return_data[18 len 14]:
        revert with 'NH{q', 18
    return (10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14])
}

function swapTokens(address arg1, uint256 arg2, address arg3, uint256 arg4) payable {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg3 == arg3
    if msg.sender == timelock_address:
        mem[100] = routerAddress
        mem[132] = arg2
        require ext_code.size(arg1)
        call arg1.approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args routerAddress, arg2
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        mem[ceil32(return_data.size) + 96] = 2
        mem[ceil32(return_data.size) + 128] = arg1
        mem[ceil32(return_data.size) + 160] = arg3
        mem[ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 196] = arg2
        mem[ceil32(return_data.size) + 228] = arg4
        mem[ceil32(return_data.size) + 260] = 160
        mem[ceil32(return_data.size) + 356] = 2
        idx = 0
        s = ceil32(return_data.size) + 388
        t = ceil32(return_data.size) + 128
        while idx < 2:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[ceil32(return_data.size) + 292] = this.address
        mem[ceil32(return_data.size) + 324] = 2105300114
        require ext_code.size(routerAddress)
        call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, arg4, Array(len=2, data=mem[ceil32(return_data.size) + 388 len 64]), address(this.address), 2105300114
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _49 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
        require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
        require ceil32(return_data.size) + return_data.size + 192 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 223
        _51 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]
        if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192] > test266151307():
            revert with 'NH{q', 65
        if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]) + 193 > test266151307():
            revert with 'NH{q', 65
        mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]) + 193
        mem[(2 * ceil32(return_data.size)) + 192] = _51
        require _49 + (32 * _51) + 32 <= return_data.size
        mem[(2 * ceil32(return_data.size)) + 224 len 32 * _51] = mem[ceil32(return_data.size) + _49 + 224 len 32 * _51]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _51
        mem[mem[64] + 64 len 32 * _51] = mem[(2 * ceil32(return_data.size)) + 224 len 32 * _51]
        return Array(len=_51, data=mem[mem[64] + 64 len 32 * _51])
    if owner != msg.sender:
        revert with 0, 'Not owner or timelock'
    mem[100] = routerAddress
    mem[132] = arg2
    require ext_code.size(arg1)
    call arg1.approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args routerAddress, arg2
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    mem[ceil32(return_data.size) + 96] = 2
    mem[ceil32(return_data.size) + 128] = arg1
    mem[ceil32(return_data.size) + 160] = arg3
    mem[ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 196] = arg2
    mem[ceil32(return_data.size) + 228] = arg4
    mem[ceil32(return_data.size) + 260] = 160
    mem[ceil32(return_data.size) + 356] = 2
    idx = 0
    s = ceil32(return_data.size) + 388
    t = ceil32(return_data.size) + 128
    while idx < 2:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[ceil32(return_data.size) + 292] = this.address
    mem[ceil32(return_data.size) + 324] = 2105300114
    require ext_code.size(routerAddress)
    call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args arg2, arg4, Array(len=2, data=mem[ceil32(return_data.size) + 388 len 64]), address(this.address), 2105300114
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 192
    require return_data.size >= 32
    _50 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32
    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
    require ceil32(return_data.size) + return_data.size + 192 > ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 223
    _52 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192] > test266151307():
        revert with 'NH{q', 65
    if ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]) + 1 < 0 or (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]) + 193 > test266151307():
        revert with 'NH{q', 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, arg2) >> 32 + 192]) + 193
    mem[(2 * ceil32(return_data.size)) + 192] = _52
    require _50 + (32 * _52) + 32 <= return_data.size
    mem[(2 * ceil32(return_data.size)) + 224 len 32 * _52] = mem[ceil32(return_data.size) + _50 + 224 len 32 * _52]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _52
    mem[mem[64] + 64 len 32 * _52] = mem[(2 * ceil32(return_data.size)) + 224 len 32 * _52]
    return Array(len=_52, data=mem[mem[64] + 64 len 32 * _52])
}

function sub_e3cc6fe3(?) payable {
    require calldata.size - 4 >= 128
    require cd[4] == address(cd[4])
    require cd[100] <= test266151307()
    require calldata.size > cd[100] + 35
    if ('cd', 100).length > test266151307():
        revert with 'NH{q', 65
    if ceil32(32 * ('cd', 100).length) + 97 < 96 or ceil32(32 * ('cd', 100).length) + 97 > test266151307():
        revert with 'NH{q', 65
    mem[96] = ('cd', 100).length
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    s = cd[100] + 36
    t = 128
    idx = 0
    while idx < ('cd', 100).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    if msg.sender == timelock_address:
        mem[ceil32(32 * ('cd', 100).length) + 101] = routerAddress
        mem[ceil32(32 * ('cd', 100).length) + 133] = cd[36]
        require ext_code.size(address(cd[4]))
        call address(cd[4]).approve(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args routerAddress, cd[36]
        mem[ceil32(32 * ('cd', 100).length) + 97] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 101] = cd[36]
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 133] = cd[68]
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 165] = 160
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 261] = ('cd', 100).length
        idx = 0
        s = ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 293
        t = 128
        while idx < ('cd', 100).length:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 197] = this.address
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 229] = 2105300114
        require ext_code.size(routerAddress)
        call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 293 len 32 * ('cd', 100).length]), address(this.address), 2105300114
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 97
        require return_data.size >= 32
        _80 = mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32
        require mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
        require ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + return_data.size + 97 > ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 128
        _82 = mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]
        if mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97] > test266151307():
            revert with 'NH{q', 65
        if ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 1 < 0 or ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98 > test266151307():
            revert with 'NH{q', 65
        mem[64] = ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98
        mem[ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 97] = _82
        require _80 + (32 * _82) + 32 <= return_data.size
        mem[ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 129 len 32 * _82] = mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + _80 + 129 len 32 * _82]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _82
        mem[mem[64] + 64 len 32 * _82] = mem[ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 129 len 32 * _82]
        return Array(len=_82, data=mem[mem[64] + 64 len 32 * _82])
    if owner != msg.sender:
        revert with 0, 'Not owner or timelock'
    mem[ceil32(32 * ('cd', 100).length) + 101] = routerAddress
    mem[ceil32(32 * ('cd', 100).length) + 133] = cd[36]
    require ext_code.size(address(cd[4]))
    call address(cd[4]).approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args routerAddress, cd[36]
    mem[ceil32(32 * ('cd', 100).length) + 97] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97] = 0x38ed173900000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 101] = cd[36]
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 133] = cd[68]
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 165] = 160
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 261] = ('cd', 100).length
    idx = 0
    s = ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 293
    t = 128
    while idx < ('cd', 100).length:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 197] = this.address
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 229] = 2105300114
    require ext_code.size(routerAddress)
    call routerAddress.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 293 len 32 * ('cd', 100).length]), address(this.address), 2105300114
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 97
    require return_data.size >= 32
    _81 = mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32
    require mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
    require ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + return_data.size + 97 > ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 128
    _83 = mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]
    if mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97] > test266151307():
        revert with 'NH{q', 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 1 < 0 or ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98 > test266151307():
        revert with 'NH{q', 65
    mem[64] = ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + 97 len 4], Mask(224, 32, cd[36]) >> 32 + 97]) + 98
    mem[ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 97] = _83
    require _81 + (32 * _83) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 129 len 32 * _83] = mem[ceil32(32 * ('cd', 100).length) + ceil32(return_data.size) + _81 + 129 len 32 * _83]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _83
    mem[mem[64] + 64 len 32 * _83] = mem[ceil32(32 * ('cd', 100).length) + (2 * ceil32(return_data.size)) + 129 len 32 * _83]
    return Array(len=_83, data=mem[mem[64] + 64 len 32 * _83])
}

function lpTokenInfo(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(arg1)
    staticcall arg1.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(arg1)
    staticcall arg1.token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if sub_9b41830bAddress == address(ext_call.return_data[0]):
        require ext_code.size(arg1)
        staticcall arg1.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 'NH{q', 17
        if not ext_call.return_data[0]:
            revert with 'NH{q', 18
        require ext_code.size(arg1)
        staticcall arg1.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                   10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 'NH{q', 17
        if not ext_call.return_data[0]:
            revert with 'NH{q', 18
        require ext_code.size(arg1)
        staticcall arg1.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 'NH{q', 17
        if not ext_call.return_data[0]:
            revert with 'NH{q', 18
        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                       10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                       0
        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
                       10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                       1
        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
            revert with 0, 'Invalid pair'
        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
            revert with 0, 'Invalid pair'
        return 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0], 
               10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
               10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
               2
    if sub_3e0551edAddress == address(ext_call.return_data[0]):
        require ext_code.size(arg1)
        staticcall arg1.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 'NH{q', 17
        if not ext_call.return_data[0]:
            revert with 'NH{q', 18
        require ext_code.size(arg1)
        staticcall arg1.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 'NH{q', 17
        if not ext_call.return_data[0]:
            revert with 'NH{q', 18
        require ext_code.size(arg1)
        staticcall arg1.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 'NH{q', 17
        if not ext_call.return_data[0]:
            revert with 'NH{q', 18
        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                       10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                       0
        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                       10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                       1
        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
            revert with 0, 'Invalid pair'
        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
            revert with 0, 'Invalid pair'
        return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
               10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
               10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
               2
    if sub_9d5194acAddress != address(ext_call.return_data[0]):
        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
        if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           0
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                           1
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * call.data[calldata.size + 64] / ext_call.return_data[0],
                   2
    else:
        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           0
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           1
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                   2
        if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           0
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           1
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                   2
        if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            require ext_code.size(arg1)
            staticcall arg1.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           0
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                           10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                           1
            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                revert with 0, 'Invalid pair'
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0],
                   2
    ('eq', ('stor', ('name', 'sub_9d5194acAddress', 8)), ('ext_call.return_data', 12, 20))
    require ext_code.size(arg1)
    staticcall arg1.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 'NH{q', 17
    if not ext_call.return_data[0]:
        revert with 'NH{q', 18
    require ext_code.size(arg1)
    staticcall arg1.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 'NH{q', 17
    if not ext_call.return_data[0]:
        revert with 'NH{q', 18
    require ext_code.size(arg1)
    staticcall arg1.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 'NH{q', 17
    if not ext_call.return_data[0]:
        revert with 'NH{q', 18
    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                   0
    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
            return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
                   10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
                   10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
                   1
    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
        revert with 0, 'Invalid pair'
    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
        revert with 0, 'Invalid pair'
    return 10^18 * call.data[calldata.size] / ext_call.return_data[0], 
           10^18 * call.data[calldata.size + 32] / ext_call.return_data[0],
           10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0],
           2
}

function showAllocations() payable {
    mem[96 len 544] = call.data[calldata.size len 544]
    require ext_code.size(sub_92e51617Address)
    staticcall sub_92e51617Address.0xda92c9e6 with:
            gas gas_remaining wei
    mem[640] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(return_data.size) + 644] = sub_3e0551edAddress
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getPrice(address arg1) with:
            gas gas_remaining wei
           args sub_3e0551edAddress
    mem[ceil32(return_data.size) + 640] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(2 * ceil32(return_data.size)) + 640] = 4
    mem[64] = (2 * ceil32(return_data.size)) + 800
    mem[(2 * ceil32(return_data.size)) + 672 len 128] = call.data[calldata.size len 128]
    idx = 0
    while idx < sub_136e4b88.length:
        mem[0] = sub_136e4b88[idx]
        mem[32] = 14
        if stor14[stor13[idx]]:
            _3310 = mem[64]
            mem[64] = mem[64] + 128
            mem[_3310 len 128] = call.data[calldata.size len 128]
            _3312 = mem[64]
            mem[mem[64] + 32 len 96] = call.data[calldata.size len 96]
            require ext_code.size(sub_136e4b88[idx])
            staticcall sub_136e4b88[idx].getReserves() with:
                    gas gas_remaining wei
            mem[mem[64] + 128 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_136e4b88[idx])
            staticcall sub_136e4b88[idx].token0() with:
                    gas gas_remaining wei
            mem[mem[64] + ceil32(return_data.size) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_136e4b88[idx])
            staticcall sub_136e4b88[idx].token1() with:
                    gas gas_remaining wei
            mem[mem[64] + (2 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + (4 * ceil32(return_data.size)) + 128
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if sub_9b41830bAddress == address(ext_call.return_data[0]):
                if 0 >= mem[_3312]:
                    revert with 'NH{q', 50
                mem[_3312 + 32] = Mask(112, 0, ext_call.return_data[0])
                if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                    if 0 >= mem[_3312]:
                        revert with 'NH{q', 50
                    mem[_3312 + 32] = Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_136e4b88[idx])
                    staticcall sub_136e4b88[idx].0x18160ddd with:
                            gas gas_remaining wei
                    mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    if 0 >= mem[_3312]:
                        revert with 'NH{q', 50
                    if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[0]:
                        revert with 'NH{q', 18
                    mem[_3310] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                    require ext_code.size(sub_136e4b88[idx])
                    staticcall sub_136e4b88[idx].0x18160ddd with:
                            gas gas_remaining wei
                    mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    if 1 >= mem[_3312]:
                        revert with 'NH{q', 50
                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[0]:
                        revert with 'NH{q', 18
                    mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                    require ext_code.size(sub_136e4b88[idx])
                    staticcall sub_136e4b88[idx].0x18160ddd with:
                            gas gas_remaining wei
                    mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    if 2 >= mem[_3312]:
                        revert with 'NH{q', 50
                    if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[0]:
                        revert with 'NH{q', 18
                    mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                revert with 0, 'Invalid pair'
                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                revert with 0, 'Invalid pair'
                            mem[_3310 + 96] = 2
                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                        else:
                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3310 + 96] = 2
                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                mem[_3310 + 96] = 1
                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                    revert with 'NH{q', 17
                                if not stor17:
                                    revert with 'NH{q', 18
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                            mem[_3310 + 96] = 0
                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                        else:
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3310 + 96] = 2
                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    mem[_3310 + 96] = 1
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    if not stor17:
                                        revert with 'NH{q', 18
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                else:
                    if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                        if 1 >= mem[_3312]:
                            revert with 'NH{q', 50
                        mem[_3312 + 64] = Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 0 >= mem[_3312]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3310] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 1 >= mem[_3312]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3310 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 2 >= mem[_3312]:
                            revert with 'NH{q', 50
                        if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3310 + 96] = 2
                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    mem[_3310 + 96] = 1
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    if not stor17:
                                        revert with 'NH{q', 18
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                mem[_3310 + 96] = 0
                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3310 + 96] = 1
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3310 + 96] = 1
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3310 + 96] = 0
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if 2 >= mem[_3312]:
                                revert with 'NH{q', 50
                            mem[_3312 + 96] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3310 + 96] = 1
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3310 + 96] = 0
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
            else:
                if sub_3e0551edAddress == address(ext_call.return_data[0]):
                    if 1 >= mem[_3312]:
                        revert with 'NH{q', 50
                    mem[_3312 + 64] = Mask(112, 0, ext_call.return_data[0])
                    if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                        if 0 >= mem[_3312]:
                            revert with 'NH{q', 50
                        mem[_3312 + 32] = Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 0 >= mem[_3312]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3310] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 1 >= mem[_3312]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3310 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 2 >= mem[_3312]:
                            revert with 'NH{q', 50
                        if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3310 + 96] = 2
                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    mem[_3310 + 96] = 1
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    if not stor17:
                                        revert with 'NH{q', 18
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                mem[_3310 + 96] = 0
                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3310 + 96] = 1
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                            if 1 >= mem[_3312]:
                                revert with 'NH{q', 50
                            mem[_3312 + 64] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3310 + 96] = 1
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    mem[_3310 + 96] = 0
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        mem[_3310 + 96] = 0
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if 2 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                mem[_3312 + 96] = Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        mem[_3310 + 96] = 0
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                else:
                    if sub_9d5194acAddress != address(ext_call.return_data[0]):
                        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                            if 0 >= mem[_3312]:
                                revert with 'NH{q', 50
                            mem[_3312 + 32] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3310 + 96] = 1
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3310 + 96] = 0
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                                if 1 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                mem[_3312 + 64] = Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        mem[_3310 + 96] = 0
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3310 + 96] = 0
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3310 + 96] = 2
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3310 + 96] = 1
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if 2 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    mem[_3312 + 96] = Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3310 + 96] = 0
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3310 + 96] = 2
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3310 + 96] = 1
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if 2 >= mem[_3312]:
                            revert with 'NH{q', 50
                        mem[_3312 + 96] = Mask(112, 0, ext_call.return_data[0])
                        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                            if 0 >= mem[_3312]:
                                revert with 'NH{q', 50
                            mem[_3312 + 32] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3312]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3310 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3310 + 96] = 2
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3310 + 96] = 1
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3310 + 96] = 0
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                                if 1 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                mem[_3312 + 64] = Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3312]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3310 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3310 + 96] = 2
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3310 + 96] = 1
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        mem[_3310 + 96] = 0
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3310 + 96] = 0
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3310 + 96] = 2
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3310 + 96] = 1
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if 2 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    mem[_3312 + 96] = Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3312 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3312 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3312]:
                                        revert with 'NH{q', 50
                                    if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3310 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3310 + 96] = 2
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3310 + 96] = 1
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3310 + 96] = 0
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3310 + 96] = 2
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3310 + 96] = 2
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3310 + 96] = 1
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3312 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3312 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 672] = mem[(2 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 704] = mem[(2 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 736] = mem[(2 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(2 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(2 * ceil32(return_data.size)) + 768] = mem[(2 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
        if idx == -1:
            revert with 'NH{q', 17
        idx = idx + 1
        continue 
    mem[mem[64] + 4] = this.address
    require ext_code.size(stor2)
    staticcall stor2.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _3308 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    mem[96] = mem[_3308]
    if not mem[(2 * ceil32(return_data.size)) + 640]:
        revert with 'NH{q', 50
    mem[128] = mem[(2 * ceil32(return_data.size)) + 672]
    if mem[96] > !mem[(2 * ceil32(return_data.size)) + 672]:
        revert with 'NH{q', 17
    mem[160] = mem[96] + mem[(2 * ceil32(return_data.size)) + 672]
    mem[mem[64] + 4] = this.address
    require ext_code.size(stor3)
    staticcall stor3.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _3322 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _3324 = mem[_3322]
    mem[192] = mem[_3322]
    if _3324 and ext_call.return_data[0] > -1 / _3324:
        revert with 'NH{q', 17
    if not stor17:
        revert with 'NH{q', 18
    mem[224] = _3324 * ext_call.return_data[0] / stor17
    if 1 >= mem[(2 * ceil32(return_data.size)) + 640]:
        revert with 'NH{q', 50
    mem[256] = mem[(2 * ceil32(return_data.size)) + 704]
    if mem[(2 * ceil32(return_data.size)) + 704] and ext_call.return_data[0] > -1 / mem[(2 * ceil32(return_data.size)) + 704]:
        revert with 'NH{q', 17
    if not stor17:
        revert with 'NH{q', 18
    mem[288] = mem[(2 * ceil32(return_data.size)) + 704] * ext_call.return_data[0] / stor17
    if mem[192] > !mem[(2 * ceil32(return_data.size)) + 704]:
        revert with 'NH{q', 17
    mem[320] = mem[192] + mem[(2 * ceil32(return_data.size)) + 704]
    if _3324 * ext_call.return_data[0] / stor17 > !(mem[(2 * ceil32(return_data.size)) + 704] * ext_call.return_data[0] / stor17):
        revert with 'NH{q', 17
    mem[352] = (_3324 * ext_call.return_data[0] / stor17) + (mem[(2 * ceil32(return_data.size)) + 704] * ext_call.return_data[0] / stor17)
    mem[mem[64] + 4] = this.address
    require ext_code.size(stor5)
    staticcall stor5.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _3346 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    mem[384] = mem[_3346]
    if not missing_decimals:
        if mem[384] and 1 > -1 / mem[384]:
            revert with 'NH{q', 17
        mem[416] = mem[384]
        if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
            revert with 'NH{q', 50
        mem[448] = mem[(2 * ceil32(return_data.size)) + 736]
        if not missing_decimals:
            if mem[(2 * ceil32(return_data.size)) + 736] and 1 > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                revert with 'NH{q', 17
            mem[480] = mem[(2 * ceil32(return_data.size)) + 736]
            if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                revert with 'NH{q', 17
            mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
            if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                revert with 'NH{q', 17
            mem[544] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
            if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                revert with 'NH{q', 50
            mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
            if mem[160] > !mem[352]:
                revert with 'NH{q', 17
            if mem[160] + mem[352] > !(mem[384] + mem[(2 * ceil32(return_data.size)) + 736]):
                revert with 'NH{q', 17
            mem[608] = mem[160] + mem[352] + mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
            mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384], mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736], mem[384] + mem[(2 * ceil32(return_data.size)) + 736], mem[384] + mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
        else:
            if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                if mem[(2 * ceil32(return_data.size)) + 736] and 10^missing_decimals > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[480] = mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals
                if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                if mem[384] > !(mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals):
                    revert with 'NH{q', 17
                mem[544] = mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                if mem[160] > !mem[352]:
                    revert with 'NH{q', 17
                if mem[160] + mem[352] > !(mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)):
                    revert with 'NH{q', 17
                mem[608] = mem[160] + mem[352] + mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384], mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals, mem[384] + mem[(2 * ceil32(return_data.size)) + 736], mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals), mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
            else:
                s = 10
                t = 1
                idx = missing_decimals
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 736] and s * t > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[480] = mem[(2 * ceil32(return_data.size)) + 736] * s * t
                if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                if mem[384] > !(mem[(2 * ceil32(return_data.size)) + 736] * s * t):
                    revert with 'NH{q', 17
                mem[544] = mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)
                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                if mem[160] > !mem[352]:
                    revert with 'NH{q', 17
                if mem[160] + mem[352] > !(mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)):
                    revert with 'NH{q', 17
                mem[608] = mem[160] + mem[352] + mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)
                mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384], mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736] * s * t, mem[384] + mem[(2 * ceil32(return_data.size)) + 736], mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * s * t), mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + mem[384] + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)
    else:
        if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
            if mem[384] and 10^missing_decimals > -1 / mem[384]:
                revert with 'NH{q', 17
            mem[416] = mem[384] * 10^missing_decimals
            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                revert with 'NH{q', 50
            mem[448] = mem[(2 * ceil32(return_data.size)) + 736]
            if not missing_decimals:
                if mem[(2 * ceil32(return_data.size)) + 736] and 1 > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[480] = mem[(2 * ceil32(return_data.size)) + 736]
                if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                if mem[384] * 10^missing_decimals > !mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[544] = (mem[384] * 10^missing_decimals) + mem[(2 * ceil32(return_data.size)) + 736]
                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                if mem[160] > !mem[352]:
                    revert with 'NH{q', 17
                if mem[160] + mem[352] > !((mem[384] * 10^missing_decimals) + mem[(2 * ceil32(return_data.size)) + 736]):
                    revert with 'NH{q', 17
                mem[608] = mem[160] + mem[352] + (mem[384] * 10^missing_decimals) + mem[(2 * ceil32(return_data.size)) + 736]
                mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384] * 10^missing_decimals, mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736], mem[384] + mem[(2 * ceil32(return_data.size)) + 736], (mem[384] * 10^missing_decimals) + mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + (mem[384] * 10^missing_decimals) + mem[(2 * ceil32(return_data.size)) + 736]
            else:
                if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                    if mem[(2 * ceil32(return_data.size)) + 736] and 10^missing_decimals > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[480] = mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals
                    if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                    if mem[384] * 10^missing_decimals > !(mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals):
                        revert with 'NH{q', 17
                    mem[544] = (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                    if mem[160] > !mem[352]:
                        revert with 'NH{q', 17
                    if mem[160] + mem[352] > !((mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)):
                        revert with 'NH{q', 17
                    mem[608] = mem[160] + mem[352] + (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384] * 10^missing_decimals, mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals, mem[384] + mem[(2 * ceil32(return_data.size)) + 736], (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals), mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                else:
                    s = 10
                    t = 1
                    idx = missing_decimals
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 736] and s * t > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[480] = mem[(2 * ceil32(return_data.size)) + 736] * s * t
                    if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                    if mem[384] * 10^missing_decimals > !(mem[(2 * ceil32(return_data.size)) + 736] * s * t):
                        revert with 'NH{q', 17
                    mem[544] = (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)
                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                    if mem[160] > !mem[352]:
                        revert with 'NH{q', 17
                    if mem[160] + mem[352] > !((mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)):
                        revert with 'NH{q', 17
                    mem[608] = mem[160] + mem[352] + (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)
                    mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384] * 10^missing_decimals, mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736] * s * t, mem[384] + mem[(2 * ceil32(return_data.size)) + 736], (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * s * t), mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + (mem[384] * 10^missing_decimals) + (mem[(2 * ceil32(return_data.size)) + 736] * s * t)
        else:
            s = 10
            t = 1
            idx = missing_decimals
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            if mem[384] and s * t > -1 / mem[384]:
                revert with 'NH{q', 17
            mem[416] = mem[384] * s * t
            if 2 >= mem[(2 * ceil32(return_data.size)) + 640]:
                revert with 'NH{q', 50
            mem[448] = mem[(2 * ceil32(return_data.size)) + 736]
            if not missing_decimals:
                if mem[(2 * ceil32(return_data.size)) + 736] and 1 > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[480] = mem[(2 * ceil32(return_data.size)) + 736]
                if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                if mem[384] * s * t > !mem[(2 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[544] = (mem[384] * s * t) + mem[(2 * ceil32(return_data.size)) + 736]
                if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                if mem[160] > !mem[352]:
                    revert with 'NH{q', 17
                if mem[160] + mem[352] > !((mem[384] * s * t) + mem[(2 * ceil32(return_data.size)) + 736]):
                    revert with 'NH{q', 17
                mem[608] = mem[160] + mem[352] + (mem[384] * s * t) + mem[(2 * ceil32(return_data.size)) + 736]
                mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384] * s * t, mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736], mem[384] + mem[(2 * ceil32(return_data.size)) + 736], (mem[384] * s * t) + mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + (mem[384] * s * t) + mem[(2 * ceil32(return_data.size)) + 736]
            else:
                if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                    if mem[(2 * ceil32(return_data.size)) + 736] and 10^missing_decimals > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[480] = mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals
                    if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                    if mem[384] * s * t > !(mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals):
                        revert with 'NH{q', 17
                    mem[544] = (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                    if mem[160] > !mem[352]:
                        revert with 'NH{q', 17
                    if mem[160] + mem[352] > !((mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)):
                        revert with 'NH{q', 17
                    mem[608] = mem[160] + mem[352] + (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384] * s * t, mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals, mem[384] + mem[(2 * ceil32(return_data.size)) + 736], (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals), mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                else:
                    u = 10
                    v = 1
                    idx = missing_decimals
                    while idx > 1:
                        if u > -1 / u:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            u = u * u
                            v = v
                            idx = uint255(idx) * 0.5
                            continue 
                        u = u * u
                        v = u * v
                        idx = uint255(idx) * 0.5
                        continue 
                    if v > -1 / u:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 736] and u * v > -1 / mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[480] = mem[(2 * ceil32(return_data.size)) + 736] * u * v
                    if mem[384] > !mem[(2 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[512] = mem[384] + mem[(2 * ceil32(return_data.size)) + 736]
                    if mem[384] * s * t > !(mem[(2 * ceil32(return_data.size)) + 736] * u * v):
                        revert with 'NH{q', 17
                    mem[544] = (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * u * v)
                    if 3 >= mem[(2 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[576] = mem[(2 * ceil32(return_data.size)) + 768]
                    if mem[160] > !mem[352]:
                        revert with 'NH{q', 17
                    if mem[160] + mem[352] > !((mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * u * v)):
                        revert with 'NH{q', 17
                    mem[608] = mem[160] + mem[352] + (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * u * v)
                    mem[mem[64] len 544] = mem[96 len 128], _3324 * ext_call.return_data[0] / stor17, mem[256 len 160], mem[384] * s * t, mem[(2 * ceil32(return_data.size)) + 736], mem[(2 * ceil32(return_data.size)) + 736] * u * v, mem[384] + mem[(2 * ceil32(return_data.size)) + 736], (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * u * v), mem[(2 * ceil32(return_data.size)) + 768], mem[160] + mem[352] + (mem[384] * s * t) + (mem[(2 * ceil32(return_data.size)) + 736] * u * v)
    return memory
      from mem[64]
       len 544
}

function total_profit() payable {
    require ext_code.size(sub_92e51617Address)
    staticcall sub_92e51617Address.0xda92c9e6 with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(return_data.size) + 100] = sub_3e0551edAddress
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getPrice(address arg1) with:
            gas gas_remaining wei
           args sub_3e0551edAddress
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(2 * ceil32(return_data.size)) + 96 len 544] = call.data[calldata.size len 544]
    require ext_code.size(sub_92e51617Address)
    staticcall sub_92e51617Address.0xda92c9e6 with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(4 * ceil32(return_data.size)) + 644] = sub_3e0551edAddress
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getPrice(address arg1) with:
            gas gas_remaining wei
           args sub_3e0551edAddress
    mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(6 * ceil32(return_data.size)) + 640] = 4
    mem[64] = (6 * ceil32(return_data.size)) + 800
    mem[(6 * ceil32(return_data.size)) + 672 len 128] = call.data[calldata.size len 128]
    idx = 0
    while idx < sub_136e4b88.length:
        mem[0] = sub_136e4b88[idx]
        mem[32] = 14
        if stor14[stor13[idx]]:
            _3579 = mem[64]
            mem[64] = mem[64] + 128
            mem[_3579 len 128] = call.data[calldata.size len 128]
            _3581 = mem[64]
            mem[mem[64] + 32 len 96] = call.data[calldata.size len 96]
            require ext_code.size(sub_136e4b88[idx])
            staticcall sub_136e4b88[idx].getReserves() with:
                    gas gas_remaining wei
            mem[mem[64] + 128 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_136e4b88[idx])
            staticcall sub_136e4b88[idx].token0() with:
                    gas gas_remaining wei
            mem[mem[64] + ceil32(return_data.size) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(sub_136e4b88[idx])
            staticcall sub_136e4b88[idx].token1() with:
                    gas gas_remaining wei
            mem[mem[64] + (2 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + (4 * ceil32(return_data.size)) + 128
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if sub_9b41830bAddress == address(ext_call.return_data[0]):
                if 0 >= mem[_3581]:
                    revert with 'NH{q', 50
                mem[_3581 + 32] = Mask(112, 0, ext_call.return_data[0])
                if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                    if 0 >= mem[_3581]:
                        revert with 'NH{q', 50
                    mem[_3581 + 32] = Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_136e4b88[idx])
                    staticcall sub_136e4b88[idx].0x18160ddd with:
                            gas gas_remaining wei
                    mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    if 0 >= mem[_3581]:
                        revert with 'NH{q', 50
                    if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[0]:
                        revert with 'NH{q', 18
                    mem[_3579] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                    require ext_code.size(sub_136e4b88[idx])
                    staticcall sub_136e4b88[idx].0x18160ddd with:
                            gas gas_remaining wei
                    mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    if 1 >= mem[_3581]:
                        revert with 'NH{q', 50
                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[0]:
                        revert with 'NH{q', 18
                    mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                    require ext_code.size(sub_136e4b88[idx])
                    staticcall sub_136e4b88[idx].0x18160ddd with:
                            gas gas_remaining wei
                    mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                    require return_data.size >= 32
                    if 2 >= mem[_3581]:
                        revert with 'NH{q', 50
                    if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 'NH{q', 17
                    if not ext_call.return_data[0]:
                        revert with 'NH{q', 18
                    mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                revert with 0, 'Invalid pair'
                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                revert with 0, 'Invalid pair'
                            mem[_3579 + 96] = 2
                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                        else:
                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3579 + 96] = 2
                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                mem[_3579 + 96] = 1
                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                    revert with 'NH{q', 17
                                if not stor17:
                                    revert with 'NH{q', 18
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                            mem[_3579 + 96] = 0
                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                revert with 'NH{q', 17
                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                revert with 'NH{q', 50
                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                revert with 'NH{q', 17
                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                        else:
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3579 + 96] = 2
                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    mem[_3579 + 96] = 1
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    if not stor17:
                                        revert with 'NH{q', 18
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                else:
                    if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                        if 1 >= mem[_3581]:
                            revert with 'NH{q', 50
                        mem[_3581 + 64] = Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 0 >= mem[_3581]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3579] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 1 >= mem[_3581]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3579 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 2 >= mem[_3581]:
                            revert with 'NH{q', 50
                        if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3579 + 96] = 2
                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    mem[_3579 + 96] = 1
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    if not stor17:
                                        revert with 'NH{q', 18
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                mem[_3579 + 96] = 0
                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3579 + 96] = 1
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3579 + 96] = 1
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3579 + 96] = 0
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if 2 >= mem[_3581]:
                                revert with 'NH{q', 50
                            mem[_3581 + 96] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3579 + 96] = 1
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3579 + 96] = 0
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
            else:
                if sub_3e0551edAddress == address(ext_call.return_data[0]):
                    if 1 >= mem[_3581]:
                        revert with 'NH{q', 50
                    mem[_3581 + 64] = Mask(112, 0, ext_call.return_data[0])
                    if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                        if 0 >= mem[_3581]:
                            revert with 'NH{q', 50
                        mem[_3581 + 32] = Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 0 >= mem[_3581]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3579] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 1 >= mem[_3581]:
                            revert with 'NH{q', 50
                        if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3579 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                        require ext_code.size(sub_136e4b88[idx])
                        staticcall sub_136e4b88[idx].0x18160ddd with:
                                gas gas_remaining wei
                        mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if 2 >= mem[_3581]:
                            revert with 'NH{q', 50
                        if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 'NH{q', 17
                        if not ext_call.return_data[0]:
                            revert with 'NH{q', 18
                        mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 0, 'Invalid pair'
                                mem[_3579 + 96] = 2
                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    mem[_3579 + 96] = 1
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                        revert with 'NH{q', 17
                                    if not stor17:
                                        revert with 'NH{q', 18
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                mem[_3579 + 96] = 0
                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                    revert with 'NH{q', 17
                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 'NH{q', 17
                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                    revert with 'NH{q', 50
                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                    revert with 'NH{q', 17
                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                            else:
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3579 + 96] = 1
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                            if 1 >= mem[_3581]:
                                revert with 'NH{q', 50
                            mem[_3581 + 64] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3579 + 96] = 1
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    mem[_3579 + 96] = 0
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        mem[_3579 + 96] = 0
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if 2 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                mem[_3581 + 96] = Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        mem[_3579 + 96] = 0
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                else:
                    if sub_9d5194acAddress != address(ext_call.return_data[0]):
                        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                            if 0 >= mem[_3581]:
                                revert with 'NH{q', 50
                            mem[_3581 + 32] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3579 + 96] = 1
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3579 + 96] = 0
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                                if 1 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                mem[_3581 + 64] = Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        mem[_3579 + 96] = 0
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 64] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 64] = 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3579 + 96] = 0
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3579 + 96] = 2
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3579 + 96] = 1
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 64] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * call.data[calldata.size + 64] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if 2 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    mem[_3581 + 96] = Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3579 + 96] = 0
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3579 + 96] = 2
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3579 + 96] = 1
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                    else:
                        if 2 >= mem[_3581]:
                            revert with 'NH{q', 50
                        mem[_3581 + 96] = Mask(112, 0, ext_call.return_data[0])
                        if sub_9b41830bAddress == ext_call.return_data[12 len 20]:
                            if 0 >= mem[_3581]:
                                revert with 'NH{q', 50
                            mem[_3581 + 32] = Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 0 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 1 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                            require ext_code.size(sub_136e4b88[idx])
                            staticcall sub_136e4b88[idx].0x18160ddd with:
                                    gas gas_remaining wei
                            mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if 2 >= mem[_3581]:
                                revert with 'NH{q', 50
                            if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 'NH{q', 17
                            if not ext_call.return_data[0]:
                                revert with 'NH{q', 18
                            mem[_3579 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 0, 'Invalid pair'
                                    mem[_3579 + 96] = 2
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        mem[_3579 + 96] = 1
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                            revert with 'NH{q', 17
                                        if not stor17:
                                            revert with 'NH{q', 18
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                    mem[_3579 + 96] = 0
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                        revert with 'NH{q', 17
                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 'NH{q', 17
                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                        revert with 'NH{q', 50
                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                        revert with 'NH{q', 17
                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                        else:
                            if sub_3e0551edAddress == ext_call.return_data[12 len 20]:
                                if 1 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                mem[_3581 + 64] = Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 0 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 1 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 32] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                require ext_code.size(sub_136e4b88[idx])
                                staticcall sub_136e4b88[idx].0x18160ddd with:
                                        gas gas_remaining wei
                                mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if 2 >= mem[_3581]:
                                    revert with 'NH{q', 50
                                if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 'NH{q', 17
                                if not ext_call.return_data[0]:
                                    revert with 'NH{q', 18
                                mem[_3579 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 0, 'Invalid pair'
                                        mem[_3579 + 96] = 2
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            mem[_3579 + 96] = 1
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                revert with 'NH{q', 17
                                            if not stor17:
                                                revert with 'NH{q', 18
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                        mem[_3579 + 96] = 0
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                        require ext_code.size(sub_136e4b88[idx])
                                        staticcall sub_136e4b88[idx].0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                        require return_data.size >= 32
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                            revert with 'NH{q', 17
                                        if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                            revert with 'NH{q', 17
                                        if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                            revert with 'NH{q', 50
                                        if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 'NH{q', 17
                                        mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                    else:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                            else:
                                if sub_9d5194acAddress != ext_call.return_data[12 len 20]:
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if Mask(112, 0, ext_call.return_data[0]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3579 + 96] = 0
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3579 + 96] = 2
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3579 + 96] = 1
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                else:
                                    if 2 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    mem[_3581 + 96] = Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (6 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 0 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579] = 10^18 * call.data[calldata.size] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (7 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 1 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if call.data[calldata.size + 32] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 32] = 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]
                                    require ext_code.size(sub_136e4b88[idx])
                                    staticcall sub_136e4b88[idx].0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[_3581 + (7 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = _3581 + (8 * ceil32(return_data.size)) + 128
                                    require return_data.size >= 32
                                    if 2 >= mem[_3581]:
                                        revert with 'NH{q', 50
                                    if Mask(112, 0, ext_call.return_data[32]) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 'NH{q', 17
                                    if not ext_call.return_data[0]:
                                        revert with 'NH{q', 18
                                    mem[_3579 + 64] = 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                        if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                            if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 0, 'Invalid pair'
                                            mem[_3579 + 96] = 2
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                mem[_3579 + 96] = 1
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                    revert with 'NH{q', 17
                                                if not stor17:
                                                    revert with 'NH{q', 18
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
                                    else:
                                        if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                            mem[_3579 + 96] = 0
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                            require ext_code.size(sub_136e4b88[idx])
                                            staticcall sub_136e4b88[idx].0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                            require return_data.size >= 32
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                revert with 'NH{q', 17
                                            if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                revert with 'NH{q', 17
                                            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                revert with 'NH{q', 50
                                            if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 'NH{q', 17
                                            mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        else:
                                            if 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 0, 'Invalid pair'
                                                mem[_3579 + 96] = 2
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                require ext_code.size(sub_136e4b88[idx])
                                                staticcall sub_136e4b88[idx].0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                require return_data.size >= 32
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                    revert with 'NH{q', 17
                                                if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 'NH{q', 17
                                                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                    revert with 'NH{q', 50
                                                if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                    revert with 'NH{q', 17
                                                mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            else:
                                                if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                    if not 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    if not 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 0, 'Invalid pair'
                                                    mem[_3579 + 96] = 2
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                else:
                                                    mem[_3579 + 96] = 1
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 132] = this.address
                                                    require ext_code.size(sub_136e4b88[idx])
                                                    staticcall sub_136e4b88[idx].0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[_3581 + (8 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    mem[64] = _3581 + (10 * ceil32(return_data.size)) + 128
                                                    require return_data.size >= 32
                                                    if 10^18 * call.data[calldata.size] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] and ext_call.return_data[0] > -1 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                                                        revert with 'NH{q', 17
                                                    if 0 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 672] > !(10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 672] = mem[(6 * ceil32(return_data.size)) + 672] + (10^18 * call.data[calldata.size] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 704] > !(10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 704] = mem[(6 * ceil32(return_data.size)) + 704] + (10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 736] > !(10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 736] = mem[(6 * ceil32(return_data.size)) + 736] + (10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 and ext_call.return_data[0] > -1 / 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                                                        revert with 'NH{q', 17
                                                    if not stor17:
                                                        revert with 'NH{q', 18
                                                    if 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 'NH{q', 17
                                                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                                                        revert with 'NH{q', 50
                                                    if mem[(6 * ceil32(return_data.size)) + 768] > !(2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17):
                                                        revert with 'NH{q', 17
                                                    mem[(6 * ceil32(return_data.size)) + 768] = mem[(6 * ceil32(return_data.size)) + 768] + (2 * 10^18 * call.data[calldata.size + 32] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * ext_call.return_data[0] / stor17)
        if idx == -1:
            revert with 'NH{q', 17
        idx = idx + 1
        continue 
    mem[mem[64] + 4] = this.address
    require ext_code.size(stor2)
    staticcall stor2.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _3577 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    mem[(2 * ceil32(return_data.size)) + 96] = mem[_3577]
    if not mem[(6 * ceil32(return_data.size)) + 640]:
        revert with 'NH{q', 50
    mem[(2 * ceil32(return_data.size)) + 128] = mem[(6 * ceil32(return_data.size)) + 672]
    if mem[(2 * ceil32(return_data.size)) + 96] > !mem[(6 * ceil32(return_data.size)) + 672]:
        revert with 'NH{q', 17
    mem[(2 * ceil32(return_data.size)) + 160] = mem[(2 * ceil32(return_data.size)) + 96] + mem[(6 * ceil32(return_data.size)) + 672]
    mem[mem[64] + 4] = this.address
    require ext_code.size(stor3)
    staticcall stor3.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _3591 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _3593 = mem[_3591]
    mem[(2 * ceil32(return_data.size)) + 192] = mem[_3591]
    if _3593 and ext_call.return_data[0] > -1 / _3593:
        revert with 'NH{q', 17
    if not stor17:
        revert with 'NH{q', 18
    mem[(2 * ceil32(return_data.size)) + 224] = _3593 * ext_call.return_data[0] / stor17
    if 1 >= mem[(6 * ceil32(return_data.size)) + 640]:
        revert with 'NH{q', 50
    mem[(2 * ceil32(return_data.size)) + 256] = mem[(6 * ceil32(return_data.size)) + 704]
    if mem[(6 * ceil32(return_data.size)) + 704] and ext_call.return_data[0] > -1 / mem[(6 * ceil32(return_data.size)) + 704]:
        revert with 'NH{q', 17
    if not stor17:
        revert with 'NH{q', 18
    mem[(2 * ceil32(return_data.size)) + 288] = mem[(6 * ceil32(return_data.size)) + 704] * ext_call.return_data[0] / stor17
    if mem[(2 * ceil32(return_data.size)) + 192] > !mem[(6 * ceil32(return_data.size)) + 704]:
        revert with 'NH{q', 17
    mem[(2 * ceil32(return_data.size)) + 320] = mem[(2 * ceil32(return_data.size)) + 192] + mem[(6 * ceil32(return_data.size)) + 704]
    if _3593 * ext_call.return_data[0] / stor17 > !(mem[(6 * ceil32(return_data.size)) + 704] * ext_call.return_data[0] / stor17):
        revert with 'NH{q', 17
    mem[(2 * ceil32(return_data.size)) + 352] = (_3593 * ext_call.return_data[0] / stor17) + (mem[(6 * ceil32(return_data.size)) + 704] * ext_call.return_data[0] / stor17)
    mem[mem[64] + 4] = this.address
    require ext_code.size(stor5)
    staticcall stor5.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _3615 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    mem[(2 * ceil32(return_data.size)) + 384] = mem[_3615]
    if not missing_decimals:
        if mem[(2 * ceil32(return_data.size)) + 384] and 1 > -1 / mem[(2 * ceil32(return_data.size)) + 384]:
            revert with 'NH{q', 17
        mem[(2 * ceil32(return_data.size)) + 416] = mem[(2 * ceil32(return_data.size)) + 384]
        if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
            revert with 'NH{q', 50
        mem[(2 * ceil32(return_data.size)) + 448] = mem[(6 * ceil32(return_data.size)) + 736]
        if not missing_decimals:
            if mem[(6 * ceil32(return_data.size)) + 736] and 1 > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                revert with 'NH{q', 17
            mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736]
            if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                revert with 'NH{q', 17
            mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
            if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                revert with 'NH{q', 17
            mem[(2 * ceil32(return_data.size)) + 544] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
            if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                revert with 'NH{q', 50
            mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
            if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                revert with 'NH{q', 17
            if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !(mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]):
                revert with 'NH{q', 17
            mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
            mem[mem[64] + 4] = this.address
            require ext_code.size(sub_92e51617Address)
            staticcall sub_92e51617Address.0x3001f398 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4013 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4054 = mem[_4013]
            _4120 = mem[(2 * ceil32(return_data.size)) + 160]
            if mem[_4013] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_4013] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                revert with 'NH{q', 17
            if mem[_4013] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_4013] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 'NH{q', 17
            mem[mem[64] + 4] = this.address
            require ext_code.size(sub_92e51617Address)
            staticcall sub_92e51617Address.0x3906f181 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4826 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4957 = mem[_4826]
            _5060 = mem[(2 * ceil32(return_data.size)) + 320]
            if mem[_4826] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_4826] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                revert with 'NH{q', 17
            if mem[_4826] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_4826] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 'NH{q', 17
            if mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826]:
                revert with 'NH{q', 17
            if mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_4826] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not stor17:
                revert with 'NH{q', 18
            if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_4826] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                revert with 'NH{q', 17
            if _4120 - _4054 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_4826] * ext_call.return_data[0]) / stor17 > -_4120 + _4054 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 'NH{q', 17
            if _4120 - _4054 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_4826] * ext_call.return_data[0]) / stor17 < -_4120 + _4054 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                revert with 'NH{q', 17
            if not missing_decimals:
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x5242e71d with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6041 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                if mem[_6041] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6041] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_6041] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6041] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6041] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6041] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6041] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6041] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6041] > -_4120 + _4054 + -((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6041] < -_4120 + _4054 + -((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                mem[mem[64]] = _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_6041]
            else:
                if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x5242e71d with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6328 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_6328] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6328] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_6328] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6328] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6328] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                        revert with 'NH{q', 17
                    if _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6328] * 10^missing_decimals) > -_4120 + _4054 + -((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6328] * 10^missing_decimals) < -_4120 + _4054 + -((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    mem[mem[64]] = _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6328] * 10^missing_decimals)
                else:
                    s = 10
                    t = 1
                    idx = missing_decimals
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x5242e71d with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7147 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_7147] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7147] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7147] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7147] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7147] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                        revert with 'NH{q', 17
                    if _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7147] * s * t) > -_4120 + _4054 + -((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7147] * s * t) < -_4120 + _4054 + -((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    mem[mem[64]] = _4120 - _4054 + ((_5060 * ext_call.return_data[0]) - (_4957 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7147] * s * t)
        else:
            if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                if mem[(6 * ceil32(return_data.size)) + 736] and 10^missing_decimals > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals
                if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                if mem[(2 * ceil32(return_data.size)) + 384] > !(mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals):
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 544] = mem[(2 * ceil32(return_data.size)) + 384] + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !(mem[(2 * ceil32(return_data.size)) + 384] + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)):
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + mem[(2 * ceil32(return_data.size)) + 384] + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3001f398 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4174 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _4344 = mem[_4174]
                _4554 = mem[(2 * ceil32(return_data.size)) + 160]
                if mem[_4174] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_4174] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_4174] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_4174] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3906f181 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5094 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _5142 = mem[_5094]
                _5182 = mem[(2 * ceil32(return_data.size)) + 320]
                if mem[_5094] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_5094] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_5094] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_5094] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5094] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not stor17:
                    revert with 'NH{q', 18
                if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5094] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                    revert with 'NH{q', 17
                if _4554 - _4344 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5094] * ext_call.return_data[0]) / stor17 > -_4554 + _4344 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if _4554 - _4344 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5094] * ext_call.return_data[0]) / stor17 < -_4554 + _4344 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if not missing_decimals:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x5242e71d with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6327 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_6327] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6327] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_6327] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6327] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6327] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6327] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6327] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6327] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6327] > -_4554 + _4344 + -((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6327] < -_4554 + _4344 + -((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    mem[mem[64]] = _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_6327]
                else:
                    if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6696 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_6696] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6696] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_6696] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6696] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6696] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6696] * 10^missing_decimals) > -_4554 + _4344 + -((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6696] * 10^missing_decimals) < -_4554 + _4344 + -((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6696] * 10^missing_decimals)
                    else:
                        s = 10
                        t = 1
                        idx = missing_decimals
                        while idx > 1:
                            if s > -1 / s:
                                revert with 'NH{q', 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 'NH{q', 17
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7146 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7146] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7146] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7146] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7146] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7146] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7146] * s * t) > -_4554 + _4344 + -((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7146] * s * t) < -_4554 + _4344 + -((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _4554 - _4344 + ((_5182 * ext_call.return_data[0]) - (_5142 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7146] * s * t)
            else:
                s = 10
                t = 1
                idx = missing_decimals
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                if mem[(6 * ceil32(return_data.size)) + 736] and s * t > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736] * s * t
                if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                if mem[(2 * ceil32(return_data.size)) + 384] > !(mem[(6 * ceil32(return_data.size)) + 736] * s * t):
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 544] = mem[(2 * ceil32(return_data.size)) + 384] + (mem[(6 * ceil32(return_data.size)) + 736] * s * t)
                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !(mem[(2 * ceil32(return_data.size)) + 384] + (mem[(6 * ceil32(return_data.size)) + 736] * s * t)):
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + mem[(2 * ceil32(return_data.size)) + 384] + (mem[(6 * ceil32(return_data.size)) + 736] * s * t)
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3001f398 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7193 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _7202 = mem[_7193]
                _7212 = mem[(2 * ceil32(return_data.size)) + 160]
                if mem[_7193] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_7193] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_7193] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_7193] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3906f181 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7228 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _7232 = mem[_7228]
                _7236 = mem[(2 * ceil32(return_data.size)) + 320]
                if mem[_7228] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_7228] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_7228] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_7228] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7228] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not stor17:
                    revert with 'NH{q', 18
                if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7228] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                    revert with 'NH{q', 17
                if _7212 - _7202 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7228] * ext_call.return_data[0]) / stor17 > -_7212 + _7202 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if _7212 - _7202 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7228] * ext_call.return_data[0]) / stor17 < -_7212 + _7202 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if not missing_decimals:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x5242e71d with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7263 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_7263] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7263] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7263] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7263] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7263] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7263] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7263] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7263] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7263] > -_7212 + _7202 + -((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7263] < -_7212 + _7202 + -((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    mem[mem[64]] = _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_7263]
                else:
                    if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7273 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7273] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7273] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7273] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7273] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7273] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7273] * 10^missing_decimals) > -_7212 + _7202 + -((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7273] * 10^missing_decimals) < -_7212 + _7202 + -((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7273] * 10^missing_decimals)
                    else:
                        s = 10
                        t = 1
                        idx = missing_decimals
                        while idx > 1:
                            if s > -1 / s:
                                revert with 'NH{q', 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 'NH{q', 17
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7377 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7377] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7377] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7377] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7377] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7377] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7377] * s * t) > -_7212 + _7202 + -((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7377] * s * t) < -_7212 + _7202 + -((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _7212 - _7202 + ((_7236 * ext_call.return_data[0]) - (_7232 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7377] * s * t)
    else:
        if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
            if mem[(2 * ceil32(return_data.size)) + 384] and 10^missing_decimals > -1 / mem[(2 * ceil32(return_data.size)) + 384]:
                revert with 'NH{q', 17
            mem[(2 * ceil32(return_data.size)) + 416] = mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals
            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                revert with 'NH{q', 50
            mem[(2 * ceil32(return_data.size)) + 448] = mem[(6 * ceil32(return_data.size)) + 736]
            if not missing_decimals:
                if mem[(6 * ceil32(return_data.size)) + 736] and 1 > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736]
                if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                if mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals > !mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 544] = (mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + mem[(6 * ceil32(return_data.size)) + 736]
                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !((mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + mem[(6 * ceil32(return_data.size)) + 736]):
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + (mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + mem[(6 * ceil32(return_data.size)) + 736]
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3001f398 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4173 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _4342 = mem[_4173]
                _4552 = mem[(2 * ceil32(return_data.size)) + 160]
                if mem[_4173] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_4173] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_4173] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_4173] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3906f181 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5093 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _5140 = mem[_5093]
                _5180 = mem[(2 * ceil32(return_data.size)) + 320]
                if mem[_5093] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_5093] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_5093] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_5093] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5093] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not stor17:
                    revert with 'NH{q', 18
                if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5093] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                    revert with 'NH{q', 17
                if _4552 - _4342 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5093] * ext_call.return_data[0]) / stor17 > -_4552 + _4342 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if _4552 - _4342 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5093] * ext_call.return_data[0]) / stor17 < -_4552 + _4342 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if not missing_decimals:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x5242e71d with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6326 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_6326] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6326] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_6326] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6326] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6326] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6326] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6326] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6326] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6326] > -_4552 + _4342 + -((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6326] < -_4552 + _4342 + -((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    mem[mem[64]] = _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_6326]
                else:
                    if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6695 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_6695] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6695] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_6695] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6695] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6695] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6695] * 10^missing_decimals) > -_4552 + _4342 + -((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6695] * 10^missing_decimals) < -_4552 + _4342 + -((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6695] * 10^missing_decimals)
                    else:
                        s = 10
                        t = 1
                        idx = missing_decimals
                        while idx > 1:
                            if s > -1 / s:
                                revert with 'NH{q', 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 'NH{q', 17
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7145 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7145] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7145] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7145] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7145] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7145] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7145] * s * t) > -_4552 + _4342 + -((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7145] * s * t) < -_4552 + _4342 + -((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _4552 - _4342 + ((_5180 * ext_call.return_data[0]) - (_5140 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7145] * s * t)
            else:
                if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                    if mem[(6 * ceil32(return_data.size)) + 736] and 10^missing_decimals > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals
                    if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                    if mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals > !(mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 544] = (mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                    if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !((mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + (mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3001f398 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4653 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _4825 = mem[_4653]
                    _4954 = mem[(2 * ceil32(return_data.size)) + 160]
                    if mem[_4653] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_4653] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_4653] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_4653] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3906f181 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5208 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _5255 = mem[_5208]
                    _5289 = mem[(2 * ceil32(return_data.size)) + 320]
                    if mem[_5208] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_5208] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_5208] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_5208] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_5208] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not stor17:
                        revert with 'NH{q', 18
                    if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5208] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                        revert with 'NH{q', 17
                    if _4954 - _4825 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5208] * ext_call.return_data[0]) / stor17 > -_4954 + _4825 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _4954 - _4825 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_5208] * ext_call.return_data[0]) / stor17 < -_4954 + _4825 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if not missing_decimals:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6694 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_6694] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6694] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_6694] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6694] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6694] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6694] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_6694] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6694] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6694] > -_4954 + _4825 + -((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6694] < -_4954 + _4825 + -((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_6694]
                    else:
                        if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6926 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_6926] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_6926] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_6926] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_6926] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_6926] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6926] * 10^missing_decimals) > -_4954 + _4825 + -((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6926] * 10^missing_decimals) < -_4954 + _4825 + -((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_6926] * 10^missing_decimals)
                        else:
                            s = 10
                            t = 1
                            idx = missing_decimals
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 'NH{q', 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 'NH{q', 17
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7144 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_7144] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7144] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_7144] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7144] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7144] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7144] * s * t) > -_4954 + _4825 + -((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7144] * s * t) < -_4954 + _4825 + -((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _4954 - _4825 + ((_5289 * ext_call.return_data[0]) - (_5255 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7144] * s * t)
                else:
                    s = 10
                    t = 1
                    idx = missing_decimals
                    while idx > 1:
                        if s > -1 / s:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 'NH{q', 17
                    if mem[(6 * ceil32(return_data.size)) + 736] and s * t > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736] * s * t
                    if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                    if mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals > !(mem[(6 * ceil32(return_data.size)) + 736] * s * t):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 544] = (mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + (mem[(6 * ceil32(return_data.size)) + 736] * s * t)
                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                    if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !((mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + (mem[(6 * ceil32(return_data.size)) + 736] * s * t)):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + (mem[(2 * ceil32(return_data.size)) + 384] * 10^missing_decimals) + (mem[(6 * ceil32(return_data.size)) + 736] * s * t)
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3001f398 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7192 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7199 = mem[_7192]
                    _7211 = mem[(2 * ceil32(return_data.size)) + 160]
                    if mem[_7192] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_7192] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7192] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_7192] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3906f181 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7227 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7231 = mem[_7227]
                    _7235 = mem[(2 * ceil32(return_data.size)) + 320]
                    if mem[_7227] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_7227] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7227] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_7227] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7227] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not stor17:
                        revert with 'NH{q', 18
                    if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7227] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                        revert with 'NH{q', 17
                    if _7211 - _7199 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7227] * ext_call.return_data[0]) / stor17 > -_7211 + _7199 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _7211 - _7199 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7227] * ext_call.return_data[0]) / stor17 < -_7211 + _7199 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if not missing_decimals:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7262 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7262] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7262] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7262] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7262] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7262] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7262] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7262] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7262] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7262] > -_7211 + _7199 + -((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7262] < -_7211 + _7199 + -((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_7262]
                    else:
                        if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7272 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_7272] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7272] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_7272] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7272] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7272] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7272] * 10^missing_decimals) > -_7211 + _7199 + -((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7272] * 10^missing_decimals) < -_7211 + _7199 + -((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7272] * 10^missing_decimals)
                        else:
                            s = 10
                            t = 1
                            idx = missing_decimals
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 'NH{q', 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 'NH{q', 17
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7376 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_7376] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7376] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_7376] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7376] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7376] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7376] * s * t) > -_7211 + _7199 + -((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7376] * s * t) < -_7211 + _7199 + -((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _7211 - _7199 + ((_7235 * ext_call.return_data[0]) - (_7231 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7376] * s * t)
        else:
            s = 10
            t = 1
            idx = missing_decimals
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            if mem[(2 * ceil32(return_data.size)) + 384] and s * t > -1 / mem[(2 * ceil32(return_data.size)) + 384]:
                revert with 'NH{q', 17
            mem[(2 * ceil32(return_data.size)) + 416] = mem[(2 * ceil32(return_data.size)) + 384] * s * t
            if 2 >= mem[(6 * ceil32(return_data.size)) + 640]:
                revert with 'NH{q', 50
            mem[(2 * ceil32(return_data.size)) + 448] = mem[(6 * ceil32(return_data.size)) + 736]
            if not missing_decimals:
                if mem[(6 * ceil32(return_data.size)) + 736] and 1 > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736]
                if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                if mem[(2 * ceil32(return_data.size)) + 384] * s * t > !mem[(6 * ceil32(return_data.size)) + 736]:
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 544] = (mem[(2 * ceil32(return_data.size)) + 384] * s * t) + mem[(6 * ceil32(return_data.size)) + 736]
                if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                    revert with 'NH{q', 50
                mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !((mem[(2 * ceil32(return_data.size)) + 384] * s * t) + mem[(6 * ceil32(return_data.size)) + 736]):
                    revert with 'NH{q', 17
                mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + (mem[(2 * ceil32(return_data.size)) + 384] * s * t) + mem[(6 * ceil32(return_data.size)) + 736]
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3001f398 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7222 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _7226 = mem[_7222]
                _7230 = mem[(2 * ceil32(return_data.size)) + 160]
                if mem[_7222] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_7222] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_7222] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_7222] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                mem[mem[64] + 4] = this.address
                require ext_code.size(sub_92e51617Address)
                staticcall sub_92e51617Address.0x3906f181 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7244 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _7247 = mem[_7244]
                _7249 = mem[(2 * ceil32(return_data.size)) + 320]
                if mem[_7244] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_7244] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if mem[_7244] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_7244] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7244] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not stor17:
                    revert with 'NH{q', 18
                if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7244] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                    revert with 'NH{q', 17
                if _7230 - _7226 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7244] * ext_call.return_data[0]) / stor17 > -_7230 + _7226 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 'NH{q', 17
                if _7230 - _7226 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7244] * ext_call.return_data[0]) / stor17 < -_7230 + _7226 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                    revert with 'NH{q', 17
                if not missing_decimals:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x5242e71d with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7286 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_7286] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7286] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7286] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7286] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7286] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7286] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7286] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7286] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7286] > -_7230 + _7226 + -((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7286] < -_7230 + _7226 + -((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    mem[mem[64]] = _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_7286]
                else:
                    if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7298 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7298] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7298] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7298] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7298] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7298] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                            revert with 'NH{q', 17
                        if _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7298] * 10^missing_decimals) > -_7230 + _7226 + -((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7298] * 10^missing_decimals) < -_7230 + _7226 + -((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7298] * 10^missing_decimals)
                    else:
                        s = 10
                        t = 1
                        idx = missing_decimals
                        while idx > 1:
                            if s > -1 / s:
                                revert with 'NH{q', 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 'NH{q', 17
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7375 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7375] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7375] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7375] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7375] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375]:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                            revert with 'NH{q', 17
                        if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7375] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                            revert with 'NH{q', 17
                        if _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7375] * s * t) > -_7230 + _7226 + -((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7375] * s * t) < -_7230 + _7226 + -((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _7230 - _7226 + ((_7249 * ext_call.return_data[0]) - (_7247 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7375] * s * t)
            else:
                if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                    if mem[(6 * ceil32(return_data.size)) + 736] and 10^missing_decimals > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals
                    if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                    if mem[(2 * ceil32(return_data.size)) + 384] * s * t > !(mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 544] = (mem[(2 * ceil32(return_data.size)) + 384] * s * t) + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                    if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !((mem[(2 * ceil32(return_data.size)) + 384] * s * t) + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + (mem[(2 * ceil32(return_data.size)) + 384] * s * t) + (mem[(6 * ceil32(return_data.size)) + 736] * 10^missing_decimals)
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3001f398 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7233 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7238 = mem[_7233]
                    _7240 = mem[(2 * ceil32(return_data.size)) + 160]
                    if mem[_7233] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_7233] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7233] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_7233] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3906f181 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7250 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7253 = mem[_7250]
                    _7255 = mem[(2 * ceil32(return_data.size)) + 320]
                    if mem[_7250] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_7250] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7250] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_7250] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7250] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not stor17:
                        revert with 'NH{q', 18
                    if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7250] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                        revert with 'NH{q', 17
                    if _7240 - _7238 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7250] * ext_call.return_data[0]) / stor17 > -_7240 + _7238 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _7240 - _7238 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7250] * ext_call.return_data[0]) / stor17 < -_7240 + _7238 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if not missing_decimals:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7297 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7297] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7297] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7297] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7297] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7297] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7297] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7297] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7297] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7297] > -_7240 + _7238 + -((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7297] < -_7240 + _7238 + -((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_7297]
                    else:
                        if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7313 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_7313] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7313] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_7313] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7313] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7313] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7313] * 10^missing_decimals) > -_7240 + _7238 + -((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7313] * 10^missing_decimals) < -_7240 + _7238 + -((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7313] * 10^missing_decimals)
                        else:
                            s = 10
                            t = 1
                            idx = missing_decimals
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 'NH{q', 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 'NH{q', 17
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7374 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_7374] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7374] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_7374] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7374] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7374] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7374] * s * t) > -_7240 + _7238 + -((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7374] * s * t) < -_7240 + _7238 + -((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _7240 - _7238 + ((_7255 * ext_call.return_data[0]) - (_7253 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7374] * s * t)
                else:
                    u = 10
                    v = 1
                    idx = missing_decimals
                    while idx > 1:
                        if u > -1 / u:
                            revert with 'NH{q', 17
                        if not bool(idx):
                            u = u * u
                            v = v
                            idx = uint255(idx) * 0.5
                            continue 
                        u = u * u
                        v = u * v
                        idx = uint255(idx) * 0.5
                        continue 
                    if v > -1 / u:
                        revert with 'NH{q', 17
                    if mem[(6 * ceil32(return_data.size)) + 736] and u * v > -1 / mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 480] = mem[(6 * ceil32(return_data.size)) + 736] * u * v
                    if mem[(2 * ceil32(return_data.size)) + 384] > !mem[(6 * ceil32(return_data.size)) + 736]:
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 512] = mem[(2 * ceil32(return_data.size)) + 384] + mem[(6 * ceil32(return_data.size)) + 736]
                    if mem[(2 * ceil32(return_data.size)) + 384] * s * t > !(mem[(6 * ceil32(return_data.size)) + 736] * u * v):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 544] = (mem[(2 * ceil32(return_data.size)) + 384] * s * t) + (mem[(6 * ceil32(return_data.size)) + 736] * u * v)
                    if 3 >= mem[(6 * ceil32(return_data.size)) + 640]:
                        revert with 'NH{q', 50
                    mem[(2 * ceil32(return_data.size)) + 576] = mem[(6 * ceil32(return_data.size)) + 768]
                    if mem[(2 * ceil32(return_data.size)) + 160] > !mem[(2 * ceil32(return_data.size)) + 352]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] > !((mem[(2 * ceil32(return_data.size)) + 384] * s * t) + (mem[(6 * ceil32(return_data.size)) + 736] * u * v)):
                        revert with 'NH{q', 17
                    mem[(2 * ceil32(return_data.size)) + 608] = mem[(2 * ceil32(return_data.size)) + 160] + mem[(2 * ceil32(return_data.size)) + 352] + (mem[(2 * ceil32(return_data.size)) + 384] * s * t) + (mem[(6 * ceil32(return_data.size)) + 736] * u * v)
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3001f398 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7395 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7400 = mem[_7395]
                    _7405 = mem[(2 * ceil32(return_data.size)) + 160]
                    if mem[_7395] >= 0 and mem[(2 * ceil32(return_data.size)) + 160] < mem[_7395] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7395] < 0 and mem[(2 * ceil32(return_data.size)) + 160] > mem[_7395] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(sub_92e51617Address)
                    staticcall sub_92e51617Address.0x3906f181 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7408 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7409 = mem[_7408]
                    _7410 = mem[(2 * ceil32(return_data.size)) + 320]
                    if mem[_7408] >= 0 and mem[(2 * ceil32(return_data.size)) + 320] < mem[_7408] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if mem[_7408] < 0 and mem[(2 * ceil32(return_data.size)) + 320] > mem[_7408] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408] > 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408] > 0 and ext_call.return_data[0] < 0 and ext_call.return_data[0] < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408] < 0 and ext_call.return_data[0] > 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408] < 0x8000000000000000000000000000000000000000000000000000000000000000 / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408] < 0 and ext_call.return_data[0] < 0 and mem[(2 * ceil32(return_data.size)) + 320] - mem[_7408] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ext_call.return_data[0]:
                        revert with 'NH{q', 17
                    if not stor17:
                        revert with 'NH{q', 18
                    if (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7408] * ext_call.return_data[0]) == 0x8000000000000000000000000000000000000000000000000000000000000000 and stor17 == -1:
                        revert with 'NH{q', 17
                    if _7405 - _7400 >= 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7408] * ext_call.return_data[0]) / stor17 > -_7405 + _7400 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 'NH{q', 17
                    if _7405 - _7400 < 0 and (mem[(2 * ceil32(return_data.size)) + 320] * ext_call.return_data[0]) - (mem[_7408] * ext_call.return_data[0]) / stor17 < -_7405 + _7400 - 0x8000000000000000000000000000000000000000000000000000000000000000:
                        revert with 'NH{q', 17
                    if not missing_decimals:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_92e51617Address)
                        staticcall sub_92e51617Address.0x5242e71d with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7413 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_7413] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7413] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if mem[_7413] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7413] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7413] > 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7413] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if bool(mem[(2 * ceil32(return_data.size)) + 512] - mem[_7413] < 0) and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7413] < 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        if _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) >= 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7413] > -_7405 + _7400 + -((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 'NH{q', 17
                        if _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7413] < -_7405 + _7400 + -((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                            revert with 'NH{q', 17
                        mem[mem[64]] = _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) + mem[(2 * ceil32(return_data.size)) + 512] - mem[_7413]
                    else:
                        if bool(bool(missing_decimals < 78)) or bool(bool(missing_decimals < 32)):
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7418 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_7418] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7418] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_7418] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7418] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418] > 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418] > 0 and 10^missing_decimals < 0 and 10^missing_decimals < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418] < 0 and 10^missing_decimals > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418] < 0x8000000000000000000000000000000000000000000000000000000000000000 / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418] < 0 and 10^missing_decimals < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7418] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 10^missing_decimals:
                                revert with 'NH{q', 17
                            if _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7418] * 10^missing_decimals) > -_7405 + _7400 + -((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7418] * 10^missing_decimals) < -_7405 + _7400 + -((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * 10^missing_decimals) - (mem[_7418] * 10^missing_decimals)
                        else:
                            s = 10
                            t = 1
                            idx = missing_decimals
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 'NH{q', 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 'NH{q', 17
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(sub_92e51617Address)
                            staticcall sub_92e51617Address.0x5242e71d with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7434 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_7434] >= 0 and mem[(2 * ceil32(return_data.size)) + 512] < mem[_7434] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            if mem[_7434] < 0 and mem[(2 * ceil32(return_data.size)) + 512] > mem[_7434] + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434] > 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434] > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434] > 0 and s * t < 0 and s * t < 0x8000000000000000000000000000000000000000000000000000000000000000 / mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434]:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434] < 0 and s * t > 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434] < 0x8000000000000000000000000000000000000000000000000000000000000000 / s * t:
                                revert with 'NH{q', 17
                            if mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434] < 0 and s * t < 0 and mem[(2 * ceil32(return_data.size)) + 512] - mem[_7434] < 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / s * t:
                                revert with 'NH{q', 17
                            if _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) >= 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7434] * s * t) > -_7405 + _7400 + -((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 'NH{q', 17
                            if _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) < 0 and (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7434] * s * t) < -_7405 + _7400 + -((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                revert with 'NH{q', 17
                            mem[mem[64]] = _7405 - _7400 + ((_7410 * ext_call.return_data[0]) - (_7409 * ext_call.return_data[0]) / stor17) + (mem[(2 * ceil32(return_data.size)) + 512] * s * t) - (mem[_7434] * s * t)
    return memory
      from mem[64]
       len 32
}



}
