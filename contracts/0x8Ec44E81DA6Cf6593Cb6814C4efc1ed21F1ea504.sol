contract main {




// =====================  Runtime code  =====================


#
#  - sub_6191b74e(?)
#  - sub_77adfaac(?)
#  - sub_78190cc6(?)
#  - sub_873dfa44(?)
#  - sub_e8710232(?)
#
address stor0;
address stor1;
mapping of uint8 stor2;
uint64 stor3;
address WETHAddress;
mapping of struct stor4;
uint64 stor5;
address USDTAddress;
uint64 stor6;
address sub_a624cdbeAddress;
uint256 stor7;

function sub_a624cdbe(?) {
    return address(sub_a624cdbeAddress)
}

function WETH() {
    return address(WETHAddress)
}

function USDT() {
    return address(USDTAddress)
}

function _fallback() payable {
    revert
}

function addAdmin(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stor0 != msg.sender:
        if stor1 != msg.sender:
            revert with 0, 'Ownable: caller is not the owner'
    uint256(stor2[address(arg1)]) = not uint8(stor2[address(arg1)]) or Mask(248, 8, uint256(stor2[address(arg1)]))
}

function sub_329255e7(?) {
    require calldata.size - 4 >= 128
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    require arg4 == address(arg4)
    if stor0 != msg.sender:
        if stor1 != msg.sender:
            revert with 0, 'Ownable: caller is not the owner'
    address(WETHAddress) = address(arg2)
    address(USDTAddress) = address(arg3)
    address(sub_a624cdbeAddress) = address(arg4)
    stor7 = arg1
}

function sub_03880e6f(?) {
    require calldata.size - 4 >= 32
    mem[128] = stor4[arg1][3].field_0
    idx = 128
    s = 0
    while stor4[arg1][3].length + 96 > idx:
        mem[idx + 32] = stor4[arg1][s + 3].field_256
        idx = idx + 32
        s = s + 1
        continue 
    return stor4[arg1].field_0, 
           stor4[arg1].field_256,
           stor4[arg1].field_512,
           Array(len=stor4[arg1][3].length, data=mem[128 len ceil32(stor4[arg1][3].length)])
}

function sub_8eebd66d(?) payable {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg3 <= test266151307()
    require arg3 + 35 < calldata.size
    require arg3.length <= test266151307()
    require ceil32(arg3.length) + 128 >= 96 and ceil32(arg3.length) + 128 <= test266151307()
    require arg3 + arg3.length + 36 <= calldata.size
    mem[128 len arg3.length] = arg3[all]
    mem[arg3.length + 128] = 0
    if stor0 != msg.sender:
        if stor1 != msg.sender:
            revert with 0, 'Ownable: caller is not the owner'
    mem[ceil32(arg3.length) + 128 len ceil32(arg3.length)] = arg3[all], mem[arg3.length + 128 len ceil32(arg3.length) - arg3.length]
    if ceil32(arg3.length) > arg3.length:
        mem[arg3.length + ceil32(arg3.length) + 128] = 0
    call address(arg1) with:
       funct Mask(32, -(8 * ceil32(arg3.length) + -arg3.length + 4) + 256, 0) >> -(8 * ceil32(arg3.length) + -arg3.length + 4) + 256
       value arg2 wei
         gas gas_remaining wei
        args mem[ceil32(arg3.length) + 132 len arg3.length - 4]
}

function sub_035a6b83(?) {
    require calldata.size - 4 >= 128
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg4 <= test266151307()
    require arg4 + 35 < calldata.size
    require arg4.length <= test266151307()
    require ceil32(arg4.length) + 128 >= 96 and ceil32(arg4.length) + 128 <= test266151307()
    require arg4 + arg4.length + 36 <= calldata.size
    mem[128 len arg4.length] = arg4[all]
    mem[arg4.length + 128] = 0
    mem[ceil32(arg4.length) + 164] = address(arg1)
    mem[ceil32(arg4.length) + 128] = 36
    mem[ceil32(arg4.length) + 164 len 28] = address(arg1) << 64
    mem[ceil32(arg4.length) + 160 len 4] = unknown_0x70a08231(?????)
    mem[ceil32(arg4.length) + 196 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[arg4.length + 160 len -arg4.length + ceil32(arg4.length)])] = mem[ceil32(arg4.length) + 160 len ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[arg4.length + 160 len -arg4.length + ceil32(arg4.length)])]
    if ceil32(Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[arg4.length + 160 len -arg4.length + ceil32(arg4.length)]) > Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[arg4.length + 160 len -arg4.length + ceil32(arg4.length)]:
        mem[Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[arg4.length + 160 len -arg4.length + ceil32(arg4.length)] + ceil32(arg4.length) + 196] = 0
    call address(arg2).mem[ceil32(arg4.length) + 196 len 4] with:
         gas gas_remaining wei
        args mem[ceil32(arg4.length) + 200 len Mask(8 * -ceil32(arg4.length) + arg4.length + 32, 0, 0), mem[arg4.length + 160 len -arg4.length + ceil32(arg4.length)] - 4]
    if not return_data.size:
        if arg4.length != 0:
            require arg4.length >= 32
            if mem[128] > arg3:
    else:
        mem[ceil32(arg4.length) + 228 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if return_data.size != 0:
            require return_data.size >= 32
            if mem[ceil32(arg4.length) + 228] > arg3:
    revert with 0, 32, arg4.length, arg4[all], mem[arg4.length + 128 len ceil32(arg4.length) - arg4.length]
}

function getPair(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if address(WETHAddress) == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PancakeLibrary: IDENTICAL_ADDRESSES'
    if address(WETHAddress) < arg1:
        if not address(WETHAddress):
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        if address(USDTAddress) == arg1:
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if address(USDTAddress) < arg1:
            if not address(USDTAddress):
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            if address(sub_a624cdbeAddress) == arg1:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if address(sub_a624cdbeAddress) < arg1:
                if not address(sub_a624cdbeAddress):
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                return address(sha3(0, stor4[arg2].field_0, sha3(address(WETHAddress), arg1), stor4[arg2].field_512)), 
                       address(sha3(0, stor4[arg2].field_0, sha3(address(USDTAddress), arg1), stor4[arg2].field_512)),
                       address(sha3(0, stor4[arg2].field_0, sha3(address(sub_a624cdbeAddress), arg1), stor4[arg2].field_512))
            if not arg1:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            return address(sha3(0, stor4[arg2].field_0, sha3(address(WETHAddress), arg1), stor4[arg2].field_512)), 
                   address(sha3(0, stor4[arg2].field_0, sha3(address(USDTAddress), arg1), stor4[arg2].field_512)),
                   address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor6)), stor4[arg2].field_512))
        if not arg1:
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        if address(sub_a624cdbeAddress) == arg1:
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if address(sub_a624cdbeAddress) < arg1:
            if not address(sub_a624cdbeAddress):
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            return address(sha3(0, stor4[arg2].field_0, sha3(address(WETHAddress), arg1), stor4[arg2].field_512)), 
                   address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor5)), stor4[arg2].field_512)),
                   address(sha3(0, stor4[arg2].field_0, sha3(address(sub_a624cdbeAddress), arg1), stor4[arg2].field_512))
        if not arg1:
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        return address(sha3(0, stor4[arg2].field_0, sha3(address(WETHAddress), arg1), stor4[arg2].field_512)), 
               address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor5)), stor4[arg2].field_512)),
               address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor6)), stor4[arg2].field_512))
    if not arg1:
        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
    if address(USDTAddress) == arg1:
        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
    if address(USDTAddress) < arg1:
        if not address(USDTAddress):
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        if address(sub_a624cdbeAddress) == arg1:
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if address(sub_a624cdbeAddress) < arg1:
            if not address(sub_a624cdbeAddress):
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            return address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor3)), stor4[arg2].field_512)), 
                   address(sha3(0, stor4[arg2].field_0, sha3(address(USDTAddress), arg1), stor4[arg2].field_512)),
                   address(sha3(0, stor4[arg2].field_0, sha3(address(sub_a624cdbeAddress), arg1), stor4[arg2].field_512))
        if not arg1:
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        return address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor3)), stor4[arg2].field_512)), 
               address(sha3(0, stor4[arg2].field_0, sha3(address(USDTAddress), arg1), stor4[arg2].field_512)),
               address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor6)), stor4[arg2].field_512))
    if not arg1:
        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
    if address(sub_a624cdbeAddress) == arg1:
        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
    if address(sub_a624cdbeAddress) < arg1:
        if not address(sub_a624cdbeAddress):
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        return address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor3)), stor4[arg2].field_512)), 
               address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor5)), stor4[arg2].field_512)),
               address(sha3(0, stor4[arg2].field_0, sha3(address(sub_a624cdbeAddress), arg1), stor4[arg2].field_512))
    if not arg1:
        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
    return address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor3)), stor4[arg2].field_512)), 
           address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor5)), stor4[arg2].field_512)),
           address(sha3(0, stor4[arg2].field_0, sha3(arg1, uint64(stor6)), stor4[arg2].field_512))
}

function sub_04d780cc(?) payable {
    require calldata.size - 4 >= 128
    require cd[4] == address(cd[4])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    require ('cd', 68).length <= test266151307()
    require (32 * ('cd', 68).length) + 128 >= 96 and (32 * ('cd', 68).length) + 128 <= test266151307()
    mem[64] = (32 * ('cd', 68).length) + 128
    mem[96] = ('cd', 68).length
    idx = 0
    s = cd[68] + 36
    t = 128
    while idx < ('cd', 68).length:
        require cd[68] + cd[s] + 67 < calldata.size
        require cd[(cd[68] + cd[s] + 36)] <= test266151307()
        _42 = mem[64]
        require mem[64] + ceil32(cd[(cd[68] + cd[s] + 36)]) + 32 >= mem[64] and mem[64] + ceil32(cd[(cd[68] + cd[s] + 36)]) + 32 <= test266151307()
        mem[64] = mem[64] + ceil32(cd[(cd[68] + cd[s] + 36)]) + 32
        mem[_42] = cd[(cd[68] + cd[s] + 36)]
        require cd[68] + cd[s] + cd[(cd[68] + cd[s] + 36)] + 68 <= calldata.size
        mem[_42 + 32 len cd[(cd[68] + cd[s] + 36)]] = call.data[cd[68] + cd[s] + 68 len cd[(cd[68] + cd[s] + 36)]]
        mem[_42 + cd[(cd[68] + cd[s] + 36)] + 32] = 0
        mem[t] = _42
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    if msg.sender == stor0:
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(WETHAddress))
        staticcall address(WETHAddress).0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _48 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _50 = mem[_48]
        _80 = mem[96]
        idx = 0
        while idx < _80:
            require idx < mem[96]
            _86 = mem[(32 * idx) + 128]
            _87 = mem[64]
            _91 = mem[mem[(32 * idx) + 128]]
            s = 0
            while s < _91:
                mem[s + _87] = mem[s + _86 + 32]
                _80 = mem[96]
                s = s + 32
                continue 
            if ceil32(_91) <= _91:
                call address(cd[4]).mem[mem[64] len 4] with:
                   value cd[36] wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _91 + _87 + -mem[64] - 4]
                if return_data.size:
                    _114 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_114] = return_data.size
                    mem[_114 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
            else:
                mem[_91 + _87] = 0
                call address(cd[4]).mem[mem[64] len 4] with:
                   value cd[36] wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _91 + _87 + -mem[64] - 4]
                if return_data.size:
                    _115 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_115] = return_data.size
                    mem[_115 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
            _80 = mem[96]
            idx = idx + 1
            continue 
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(WETHAddress))
        staticcall address(WETHAddress).0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _94 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_94] > _50 + cd[100]
    else:
        if stor1 != msg.sender:
            revert with 0, 'Ownable: caller is not the owner'
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(WETHAddress))
        staticcall address(WETHAddress).0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _49 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _51 = mem[_49]
        _81 = mem[96]
        idx = 0
        while idx < _81:
            require idx < mem[96]
            _88 = mem[(32 * idx) + 128]
            _89 = mem[64]
            _93 = mem[mem[(32 * idx) + 128]]
            s = 0
            while s < _93:
                mem[s + _89] = mem[s + _88 + 32]
                _81 = mem[96]
                s = s + 32
                continue 
            if ceil32(_93) <= _93:
                call address(cd[4]).mem[mem[64] len 4] with:
                   value cd[36] wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _93 + _89 + -mem[64] - 4]
                if return_data.size:
                    _116 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_116] = return_data.size
                    mem[_116 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
            else:
                mem[_93 + _89] = 0
                call address(cd[4]).mem[mem[64] len 4] with:
                   value cd[36] wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _93 + _89 + -mem[64] - 4]
                if return_data.size:
                    _117 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_117] = return_data.size
                    mem[_117 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
            _81 = mem[96]
            idx = idx + 1
            continue 
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(WETHAddress))
        staticcall address(WETHAddress).0x70a08231 with:
                gas gas_remaining wei
               args address(this.address)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _95 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_95] > _51 + cd[100]
}

function sub_b6eacc9d(?) {
    require calldata.size - 4 >= 96
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    require arg2.length <= test266151307()
    require arg2 + (32 * arg2.length) + 36 <= calldata.size
    mem[96] = arg2.length
    mem[128 len 32 * arg2.length] = call.data[arg2 + 36 len 32 * arg2.length]
    mem[0] = arg3
    mem[32] = 4
    if arg2.length < 2:
        revert with 0, 'PancakeLibrary: INVALID_PATH'
    require arg2.length <= test266151307()
    mem[(32 * arg2.length) + 128] = arg2.length
    mem[64] = (64 * arg2.length) + 160
    if not arg2.length:
        require 0 < arg2.length
        mem[(32 * arg2.length) + 160] = arg1
        idx = 0
        while idx < arg2.length - 1:
            require idx < mem[96]
            _1492 = mem[(32 * idx) + 128]
            require idx + 1 < mem[96]
            _1496 = mem[(32 * idx + 1) + 128]
            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                if not mem[(32 * idx) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                    if not mem[(32 * idx) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _1534 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                    mem[mem[64] + 52] = address(_1496)
                    _1550 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _1552 = sha3(mem[_1550 + 32 len mem[_1550]])
                    mem[_1534 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1534 + 105] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1534 + 125] = _1552
                    mem[_1534 + 157] = stor4[arg3].field_512
                    mem[_1534 + 72] = 85
                    if address(_1492) == address(_1496):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_1492) < address(_1496):
                        if not address(_1492):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1534 + 221] = address(_1492)
                        mem[_1534 + 241] = address(_1496)
                        mem[_1534 + 189] = 40
                        mem[_1534 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1534 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1534 + 314] = sha3(address(_1492), address(_1496))
                        mem[_1534 + 346] = stor4[arg3].field_512
                        mem[_1534 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_1496):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1534 + 221] = address(_1496)
                        mem[_1534 + 241] = address(_1492)
                        mem[_1534 + 189] = 40
                        mem[_1534 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1534 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1534 + 314] = sha3(address(_1496), address(_1492))
                        mem[_1534 + 346] = stor4[arg3].field_512
                        mem[_1534 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_1534 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _1534 + ceil32(return_data.size) + 378
                else:
                    if not mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _1535 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                    mem[mem[64] + 52] = address(_1492)
                    _1554 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _1556 = sha3(mem[_1554 + 32 len mem[_1554]])
                    mem[_1535 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1535 + 105] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1535 + 125] = _1556
                    mem[_1535 + 157] = stor4[arg3].field_512
                    mem[_1535 + 72] = 85
                    if address(_1492) == address(_1496):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_1492) < address(_1496):
                        if not address(_1492):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1535 + 221] = address(_1492)
                        mem[_1535 + 241] = address(_1496)
                        mem[_1535 + 189] = 40
                        mem[_1535 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1535 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1535 + 314] = sha3(address(_1492), address(_1496))
                        mem[_1535 + 346] = stor4[arg3].field_512
                        mem[_1535 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_1496):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1535 + 221] = address(_1496)
                        mem[_1535 + 241] = address(_1492)
                        mem[_1535 + 189] = 40
                        mem[_1535 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1535 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1535 + 314] = sha3(address(_1496), address(_1492))
                        mem[_1535 + 346] = stor4[arg3].field_512
                        mem[_1535 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_1535 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _1535 + ceil32(return_data.size) + 378
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require idx < mem[(32 * arg2.length) + 128]
                if mem[(32 * idx) + (32 * arg2.length) + 160] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
                if address(_1492) == address(_1492):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[arg3].field_256:
                        if ext_call.return_data[50 len 14]:
                            require ext_call.return_data[50 len 14]
                            if 0 / ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[18 len 14]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                    else:
                        require stor4[arg3].field_256
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[50 len 14]:
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        else:
                            require ext_call.return_data[50 len 14]
                            if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                else:
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[arg3].field_256:
                        if ext_call.return_data[18 len 14]:
                            require ext_call.return_data[18 len 14]
                            if 0 / ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[50 len 14]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                    else:
                        require stor4[arg3].field_256
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[18 len 14]:
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        else:
                            require ext_call.return_data[18 len 14]
                            if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
            else:
                if not mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                    if not mem[(32 * idx) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _1536 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                    mem[mem[64] + 52] = address(_1496)
                    _1558 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _1560 = sha3(mem[_1558 + 32 len mem[_1558]])
                    mem[_1536 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1536 + 105] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1536 + 125] = _1560
                    mem[_1536 + 157] = stor4[arg3].field_512
                    mem[_1536 + 72] = 85
                    if address(_1492) == address(_1496):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_1492) < address(_1496):
                        if not address(_1492):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1536 + 221] = address(_1492)
                        mem[_1536 + 241] = address(_1496)
                        mem[_1536 + 189] = 40
                        mem[_1536 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1536 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1536 + 314] = sha3(address(_1492), address(_1496))
                        mem[_1536 + 346] = stor4[arg3].field_512
                        mem[_1536 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_1496):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1536 + 221] = address(_1496)
                        mem[_1536 + 241] = address(_1492)
                        mem[_1536 + 189] = 40
                        mem[_1536 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1536 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1536 + 314] = sha3(address(_1496), address(_1492))
                        mem[_1536 + 346] = stor4[arg3].field_512
                        mem[_1536 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_1536 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _1536 + ceil32(return_data.size) + 378
                else:
                    if not mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _1537 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                    mem[mem[64] + 52] = address(_1492)
                    _1562 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _1564 = sha3(mem[_1562 + 32 len mem[_1562]])
                    mem[_1537 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1537 + 105] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1537 + 125] = _1564
                    mem[_1537 + 157] = stor4[arg3].field_512
                    mem[_1537 + 72] = 85
                    if address(_1492) == address(_1496):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_1492) < address(_1496):
                        if not address(_1492):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1537 + 221] = address(_1492)
                        mem[_1537 + 241] = address(_1496)
                        mem[_1537 + 189] = 40
                        mem[_1537 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1537 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1537 + 314] = sha3(address(_1492), address(_1496))
                        mem[_1537 + 346] = stor4[arg3].field_512
                        mem[_1537 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1492), address(_1496)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_1496):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_1537 + 221] = address(_1496)
                        mem[_1537 + 241] = address(_1492)
                        mem[_1537 + 189] = 40
                        mem[_1537 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_1537 + 294] = Mask(160, 96, stor4[arg3].field_0)
                        mem[_1537 + 314] = sha3(address(_1496), address(_1492))
                        mem[_1537 + 346] = stor4[arg3].field_512
                        mem[_1537 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)))
                        staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1496), address(_1492)), stor4[arg3].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_1537 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _1537 + ceil32(return_data.size) + 378
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require idx < mem[(32 * arg2.length) + 128]
                if mem[(32 * idx) + (32 * arg2.length) + 160] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
                if address(_1492) == address(_1496):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[arg3].field_256:
                        if ext_call.return_data[50 len 14]:
                            require ext_call.return_data[50 len 14]
                            if 0 / ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[18 len 14]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                    else:
                        require stor4[arg3].field_256
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[50 len 14]:
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        else:
                            require ext_call.return_data[50 len 14]
                            if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                else:
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[arg3].field_256:
                        if ext_call.return_data[18 len 14]:
                            require ext_call.return_data[18 len 14]
                            if 0 / ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[50 len 14]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                    else:
                        require stor4[arg3].field_256
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[18 len 14]:
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        else:
                            require ext_call.return_data[18 len 14]
                            if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                            require idx + 1 < mem[(32 * arg2.length) + 128]
                            mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
            idx = idx + 1
            continue 
        mem[mem[64]] = 32
        _1500 = mem[(32 * arg2.length) + 128]
        mem[mem[64] + 32] = mem[(32 * arg2.length) + 128]
        mem[mem[64] + 64 len 32 * _1500] = mem[(32 * arg2.length) + 160 len 32 * _1500]
        return 32, mem[mem[64] + 32 len (32 * _1500) + 32]
    mem[(32 * arg2.length) + 160 len 32 * arg2.length] = call.data[calldata.size len 32 * arg2.length]
    require 0 < arg2.length
    mem[(32 * arg2.length) + 160] = arg1
    idx = 0
    while idx < arg2.length - 1:
        require idx < mem[96]
        _1494 = mem[(32 * idx) + 128]
        require idx + 1 < mem[96]
        _1497 = mem[(32 * idx + 1) + 128]
        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
            if not mem[(32 * idx) + 140 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                if not mem[(32 * idx) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _1538 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                mem[mem[64] + 52] = address(_1497)
                _1566 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _1568 = sha3(mem[_1566 + 32 len mem[_1566]])
                mem[_1538 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_1538 + 105] = Mask(160, 96, stor4[arg3].field_0)
                mem[_1538 + 125] = _1568
                mem[_1538 + 157] = stor4[arg3].field_512
                mem[_1538 + 72] = 85
                if address(_1494) == address(_1497):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_1494) < address(_1497):
                    if not address(_1494):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1538 + 221] = address(_1494)
                    mem[_1538 + 241] = address(_1497)
                    mem[_1538 + 189] = 40
                    mem[_1538 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1538 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1538 + 314] = sha3(address(_1494), address(_1497))
                    mem[_1538 + 346] = stor4[arg3].field_512
                    mem[_1538 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_1497):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1538 + 221] = address(_1497)
                    mem[_1538 + 241] = address(_1494)
                    mem[_1538 + 189] = 40
                    mem[_1538 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1538 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1538 + 314] = sha3(address(_1497), address(_1494))
                    mem[_1538 + 346] = stor4[arg3].field_512
                    mem[_1538 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_1538 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _1538 + ceil32(return_data.size) + 378
            else:
                if not mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _1539 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                mem[mem[64] + 52] = address(_1494)
                _1570 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _1572 = sha3(mem[_1570 + 32 len mem[_1570]])
                mem[_1539 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_1539 + 105] = Mask(160, 96, stor4[arg3].field_0)
                mem[_1539 + 125] = _1572
                mem[_1539 + 157] = stor4[arg3].field_512
                mem[_1539 + 72] = 85
                if address(_1494) == address(_1497):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_1494) < address(_1497):
                    if not address(_1494):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1539 + 221] = address(_1494)
                    mem[_1539 + 241] = address(_1497)
                    mem[_1539 + 189] = 40
                    mem[_1539 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1539 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1539 + 314] = sha3(address(_1494), address(_1497))
                    mem[_1539 + 346] = stor4[arg3].field_512
                    mem[_1539 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_1497):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1539 + 221] = address(_1497)
                    mem[_1539 + 241] = address(_1494)
                    mem[_1539 + 189] = 40
                    mem[_1539 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1539 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1539 + 314] = sha3(address(_1497), address(_1494))
                    mem[_1539 + 346] = stor4[arg3].field_512
                    mem[_1539 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_1539 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _1539 + ceil32(return_data.size) + 378
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require idx < mem[(32 * arg2.length) + 128]
            if mem[(32 * idx) + (32 * arg2.length) + 160] <= 0:
                revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
            if address(_1494) == address(_1494):
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[arg3].field_256:
                    if ext_call.return_data[50 len 14]:
                        require ext_call.return_data[50 len 14]
                        if 0 / ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[18 len 14]
                    require idx + 1 < mem[(32 * arg2.length) + 128]
                    mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                else:
                    require stor4[arg3].field_256
                    if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[50 len 14]:
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                    else:
                        require ext_call.return_data[50 len 14]
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
            else:
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[arg3].field_256:
                    if ext_call.return_data[18 len 14]:
                        require ext_call.return_data[18 len 14]
                        if 0 / ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[50 len 14]
                    require idx + 1 < mem[(32 * arg2.length) + 128]
                    mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                else:
                    require stor4[arg3].field_256
                    if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[18 len 14]:
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                    else:
                        require ext_call.return_data[18 len 14]
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
        else:
            if not mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                if not mem[(32 * idx) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _1540 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                mem[mem[64] + 52] = address(_1497)
                _1574 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _1576 = sha3(mem[_1574 + 32 len mem[_1574]])
                mem[_1540 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_1540 + 105] = Mask(160, 96, stor4[arg3].field_0)
                mem[_1540 + 125] = _1576
                mem[_1540 + 157] = stor4[arg3].field_512
                mem[_1540 + 72] = 85
                if address(_1494) == address(_1497):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_1494) < address(_1497):
                    if not address(_1494):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1540 + 221] = address(_1494)
                    mem[_1540 + 241] = address(_1497)
                    mem[_1540 + 189] = 40
                    mem[_1540 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1540 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1540 + 314] = sha3(address(_1494), address(_1497))
                    mem[_1540 + 346] = stor4[arg3].field_512
                    mem[_1540 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_1497):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1540 + 221] = address(_1497)
                    mem[_1540 + 241] = address(_1494)
                    mem[_1540 + 189] = 40
                    mem[_1540 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1540 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1540 + 314] = sha3(address(_1497), address(_1494))
                    mem[_1540 + 346] = stor4[arg3].field_512
                    mem[_1540 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_1540 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _1540 + ceil32(return_data.size) + 378
            else:
                if not mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _1541 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                mem[mem[64] + 52] = address(_1494)
                _1578 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _1580 = sha3(mem[_1578 + 32 len mem[_1578]])
                mem[_1541 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_1541 + 105] = Mask(160, 96, stor4[arg3].field_0)
                mem[_1541 + 125] = _1580
                mem[_1541 + 157] = stor4[arg3].field_512
                mem[_1541 + 72] = 85
                if address(_1494) == address(_1497):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_1494) < address(_1497):
                    if not address(_1494):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1541 + 221] = address(_1494)
                    mem[_1541 + 241] = address(_1497)
                    mem[_1541 + 189] = 40
                    mem[_1541 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1541 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1541 + 314] = sha3(address(_1494), address(_1497))
                    mem[_1541 + 346] = stor4[arg3].field_512
                    mem[_1541 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1494), address(_1497)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_1497):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_1541 + 221] = address(_1497)
                    mem[_1541 + 241] = address(_1494)
                    mem[_1541 + 189] = 40
                    mem[_1541 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_1541 + 294] = Mask(160, 96, stor4[arg3].field_0)
                    mem[_1541 + 314] = sha3(address(_1497), address(_1494))
                    mem[_1541 + 346] = stor4[arg3].field_512
                    mem[_1541 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)))
                    staticcall address(sha3(0, stor4[arg3].field_0, sha3(address(_1497), address(_1494)), stor4[arg3].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_1541 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _1541 + ceil32(return_data.size) + 378
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require idx < mem[(32 * arg2.length) + 128]
            if mem[(32 * idx) + (32 * arg2.length) + 160] <= 0:
                revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
            if address(_1494) == address(_1497):
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[arg3].field_256:
                    if ext_call.return_data[50 len 14]:
                        require ext_call.return_data[50 len 14]
                        if 0 / ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[18 len 14]
                    require idx + 1 < mem[(32 * arg2.length) + 128]
                    mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                else:
                    require stor4[arg3].field_256
                    if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[50 len 14]:
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                    else:
                        require ext_call.return_data[50 len 14]
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
            else:
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[arg3].field_256:
                    if ext_call.return_data[18 len 14]:
                        require ext_call.return_data[18 len 14]
                        if 0 / ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[50 len 14]
                    require idx + 1 < mem[(32 * arg2.length) + 128]
                    mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                else:
                    require stor4[arg3].field_256
                    if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 / stor4[arg3].field_256 != mem[(32 * idx) + (32 * arg2.length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[18 len 14]:
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                    else:
                        require ext_call.return_data[18 len 14]
                        if mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * arg2.length) + 160] * stor4[arg3].field_256)
        idx = idx + 1
        continue 
    mem[mem[64]] = 32
    _1502 = mem[(32 * arg2.length) + 128]
    mem[mem[64] + 32] = mem[(32 * arg2.length) + 128]
    mem[mem[64] + 64 len 32 * _1502] = mem[(32 * arg2.length) + 160 len 32 * _1502]
    return 32, mem[mem[64] + 32 len (32 * _1502) + 32]
}

function sub_8e2814f4(?) {
    require calldata.size - 4 >= 160
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    require ('cd', 36).length <= test266151307()
    require (32 * ('cd', 36).length) + 128 >= 96 and (32 * ('cd', 36).length) + 128 <= test266151307()
    mem[96] = ('cd', 36).length
    require calldata.size >= cd[36] + (32 * ('cd', 36).length) + 36
    idx = 0
    s = cd[36] + 36
    t = 128
    while idx < ('cd', 36).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    require ('cd', 68).length <= test266151307()
    require (32 * ('cd', 68).length) + 160 >= 128 and (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160 <= test266151307()
    mem[(32 * ('cd', 36).length) + 128] = ('cd', 68).length
    require calldata.size >= cd[68] + (32 * ('cd', 68).length) + 36
    idx = 0
    s = cd[68] + 36
    t = (32 * ('cd', 36).length) + 160
    while idx < ('cd', 68).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    require ('cd', 100).length <= test266151307()
    require (32 * ('cd', 100).length) + 192 >= 160 and (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 <= test266151307()
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] = ('cd', 100).length
    require calldata.size >= cd[100] + (32 * ('cd', 100).length) + 36
    idx = 0
    s = cd[100] + 36
    t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
    while idx < ('cd', 100).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 196] = cd[4]
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 228] = 96
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 292] = ('cd', 36).length
    idx = 0
    s = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 324
    t = 128
    while idx < ('cd', 36).length:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 260] = cd[132]
    require ext_code.size(this.address)
    staticcall this.address.0xb6eacc9d with:
            gas gas_remaining wei
           args cd[4], Array(len=('cd', 36).length, data=mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 324 len 32 * ('cd', 36).length]), cd[132]
    if not ext_call.success:
        require ('cd', 36).length <= test266151307()
        mem[64] = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224
        if not ('cd', 36).length:
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 228] = cd[4]
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 260] = 96
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 324] = ('cd', 68).length
            idx = 0
            s = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 356
            t = (32 * ('cd', 36).length) + 160
            while idx < mem[(32 * ('cd', 36).length) + 128]:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 292] = cd[132]
            require ext_code.size(this.address)
            staticcall this.address.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (64 * ('cd', 36).length) + (64 * ('cd', 68).length) + (32 * ('cd', 100).length) + -mem[64] + 352]
            if not ext_call.success:
                _7477 = mem[(32 * ('cd', 36).length) + 128]
                require mem[(32 * ('cd', 36).length) + 128] <= test266151307()
                _7479 = mem[64]
                mem[64] = mem[64] + (32 * mem[(32 * ('cd', 36).length) + 128]) + 32
                if not mem[(32 * ('cd', 36).length) + 128]:
                    mem[_7479 + (32 * mem[(32 * ('cd', 36).length) + 128]) + 32] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
                    mem[_7479 + (32 * _7477) + 36] = cd[4]
                    mem[_7479 + (32 * _7477) + 68] = 96
                    _7490 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                    mem[_7479 + (32 * _7477) + 132] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                    idx = 0
                    s = _7479 + (32 * _7477) + 164
                    t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
                    while idx < _7490:
                        mem[s] = mem[t + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    mem[_7479 + (32 * _7477) + 100] = cd[132]
                    require ext_code.size(this.address)
                    staticcall this.address.mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _7479 + (32 * _7477) + (32 * _7490) + -mem[64] + 160]
                    if not ext_call.success:
                        _8966 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
                        _8971 = mem[64]
                        mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                        mem[64] = mem[64] + (32 * _8966) + 32
                        if not _8966:
                            require mem[_7479] - 1 < mem[_7479]
                            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            require mem[_8971] - 1 < mem[_8971]
                            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7479] - 1) + _7479 + 32]:
                                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8971 + (32 * _8966) + 32] = 128
                                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8971] - 1) + _8971 + 32]:
                                    _9251 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                    mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                    mem[_8971 + (32 * _8966) + 192 len 32 * _9251] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9251]
                                    mem[_8971 + (32 * _8966) + 64] = (32 * _9251) + 160
                                    _10446 = mem[_7479]
                                    mem[_8971 + (32 * _8966) + (32 * _9251) + 192] = mem[_7479]
                                    mem[_8971 + (32 * _8966) + (32 * _9251) + 224 len 32 * _10446] = mem[_7479 + 32 len 32 * _10446]
                                    mem[_8971 + (32 * _8966) + 96] = (32 * _9251) + (32 * _10446) + 192
                                    mem[_8971 + (32 * _8966) + (32 * _9251) + (32 * _10446) + 224] = mem[_8971]
                                    mem[_8971 + (32 * _8966) + (32 * _9251) + (32 * _10446) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                                    mem[_8971 + (32 * _8966) + 128] = 1
                                    return memory
                                      from mem[64]
                                       len _8971 + (32 * _8966) + (32 * _9251) + (32 * _10446) + (32 * mem[_8971]) + -mem[64] + 256
                                _9252 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8971 + (32 * _8966) + 192 len 32 * _9252] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9252]
                                mem[_8971 + (32 * _8966) + 64] = (32 * _9252) + 160
                                _10447 = mem[_7479]
                                mem[_8971 + (32 * _8966) + (32 * _9252) + 192] = mem[_7479]
                                mem[_8971 + (32 * _8966) + (32 * _9252) + 224 len 32 * _10447] = mem[_7479 + 32 len 32 * _10447]
                                mem[_8971 + (32 * _8966) + 96] = (32 * _9252) + (32 * _10447) + 192
                                mem[_8971 + (32 * _8966) + (32 * _9252) + (32 * _10447) + 224] = mem[_8971]
                                mem[_8971 + (32 * _8966) + (32 * _9252) + (32 * _10447) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                                mem[_8971 + (32 * _8966) + 128] = 3
                                return memory
                                  from mem[64]
                                   len _8971 + (32 * _8966) + (32 * _9252) + (32 * _10447) + (32 * mem[_8971]) + -mem[64] + 256
                            require mem[_7479] - 1 < mem[_7479]
                            mem[_8971 + (32 * _8966) + 32] = 128
                            if mem[(32 * mem[_7479] - 1) + _7479 + 32] >= mem[(32 * mem[_8971] - 1) + _8971 + 32]:
                                _9253 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8971 + (32 * _8966) + 192 len 32 * _9253] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9253]
                                mem[_8971 + (32 * _8966) + 64] = (32 * _9253) + 160
                                _10448 = mem[_7479]
                                mem[_8971 + (32 * _8966) + (32 * _9253) + 192] = mem[_7479]
                                mem[_8971 + (32 * _8966) + (32 * _9253) + 224 len 32 * _10448] = mem[_7479 + 32 len 32 * _10448]
                                mem[_8971 + (32 * _8966) + 96] = (32 * _9253) + (32 * _10448) + 192
                                mem[_8971 + (32 * _8966) + (32 * _9253) + (32 * _10448) + 224] = mem[_8971]
                                mem[_8971 + (32 * _8966) + (32 * _9253) + (32 * _10448) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                                mem[_8971 + (32 * _8966) + 128] = 2
                                return memory
                                  from mem[64]
                                   len _8971 + (32 * _8966) + (32 * _9253) + (32 * _10448) + (32 * mem[_8971]) + -mem[64] + 256
                            _9254 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8971 + (32 * _8966) + 192 len 32 * _9254] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9254]
                            mem[_8971 + (32 * _8966) + 64] = (32 * _9254) + 160
                            _10449 = mem[_7479]
                            mem[_8971 + (32 * _8966) + (32 * _9254) + 192] = mem[_7479]
                            mem[_8971 + (32 * _8966) + (32 * _9254) + 224 len 32 * _10449] = mem[_7479 + 32 len 32 * _10449]
                            mem[_8971 + (32 * _8966) + 96] = (32 * _9254) + (32 * _10449) + 192
                            mem[_8971 + (32 * _8966) + (32 * _9254) + (32 * _10449) + 224] = mem[_8971]
                            mem[_8971 + (32 * _8966) + (32 * _9254) + (32 * _10449) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                            mem[_8971 + (32 * _8966) + 128] = 3
                            return memory
                              from mem[64]
                               len _8971 + (32 * _8966) + (32 * _9254) + (32 * _10449) + (32 * mem[_8971]) + -mem[64] + 256
                        mem[_8971 + 32 len 32 * _8966] = call.data[calldata.size len 32 * _8966]
                        require mem[_7479] - 1 < mem[_7479]
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        require mem[_8971] - 1 < mem[_8971]
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7479] - 1) + _7479 + 32]:
                            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8971 + (32 * _8966) + 32] = 128
                            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8971] - 1) + _8971 + 32]:
                                _9297 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8971 + (32 * _8966) + 192 len 32 * _9297] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9297]
                                mem[_8971 + (32 * _8966) + 64] = (32 * _9297) + 160
                                _10450 = mem[_7479]
                                mem[_8971 + (32 * _8966) + (32 * _9297) + 192] = mem[_7479]
                                mem[_8971 + (32 * _8966) + (32 * _9297) + 224 len 32 * _10450] = mem[_7479 + 32 len 32 * _10450]
                                mem[_8971 + (32 * _8966) + 96] = (32 * _9297) + (32 * _10450) + 192
                                mem[_8971 + (32 * _8966) + (32 * _9297) + (32 * _10450) + 224] = mem[_8971]
                                mem[_8971 + (32 * _8966) + (32 * _9297) + (32 * _10450) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                                mem[_8971 + (32 * _8966) + 128] = 1
                                return memory
                                  from mem[64]
                                   len _8971 + (32 * _8966) + (32 * _9297) + (32 * _10450) + (32 * mem[_8971]) + -mem[64] + 256
                            _9298 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8971 + (32 * _8966) + 192 len 32 * _9298] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9298]
                            mem[_8971 + (32 * _8966) + 64] = (32 * _9298) + 160
                            _10451 = mem[_7479]
                            mem[_8971 + (32 * _8966) + (32 * _9298) + 192] = mem[_7479]
                            mem[_8971 + (32 * _8966) + (32 * _9298) + 224 len 32 * _10451] = mem[_7479 + 32 len 32 * _10451]
                            mem[_8971 + (32 * _8966) + 96] = (32 * _9298) + (32 * _10451) + 192
                            mem[_8971 + (32 * _8966) + (32 * _9298) + (32 * _10451) + 224] = mem[_8971]
                            mem[_8971 + (32 * _8966) + (32 * _9298) + (32 * _10451) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                            mem[_8971 + (32 * _8966) + 128] = 3
                            return memory
                              from mem[64]
                               len _8971 + (32 * _8966) + (32 * _9298) + (32 * _10451) + (32 * mem[_8971]) + -mem[64] + 256
                        require mem[_7479] - 1 < mem[_7479]
                        mem[_8971 + (32 * _8966) + 32] = 128
                        if mem[(32 * mem[_7479] - 1) + _7479 + 32] >= mem[(32 * mem[_8971] - 1) + _8971 + 32]:
                            _9299 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8971 + (32 * _8966) + 192 len 32 * _9299] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9299]
                            mem[_8971 + (32 * _8966) + 64] = (32 * _9299) + 160
                            _10452 = mem[_7479]
                            mem[_8971 + (32 * _8966) + (32 * _9299) + 192] = mem[_7479]
                            mem[_8971 + (32 * _8966) + (32 * _9299) + 224 len 32 * _10452] = mem[_7479 + 32 len 32 * _10452]
                            mem[_8971 + (32 * _8966) + 96] = (32 * _9299) + (32 * _10452) + 192
                            mem[_8971 + (32 * _8966) + (32 * _9299) + (32 * _10452) + 224] = mem[_8971]
                            mem[_8971 + (32 * _8966) + (32 * _9299) + (32 * _10452) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                            mem[_8971 + (32 * _8966) + 128] = 2
                            return memory
                              from mem[64]
                               len _8971 + (32 * _8966) + (32 * _9299) + (32 * _10452) + (32 * mem[_8971]) + -mem[64] + 256
                        _9300 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8971 + (32 * _8966) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8971 + (32 * _8966) + 192 len 32 * _9300] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9300]
                        mem[_8971 + (32 * _8966) + 64] = (32 * _9300) + 160
                        _10453 = mem[_7479]
                        mem[_8971 + (32 * _8966) + (32 * _9300) + 192] = mem[_7479]
                        mem[_8971 + (32 * _8966) + (32 * _9300) + 224 len 32 * _10453] = mem[_7479 + 32 len 32 * _10453]
                        mem[_8971 + (32 * _8966) + 96] = (32 * _9300) + (32 * _10453) + 192
                        mem[_8971 + (32 * _8966) + (32 * _9300) + (32 * _10453) + 224] = mem[_8971]
                        mem[_8971 + (32 * _8966) + (32 * _9300) + (32 * _10453) + 256 len 32 * mem[_8971]] = mem[_8971 + 32 len 32 * mem[_8971]]
                        mem[_8971 + (32 * _8966) + 128] = 3
                        return memory
                          from mem[64]
                           len _8971 + (32 * _8966) + (32 * _9300) + (32 * _10453) + (32 * mem[_8971]) + -mem[64] + 256
                    _8961 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8972 = mem[_8961]
                    require mem[_8961] <= test266151307()
                    require _8961 + mem[_8961] + 31 < _8961 + return_data.size
                    _8983 = mem[_8961 + mem[_8961]]
                    require mem[_8961 + mem[_8961]] <= test266151307()
                    require (32 * mem[_8961 + mem[_8961]]) + 32 >= 0 and _8961 + ceil32(return_data.size) + (32 * mem[_8961 + mem[_8961]]) + 32 <= test266151307()
                    mem[64] = _8961 + ceil32(return_data.size) + (32 * mem[_8961 + mem[_8961]]) + 32
                    mem[_8961 + ceil32(return_data.size)] = _8983
                    require return_data.size >= _8972 + (32 * _8983) + 32
                    mem[_8961 + ceil32(return_data.size) + 32 len 32 * _8983] = mem[_8961 + _8972 + 32 len 32 * _8983]
                    require mem[_7479] - 1 < mem[_7479]
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    require _8983 - 1 < _8983
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7479] - 1) + _7479 + 32]:
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64]] = 128
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * _8983 - 1) + _8961 + ceil32(return_data.size) + 32]:
                            _10882 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[mem[64] + 160 len 32 * _10882] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10882]
                            mem[mem[64] + 32] = (32 * _10882) + 160
                            _11689 = mem[_7479]
                            mem[mem[64] + (32 * _10882) + 160] = mem[_7479]
                            mem[mem[64] + (32 * _10882) + 192 len 32 * _11689] = mem[_7479 + 32 len 32 * _11689]
                            mem[mem[64] + 64] = (32 * _10882) + (32 * _11689) + 192
                            mem[mem[64] + (32 * _10882) + (32 * _11689) + 192] = _8983
                            mem[mem[64] + (32 * _10882) + (32 * _11689) + 224 len 32 * _8983] = mem[_8961 + ceil32(return_data.size) + 32 len 32 * _8983]
                            mem[mem[64] + 96] = 1
                            return Array(len=mem[mem[64] + 128 len (32 * _10882) + (32 * _11689) + 64], data=_8983, mem[mem[64] + (32 * _10882) + (32 * _11689) + 224 len 32 * _8983]), 
                                   (32 * _10882) + 160,
                                   (32 * _10882) + (32 * _11689) + 192,
                                   1
                        _10883 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 160 len 32 * _10883] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10883]
                        mem[mem[64] + 32] = (32 * _10883) + 160
                        _11690 = mem[_7479]
                        mem[mem[64] + (32 * _10883) + 160] = mem[_7479]
                        mem[mem[64] + (32 * _10883) + 192 len 32 * _11690] = mem[_7479 + 32 len 32 * _11690]
                        mem[mem[64] + 64] = (32 * _10883) + (32 * _11690) + 192
                        mem[mem[64] + (32 * _10883) + (32 * _11690) + 192] = _8983
                        mem[mem[64] + (32 * _10883) + (32 * _11690) + 224 len 32 * _8983] = mem[_8961 + ceil32(return_data.size) + 32 len 32 * _8983]
                        mem[mem[64] + 96] = 3
                        return Array(len=mem[mem[64] + 128 len (32 * _10883) + (32 * _11690) + 64], data=_8983, mem[mem[64] + (32 * _10883) + (32 * _11690) + 224 len 32 * _8983]), 
                               (32 * _10883) + 160,
                               (32 * _10883) + (32 * _11690) + 192,
                               3
                    require mem[_7479] - 1 < mem[_7479]
                    mem[mem[64]] = 128
                    if mem[(32 * mem[_7479] - 1) + _7479 + 32] >= mem[(32 * _8983 - 1) + _8961 + ceil32(return_data.size) + 32]:
                        _10884 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 160 len 32 * _10884] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10884]
                        mem[mem[64] + 32] = (32 * _10884) + 160
                        _11691 = mem[_7479]
                        mem[mem[64] + (32 * _10884) + 160] = mem[_7479]
                        mem[mem[64] + (32 * _10884) + 192 len 32 * _11691] = mem[_7479 + 32 len 32 * _11691]
                        mem[mem[64] + 64] = (32 * _10884) + (32 * _11691) + 192
                        mem[mem[64] + (32 * _10884) + (32 * _11691) + 192] = _8983
                        mem[mem[64] + (32 * _10884) + (32 * _11691) + 224 len 32 * _8983] = mem[_8961 + ceil32(return_data.size) + 32 len 32 * _8983]
                        mem[mem[64] + 96] = 2
                        return Array(len=mem[mem[64] + 128 len (32 * _10884) + (32 * _11691) + 64], data=_8983, mem[mem[64] + (32 * _10884) + (32 * _11691) + 224 len 32 * _8983]), 
                               (32 * _10884) + 160,
                               (32 * _10884) + (32 * _11691) + 192,
                               2
                    _10885 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 160 len 32 * _10885] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10885]
                    mem[mem[64] + 32] = (32 * _10885) + 160
                    _11692 = mem[_7479]
                    mem[mem[64] + (32 * _10885) + 160] = mem[_7479]
                    mem[mem[64] + (32 * _10885) + 192 len 32 * _11692] = mem[_7479 + 32 len 32 * _11692]
                    mem[mem[64] + 64] = (32 * _10885) + (32 * _11692) + 192
                    mem[mem[64] + (32 * _10885) + (32 * _11692) + 192] = _8983
                    mem[mem[64] + (32 * _10885) + (32 * _11692) + 224 len 32 * _8983] = mem[_8961 + ceil32(return_data.size) + 32 len 32 * _8983]
                    mem[mem[64] + 96] = 3
                    return Array(len=mem[mem[64] + 128 len (32 * _10885) + (32 * _11692) + 64], data=_8983, mem[mem[64] + (32 * _10885) + (32 * _11692) + 224 len 32 * _8983]), 
                           (32 * _10885) + 160,
                           (32 * _10885) + (32 * _11692) + 192,
                           3
                mem[_7479 + 32 len 32 * mem[(32 * ('cd', 36).length) + 128]] = call.data[calldata.size len 32 * mem[(32 * ('cd', 36).length) + 128]]
                mem[_7479 + (32 * _7477) + 32] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
                mem[_7479 + (32 * _7477) + 36] = cd[4]
                mem[_7479 + (32 * _7477) + 68] = 96
                _7495 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                mem[_7479 + (32 * _7477) + 132] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                idx = 0
                s = _7479 + (32 * _7477) + 164
                t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
                while idx < _7495:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[_7479 + (32 * _7477) + 100] = cd[132]
                require ext_code.size(this.address)
                staticcall this.address.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _7479 + (32 * _7477) + (32 * _7495) + -mem[64] + 160]
                if not ext_call.success:
                    _8967 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
                    _8973 = mem[64]
                    mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                    mem[64] = mem[64] + (32 * _8967) + 32
                    if not _8967:
                        require mem[_7479] - 1 < mem[_7479]
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        require mem[_8973] - 1 < mem[_8973]
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7479] - 1) + _7479 + 32]:
                            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8973 + (32 * _8967) + 32] = 128
                            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8973] - 1) + _8973 + 32]:
                                _9258 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8973 + (32 * _8967) + 192 len 32 * _9258] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9258]
                                mem[_8973 + (32 * _8967) + 64] = (32 * _9258) + 160
                                _10454 = mem[_7479]
                                mem[_8973 + (32 * _8967) + (32 * _9258) + 192] = mem[_7479]
                                mem[_8973 + (32 * _8967) + (32 * _9258) + 224 len 32 * _10454] = mem[_7479 + 32 len 32 * _10454]
                                mem[_8973 + (32 * _8967) + 96] = (32 * _9258) + (32 * _10454) + 192
                                mem[_8973 + (32 * _8967) + (32 * _9258) + (32 * _10454) + 224] = mem[_8973]
                                mem[_8973 + (32 * _8967) + (32 * _9258) + (32 * _10454) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                                mem[_8973 + (32 * _8967) + 128] = 1
                                return memory
                                  from mem[64]
                                   len _8973 + (32 * _8967) + (32 * _9258) + (32 * _10454) + (32 * mem[_8973]) + -mem[64] + 256
                            _9259 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8973 + (32 * _8967) + 192 len 32 * _9259] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9259]
                            mem[_8973 + (32 * _8967) + 64] = (32 * _9259) + 160
                            _10455 = mem[_7479]
                            mem[_8973 + (32 * _8967) + (32 * _9259) + 192] = mem[_7479]
                            mem[_8973 + (32 * _8967) + (32 * _9259) + 224 len 32 * _10455] = mem[_7479 + 32 len 32 * _10455]
                            mem[_8973 + (32 * _8967) + 96] = (32 * _9259) + (32 * _10455) + 192
                            mem[_8973 + (32 * _8967) + (32 * _9259) + (32 * _10455) + 224] = mem[_8973]
                            mem[_8973 + (32 * _8967) + (32 * _9259) + (32 * _10455) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                            mem[_8973 + (32 * _8967) + 128] = 3
                            return memory
                              from mem[64]
                               len _8973 + (32 * _8967) + (32 * _9259) + (32 * _10455) + (32 * mem[_8973]) + -mem[64] + 256
                        require mem[_7479] - 1 < mem[_7479]
                        mem[_8973 + (32 * _8967) + 32] = 128
                        if mem[(32 * mem[_7479] - 1) + _7479 + 32] >= mem[(32 * mem[_8973] - 1) + _8973 + 32]:
                            _9260 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8973 + (32 * _8967) + 192 len 32 * _9260] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9260]
                            mem[_8973 + (32 * _8967) + 64] = (32 * _9260) + 160
                            _10456 = mem[_7479]
                            mem[_8973 + (32 * _8967) + (32 * _9260) + 192] = mem[_7479]
                            mem[_8973 + (32 * _8967) + (32 * _9260) + 224 len 32 * _10456] = mem[_7479 + 32 len 32 * _10456]
                            mem[_8973 + (32 * _8967) + 96] = (32 * _9260) + (32 * _10456) + 192
                            mem[_8973 + (32 * _8967) + (32 * _9260) + (32 * _10456) + 224] = mem[_8973]
                            mem[_8973 + (32 * _8967) + (32 * _9260) + (32 * _10456) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                            mem[_8973 + (32 * _8967) + 128] = 2
                            return memory
                              from mem[64]
                               len _8973 + (32 * _8967) + (32 * _9260) + (32 * _10456) + (32 * mem[_8973]) + -mem[64] + 256
                        _9261 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8973 + (32 * _8967) + 192 len 32 * _9261] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9261]
                        mem[_8973 + (32 * _8967) + 64] = (32 * _9261) + 160
                        _10457 = mem[_7479]
                        mem[_8973 + (32 * _8967) + (32 * _9261) + 192] = mem[_7479]
                        mem[_8973 + (32 * _8967) + (32 * _9261) + 224 len 32 * _10457] = mem[_7479 + 32 len 32 * _10457]
                        mem[_8973 + (32 * _8967) + 96] = (32 * _9261) + (32 * _10457) + 192
                        mem[_8973 + (32 * _8967) + (32 * _9261) + (32 * _10457) + 224] = mem[_8973]
                        mem[_8973 + (32 * _8967) + (32 * _9261) + (32 * _10457) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                        mem[_8973 + (32 * _8967) + 128] = 3
                        return memory
                          from mem[64]
                           len _8973 + (32 * _8967) + (32 * _9261) + (32 * _10457) + (32 * mem[_8973]) + -mem[64] + 256
                    mem[_8973 + 32 len 32 * _8967] = call.data[calldata.size len 32 * _8967]
                    require mem[_7479] - 1 < mem[_7479]
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    require mem[_8973] - 1 < mem[_8973]
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7479] - 1) + _7479 + 32]:
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8973 + (32 * _8967) + 32] = 128
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8973] - 1) + _8973 + 32]:
                            _9302 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8973 + (32 * _8967) + 192 len 32 * _9302] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9302]
                            mem[_8973 + (32 * _8967) + 64] = (32 * _9302) + 160
                            _10458 = mem[_7479]
                            mem[_8973 + (32 * _8967) + (32 * _9302) + 192] = mem[_7479]
                            mem[_8973 + (32 * _8967) + (32 * _9302) + 224 len 32 * _10458] = mem[_7479 + 32 len 32 * _10458]
                            mem[_8973 + (32 * _8967) + 96] = (32 * _9302) + (32 * _10458) + 192
                            mem[_8973 + (32 * _8967) + (32 * _9302) + (32 * _10458) + 224] = mem[_8973]
                            mem[_8973 + (32 * _8967) + (32 * _9302) + (32 * _10458) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                            mem[_8973 + (32 * _8967) + 128] = 1
                            return memory
                              from mem[64]
                               len _8973 + (32 * _8967) + (32 * _9302) + (32 * _10458) + (32 * mem[_8973]) + -mem[64] + 256
                        _9303 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8973 + (32 * _8967) + 192 len 32 * _9303] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9303]
                        mem[_8973 + (32 * _8967) + 64] = (32 * _9303) + 160
                        _10459 = mem[_7479]
                        mem[_8973 + (32 * _8967) + (32 * _9303) + 192] = mem[_7479]
                        mem[_8973 + (32 * _8967) + (32 * _9303) + 224 len 32 * _10459] = mem[_7479 + 32 len 32 * _10459]
                        mem[_8973 + (32 * _8967) + 96] = (32 * _9303) + (32 * _10459) + 192
                        mem[_8973 + (32 * _8967) + (32 * _9303) + (32 * _10459) + 224] = mem[_8973]
                        mem[_8973 + (32 * _8967) + (32 * _9303) + (32 * _10459) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                        mem[_8973 + (32 * _8967) + 128] = 3
                        return memory
                          from mem[64]
                           len _8973 + (32 * _8967) + (32 * _9303) + (32 * _10459) + (32 * mem[_8973]) + -mem[64] + 256
                    require mem[_7479] - 1 < mem[_7479]
                    mem[_8973 + (32 * _8967) + 32] = 128
                    if mem[(32 * mem[_7479] - 1) + _7479 + 32] >= mem[(32 * mem[_8973] - 1) + _8973 + 32]:
                        _9304 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8973 + (32 * _8967) + 192 len 32 * _9304] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9304]
                        mem[_8973 + (32 * _8967) + 64] = (32 * _9304) + 160
                        _10460 = mem[_7479]
                        mem[_8973 + (32 * _8967) + (32 * _9304) + 192] = mem[_7479]
                        mem[_8973 + (32 * _8967) + (32 * _9304) + 224 len 32 * _10460] = mem[_7479 + 32 len 32 * _10460]
                        mem[_8973 + (32 * _8967) + 96] = (32 * _9304) + (32 * _10460) + 192
                        mem[_8973 + (32 * _8967) + (32 * _9304) + (32 * _10460) + 224] = mem[_8973]
                        mem[_8973 + (32 * _8967) + (32 * _9304) + (32 * _10460) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                        mem[_8973 + (32 * _8967) + 128] = 2
                        return memory
                          from mem[64]
                           len _8973 + (32 * _8967) + (32 * _9304) + (32 * _10460) + (32 * mem[_8973]) + -mem[64] + 256
                    _9305 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8973 + (32 * _8967) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8973 + (32 * _8967) + 192 len 32 * _9305] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9305]
                    mem[_8973 + (32 * _8967) + 64] = (32 * _9305) + 160
                    _10461 = mem[_7479]
                    mem[_8973 + (32 * _8967) + (32 * _9305) + 192] = mem[_7479]
                    mem[_8973 + (32 * _8967) + (32 * _9305) + 224 len 32 * _10461] = mem[_7479 + 32 len 32 * _10461]
                    mem[_8973 + (32 * _8967) + 96] = (32 * _9305) + (32 * _10461) + 192
                    mem[_8973 + (32 * _8967) + (32 * _9305) + (32 * _10461) + 224] = mem[_8973]
                    mem[_8973 + (32 * _8967) + (32 * _9305) + (32 * _10461) + 256 len 32 * mem[_8973]] = mem[_8973 + 32 len 32 * mem[_8973]]
                    mem[_8973 + (32 * _8967) + 128] = 3
                    return memory
                      from mem[64]
                       len _8973 + (32 * _8967) + (32 * _9305) + (32 * _10461) + (32 * mem[_8973]) + -mem[64] + 256
                _8962 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8974 = mem[_8962]
                require mem[_8962] <= test266151307()
                require _8962 + mem[_8962] + 31 < _8962 + return_data.size
                _8984 = mem[_8962 + mem[_8962]]
                require mem[_8962 + mem[_8962]] <= test266151307()
                require (32 * mem[_8962 + mem[_8962]]) + 32 >= 0 and _8962 + ceil32(return_data.size) + (32 * mem[_8962 + mem[_8962]]) + 32 <= test266151307()
                mem[64] = _8962 + ceil32(return_data.size) + (32 * mem[_8962 + mem[_8962]]) + 32
                mem[_8962 + ceil32(return_data.size)] = _8984
                require return_data.size >= _8974 + (32 * _8984) + 32
                mem[_8962 + ceil32(return_data.size) + 32 len 32 * _8984] = mem[_8962 + _8974 + 32 len 32 * _8984]
                require mem[_7479] - 1 < mem[_7479]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                require _8984 - 1 < _8984
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7479] - 1) + _7479 + 32]:
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64]] = 128
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * _8984 - 1) + _8962 + ceil32(return_data.size) + 32]:
                        _10886 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 160 len 32 * _10886] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10886]
                        mem[mem[64] + 32] = (32 * _10886) + 160
                        _11701 = mem[_7479]
                        mem[mem[64] + (32 * _10886) + 160] = mem[_7479]
                        mem[mem[64] + (32 * _10886) + 192 len 32 * _11701] = mem[_7479 + 32 len 32 * _11701]
                        mem[mem[64] + 64] = (32 * _10886) + (32 * _11701) + 192
                        mem[mem[64] + (32 * _10886) + (32 * _11701) + 192] = _8984
                        mem[mem[64] + (32 * _10886) + (32 * _11701) + 224 len 32 * _8984] = mem[_8962 + ceil32(return_data.size) + 32 len 32 * _8984]
                        mem[mem[64] + 96] = 1
                        return Array(len=mem[mem[64] + 128 len (32 * _10886) + (32 * _11701) + 64], data=_8984, mem[mem[64] + (32 * _10886) + (32 * _11701) + 224 len 32 * _8984]), 
                               (32 * _10886) + 160,
                               (32 * _10886) + (32 * _11701) + 192,
                               1
                    _10887 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 160 len 32 * _10887] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10887]
                    mem[mem[64] + 32] = (32 * _10887) + 160
                    _11702 = mem[_7479]
                    mem[mem[64] + (32 * _10887) + 160] = mem[_7479]
                    mem[mem[64] + (32 * _10887) + 192 len 32 * _11702] = mem[_7479 + 32 len 32 * _11702]
                    mem[mem[64] + 64] = (32 * _10887) + (32 * _11702) + 192
                    mem[mem[64] + (32 * _10887) + (32 * _11702) + 192] = _8984
                    mem[mem[64] + (32 * _10887) + (32 * _11702) + 224 len 32 * _8984] = mem[_8962 + ceil32(return_data.size) + 32 len 32 * _8984]
                    mem[mem[64] + 96] = 3
                    return Array(len=mem[mem[64] + 128 len (32 * _10887) + (32 * _11702) + 64], data=_8984, mem[mem[64] + (32 * _10887) + (32 * _11702) + 224 len 32 * _8984]), 
                           (32 * _10887) + 160,
                           (32 * _10887) + (32 * _11702) + 192,
                           3
                require mem[_7479] - 1 < mem[_7479]
                mem[mem[64]] = 128
                if mem[(32 * mem[_7479] - 1) + _7479 + 32] >= mem[(32 * _8984 - 1) + _8962 + ceil32(return_data.size) + 32]:
                    _10888 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 160 len 32 * _10888] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10888]
                    mem[mem[64] + 32] = (32 * _10888) + 160
                    _11703 = mem[_7479]
                    mem[mem[64] + (32 * _10888) + 160] = mem[_7479]
                    mem[mem[64] + (32 * _10888) + 192 len 32 * _11703] = mem[_7479 + 32 len 32 * _11703]
                    mem[mem[64] + 64] = (32 * _10888) + (32 * _11703) + 192
                    mem[mem[64] + (32 * _10888) + (32 * _11703) + 192] = _8984
                    mem[mem[64] + (32 * _10888) + (32 * _11703) + 224 len 32 * _8984] = mem[_8962 + ceil32(return_data.size) + 32 len 32 * _8984]
                    mem[mem[64] + 96] = 2
                    return Array(len=mem[mem[64] + 128 len (32 * _10888) + (32 * _11703) + 64], data=_8984, mem[mem[64] + (32 * _10888) + (32 * _11703) + 224 len 32 * _8984]), 
                           (32 * _10888) + 160,
                           (32 * _10888) + (32 * _11703) + 192,
                           2
                _10889 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 160 len 32 * _10889] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10889]
                mem[mem[64] + 32] = (32 * _10889) + 160
                _11704 = mem[_7479]
                mem[mem[64] + (32 * _10889) + 160] = mem[_7479]
                mem[mem[64] + (32 * _10889) + 192 len 32 * _11704] = mem[_7479 + 32 len 32 * _11704]
                mem[mem[64] + 64] = (32 * _10889) + (32 * _11704) + 192
                mem[mem[64] + (32 * _10889) + (32 * _11704) + 192] = _8984
                mem[mem[64] + (32 * _10889) + (32 * _11704) + 224 len 32 * _8984] = mem[_8962 + ceil32(return_data.size) + 32 len 32 * _8984]
                mem[mem[64] + 96] = 3
                return Array(len=mem[mem[64] + 128 len (32 * _10889) + (32 * _11704) + 64], data=_8984, mem[mem[64] + (32 * _10889) + (32 * _11704) + 224 len 32 * _8984]), 
                       (32 * _10889) + 160,
                       (32 * _10889) + (32 * _11704) + 192,
                       3
            _7475 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _7480 = mem[_7475]
            require mem[_7475] <= test266151307()
            require _7475 + mem[_7475] + 31 < _7475 + return_data.size
            _7484 = mem[_7475 + mem[_7475]]
            require mem[_7475 + mem[_7475]] <= test266151307()
            require (32 * mem[_7475 + mem[_7475]]) + 32 >= 0 and _7475 + ceil32(return_data.size) + (32 * mem[_7475 + mem[_7475]]) + 32 <= test266151307()
            mem[64] = _7475 + ceil32(return_data.size) + (32 * mem[_7475 + mem[_7475]]) + 32
            mem[_7475 + ceil32(return_data.size)] = _7484
            require return_data.size >= _7480 + (32 * _7484) + 32
            mem[_7475 + ceil32(return_data.size) + 32 len 32 * _7484] = mem[_7475 + _7480 + 32 len 32 * _7484]
            mem[mem[64]] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = cd[4]
            mem[mem[64] + 36] = 96
            _8985 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            mem[mem[64] + 100] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            idx = 0
            s = mem[64] + 132
            t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
            while idx < _8985:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 68] = cd[132]
            require ext_code.size(this.address)
            staticcall this.address.0xb6eacc9d with:
                    gas gas_remaining wei
                   args cd[4], 96, cd[132], mem[mem[64] + 100 len (32 * _8985) + 32]
            if not ext_call.success:
                _10498 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
                _10522 = mem[64]
                mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                mem[64] = mem[64] + (32 * _10498) + 32
                if not _10498:
                    require mem[_7475 + ceil32(return_data.size)] - 1 < mem[_7475 + ceil32(return_data.size)]
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    require mem[_10522] - 1 < mem[_10522]
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7475 + ceil32(return_data.size)] - 1) + _7475 + ceil32(return_data.size) + 32]:
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10522 + (32 * _10498) + 32] = 128
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_10522] - 1) + _10522 + 32]:
                            _10960 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_10522 + (32 * _10498) + 192 len 32 * _10960] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10960]
                            mem[_10522 + (32 * _10498) + 64] = (32 * _10960) + 160
                            _11705 = mem[_7475 + ceil32(return_data.size)]
                            mem[_10522 + (32 * _10498) + (32 * _10960) + 192] = mem[_7475 + ceil32(return_data.size)]
                            mem[_10522 + (32 * _10498) + (32 * _10960) + 224 len 32 * _11705] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11705]
                            mem[_10522 + (32 * _10498) + 96] = (32 * _10960) + (32 * _11705) + 192
                            mem[_10522 + (32 * _10498) + (32 * _10960) + (32 * _11705) + 224] = mem[_10522]
                            mem[_10522 + (32 * _10498) + (32 * _10960) + (32 * _11705) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                            mem[_10522 + (32 * _10498) + 128] = 1
                            return memory
                              from mem[64]
                               len _10522 + (32 * _10498) + (32 * _10960) + (32 * _11705) + (32 * mem[_10522]) + -mem[64] + 256
                        _10961 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10522 + (32 * _10498) + 192 len 32 * _10961] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10961]
                        mem[_10522 + (32 * _10498) + 64] = (32 * _10961) + 160
                        _11706 = mem[_7475 + ceil32(return_data.size)]
                        mem[_10522 + (32 * _10498) + (32 * _10961) + 192] = mem[_7475 + ceil32(return_data.size)]
                        mem[_10522 + (32 * _10498) + (32 * _10961) + 224 len 32 * _11706] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11706]
                        mem[_10522 + (32 * _10498) + 96] = (32 * _10961) + (32 * _11706) + 192
                        mem[_10522 + (32 * _10498) + (32 * _10961) + (32 * _11706) + 224] = mem[_10522]
                        mem[_10522 + (32 * _10498) + (32 * _10961) + (32 * _11706) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                        mem[_10522 + (32 * _10498) + 128] = 3
                        return memory
                          from mem[64]
                           len _10522 + (32 * _10498) + (32 * _10961) + (32 * _11706) + (32 * mem[_10522]) + -mem[64] + 256
                    require mem[_7475 + ceil32(return_data.size)] - 1 < mem[_7475 + ceil32(return_data.size)]
                    mem[_10522 + (32 * _10498) + 32] = 128
                    if mem[(32 * mem[_7475 + ceil32(return_data.size)] - 1) + _7475 + ceil32(return_data.size) + 32] >= mem[(32 * mem[_10522] - 1) + _10522 + 32]:
                        _10962 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10522 + (32 * _10498) + 192 len 32 * _10962] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10962]
                        mem[_10522 + (32 * _10498) + 64] = (32 * _10962) + 160
                        _11707 = mem[_7475 + ceil32(return_data.size)]
                        mem[_10522 + (32 * _10498) + (32 * _10962) + 192] = mem[_7475 + ceil32(return_data.size)]
                        mem[_10522 + (32 * _10498) + (32 * _10962) + 224 len 32 * _11707] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11707]
                        mem[_10522 + (32 * _10498) + 96] = (32 * _10962) + (32 * _11707) + 192
                        mem[_10522 + (32 * _10498) + (32 * _10962) + (32 * _11707) + 224] = mem[_10522]
                        mem[_10522 + (32 * _10498) + (32 * _10962) + (32 * _11707) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                        mem[_10522 + (32 * _10498) + 128] = 2
                        return memory
                          from mem[64]
                           len _10522 + (32 * _10498) + (32 * _10962) + (32 * _11707) + (32 * mem[_10522]) + -mem[64] + 256
                    _10963 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10522 + (32 * _10498) + 192 len 32 * _10963] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10963]
                    mem[_10522 + (32 * _10498) + 64] = (32 * _10963) + 160
                    _11708 = mem[_7475 + ceil32(return_data.size)]
                    mem[_10522 + (32 * _10498) + (32 * _10963) + 192] = mem[_7475 + ceil32(return_data.size)]
                    mem[_10522 + (32 * _10498) + (32 * _10963) + 224 len 32 * _11708] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11708]
                    mem[_10522 + (32 * _10498) + 96] = (32 * _10963) + (32 * _11708) + 192
                    mem[_10522 + (32 * _10498) + (32 * _10963) + (32 * _11708) + 224] = mem[_10522]
                    mem[_10522 + (32 * _10498) + (32 * _10963) + (32 * _11708) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                    mem[_10522 + (32 * _10498) + 128] = 3
                    return memory
                      from mem[64]
                       len _10522 + (32 * _10498) + (32 * _10963) + (32 * _11708) + (32 * mem[_10522]) + -mem[64] + 256
                mem[_10522 + 32 len 32 * _10498] = call.data[calldata.size len 32 * _10498]
                require mem[_7475 + ceil32(return_data.size)] - 1 < mem[_7475 + ceil32(return_data.size)]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                require mem[_10522] - 1 < mem[_10522]
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7475 + ceil32(return_data.size)] - 1) + _7475 + ceil32(return_data.size) + 32]:
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10522 + (32 * _10498) + 32] = 128
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_10522] - 1) + _10522 + 32]:
                        _11000 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10522 + (32 * _10498) + 192 len 32 * _11000] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11000]
                        mem[_10522 + (32 * _10498) + 64] = (32 * _11000) + 160
                        _11709 = mem[_7475 + ceil32(return_data.size)]
                        mem[_10522 + (32 * _10498) + (32 * _11000) + 192] = mem[_7475 + ceil32(return_data.size)]
                        mem[_10522 + (32 * _10498) + (32 * _11000) + 224 len 32 * _11709] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11709]
                        mem[_10522 + (32 * _10498) + 96] = (32 * _11000) + (32 * _11709) + 192
                        mem[_10522 + (32 * _10498) + (32 * _11000) + (32 * _11709) + 224] = mem[_10522]
                        mem[_10522 + (32 * _10498) + (32 * _11000) + (32 * _11709) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                        mem[_10522 + (32 * _10498) + 128] = 1
                        return memory
                          from mem[64]
                           len _10522 + (32 * _10498) + (32 * _11000) + (32 * _11709) + (32 * mem[_10522]) + -mem[64] + 256
                    _11001 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10522 + (32 * _10498) + 192 len 32 * _11001] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11001]
                    mem[_10522 + (32 * _10498) + 64] = (32 * _11001) + 160
                    _11710 = mem[_7475 + ceil32(return_data.size)]
                    mem[_10522 + (32 * _10498) + (32 * _11001) + 192] = mem[_7475 + ceil32(return_data.size)]
                    mem[_10522 + (32 * _10498) + (32 * _11001) + 224 len 32 * _11710] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11710]
                    mem[_10522 + (32 * _10498) + 96] = (32 * _11001) + (32 * _11710) + 192
                    mem[_10522 + (32 * _10498) + (32 * _11001) + (32 * _11710) + 224] = mem[_10522]
                    mem[_10522 + (32 * _10498) + (32 * _11001) + (32 * _11710) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                    mem[_10522 + (32 * _10498) + 128] = 3
                    return memory
                      from mem[64]
                       len _10522 + (32 * _10498) + (32 * _11001) + (32 * _11710) + (32 * mem[_10522]) + -mem[64] + 256
                require mem[_7475 + ceil32(return_data.size)] - 1 < mem[_7475 + ceil32(return_data.size)]
                mem[_10522 + (32 * _10498) + 32] = 128
                if mem[(32 * mem[_7475 + ceil32(return_data.size)] - 1) + _7475 + ceil32(return_data.size) + 32] >= mem[(32 * mem[_10522] - 1) + _10522 + 32]:
                    _11002 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10522 + (32 * _10498) + 192 len 32 * _11002] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11002]
                    mem[_10522 + (32 * _10498) + 64] = (32 * _11002) + 160
                    _11711 = mem[_7475 + ceil32(return_data.size)]
                    mem[_10522 + (32 * _10498) + (32 * _11002) + 192] = mem[_7475 + ceil32(return_data.size)]
                    mem[_10522 + (32 * _10498) + (32 * _11002) + 224 len 32 * _11711] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11711]
                    mem[_10522 + (32 * _10498) + 96] = (32 * _11002) + (32 * _11711) + 192
                    mem[_10522 + (32 * _10498) + (32 * _11002) + (32 * _11711) + 224] = mem[_10522]
                    mem[_10522 + (32 * _10498) + (32 * _11002) + (32 * _11711) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                    mem[_10522 + (32 * _10498) + 128] = 2
                    return memory
                      from mem[64]
                       len _10522 + (32 * _10498) + (32 * _11002) + (32 * _11711) + (32 * mem[_10522]) + -mem[64] + 256
                _11003 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10522 + (32 * _10498) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10522 + (32 * _10498) + 192 len 32 * _11003] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11003]
                mem[_10522 + (32 * _10498) + 64] = (32 * _11003) + 160
                _11712 = mem[_7475 + ceil32(return_data.size)]
                mem[_10522 + (32 * _10498) + (32 * _11003) + 192] = mem[_7475 + ceil32(return_data.size)]
                mem[_10522 + (32 * _10498) + (32 * _11003) + 224 len 32 * _11712] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _11712]
                mem[_10522 + (32 * _10498) + 96] = (32 * _11003) + (32 * _11712) + 192
                mem[_10522 + (32 * _10498) + (32 * _11003) + (32 * _11712) + 224] = mem[_10522]
                mem[_10522 + (32 * _10498) + (32 * _11003) + (32 * _11712) + 256 len 32 * mem[_10522]] = mem[_10522 + 32 len 32 * mem[_10522]]
                mem[_10522 + (32 * _10498) + 128] = 3
                return memory
                  from mem[64]
                   len _10522 + (32 * _10498) + (32 * _11003) + (32 * _11712) + (32 * mem[_10522]) + -mem[64] + 256
            _10478 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _10523 = mem[_10478]
            require mem[_10478] <= test266151307()
            require _10478 + mem[_10478] + 31 < _10478 + return_data.size
            _10581 = mem[_10478 + mem[_10478]]
            require mem[_10478 + mem[_10478]] <= test266151307()
            require (32 * mem[_10478 + mem[_10478]]) + 32 >= 0 and _10478 + ceil32(return_data.size) + (32 * mem[_10478 + mem[_10478]]) + 32 <= test266151307()
            mem[64] = _10478 + ceil32(return_data.size) + (32 * mem[_10478 + mem[_10478]]) + 32
            mem[_10478 + ceil32(return_data.size)] = _10581
            require return_data.size >= _10523 + (32 * _10581) + 32
            mem[_10478 + ceil32(return_data.size) + 32 len 32 * _10581] = mem[_10478 + _10523 + 32 len 32 * _10581]
            require mem[_7475 + ceil32(return_data.size)] - 1 < mem[_7475 + ceil32(return_data.size)]
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            require _10581 - 1 < _10581
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_7475 + ceil32(return_data.size)] - 1) + _7475 + ceil32(return_data.size) + 32]:
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64]] = 128
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * _10581 - 1) + _10478 + ceil32(return_data.size) + 32]:
                    _12148 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 160 len 32 * _12148] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12148]
                    mem[mem[64] + 32] = (32 * _12148) + 160
                    _12511 = mem[_7475 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _12148) + 160] = mem[_7475 + ceil32(return_data.size)]
                    mem[mem[64] + (32 * _12148) + 192 len 32 * _12511] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _12511]
                    mem[mem[64] + 64] = (32 * _12148) + (32 * _12511) + 192
                    mem[mem[64] + (32 * _12148) + (32 * _12511) + 192] = _10581
                    mem[mem[64] + (32 * _12148) + (32 * _12511) + 224 len 32 * _10581] = mem[_10478 + ceil32(return_data.size) + 32 len 32 * _10581]
                    mem[mem[64] + 96] = 1
                    return Array(len=mem[mem[64] + 128 len (32 * _12148) + (32 * _12511) + 64], data=_10581, mem[mem[64] + (32 * _12148) + (32 * _12511) + 224 len 32 * _10581]), 
                           (32 * _12148) + 160,
                           (32 * _12148) + (32 * _12511) + 192,
                           1
                _12149 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 160 len 32 * _12149] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12149]
                mem[mem[64] + 32] = (32 * _12149) + 160
                _12512 = mem[_7475 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _12149) + 160] = mem[_7475 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _12149) + 192 len 32 * _12512] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _12512]
                mem[mem[64] + 64] = (32 * _12149) + (32 * _12512) + 192
                mem[mem[64] + (32 * _12149) + (32 * _12512) + 192] = _10581
                mem[mem[64] + (32 * _12149) + (32 * _12512) + 224 len 32 * _10581] = mem[_10478 + ceil32(return_data.size) + 32 len 32 * _10581]
                mem[mem[64] + 96] = 3
                return Array(len=mem[mem[64] + 128 len (32 * _12149) + (32 * _12512) + 64], data=_10581, mem[mem[64] + (32 * _12149) + (32 * _12512) + 224 len 32 * _10581]), 
                       (32 * _12149) + 160,
                       (32 * _12149) + (32 * _12512) + 192,
                       3
            require mem[_7475 + ceil32(return_data.size)] - 1 < mem[_7475 + ceil32(return_data.size)]
            mem[mem[64]] = 128
            if mem[(32 * mem[_7475 + ceil32(return_data.size)] - 1) + _7475 + ceil32(return_data.size) + 32] >= mem[(32 * _10581 - 1) + _10478 + ceil32(return_data.size) + 32]:
                _12150 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 160 len 32 * _12150] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12150]
                mem[mem[64] + 32] = (32 * _12150) + 160
                _12513 = mem[_7475 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _12150) + 160] = mem[_7475 + ceil32(return_data.size)]
                mem[mem[64] + (32 * _12150) + 192 len 32 * _12513] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _12513]
                mem[mem[64] + 64] = (32 * _12150) + (32 * _12513) + 192
                mem[mem[64] + (32 * _12150) + (32 * _12513) + 192] = _10581
                mem[mem[64] + (32 * _12150) + (32 * _12513) + 224 len 32 * _10581] = mem[_10478 + ceil32(return_data.size) + 32 len 32 * _10581]
                mem[mem[64] + 96] = 2
                return Array(len=mem[mem[64] + 128 len (32 * _12150) + (32 * _12513) + 64], data=_10581, mem[mem[64] + (32 * _12150) + (32 * _12513) + 224 len 32 * _10581]), 
                       (32 * _12150) + 160,
                       (32 * _12150) + (32 * _12513) + 192,
                       2
            _12151 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 160 len 32 * _12151] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12151]
            mem[mem[64] + 32] = (32 * _12151) + 160
            _12514 = mem[_7475 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _12151) + 160] = mem[_7475 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _12151) + 192 len 32 * _12514] = mem[_7475 + ceil32(return_data.size) + 32 len 32 * _12514]
            mem[mem[64] + 64] = (32 * _12151) + (32 * _12514) + 192
            mem[mem[64] + (32 * _12151) + (32 * _12514) + 192] = _10581
            mem[mem[64] + (32 * _12151) + (32 * _12514) + 224 len 32 * _10581] = mem[_10478 + ceil32(return_data.size) + 32 len 32 * _10581]
            mem[mem[64] + 96] = 3
            return Array(len=mem[mem[64] + 128 len (32 * _12151) + (32 * _12514) + 64], data=_10581, mem[mem[64] + (32 * _12151) + (32 * _12514) + 224 len 32 * _10581]), 
                   (32 * _12151) + 160,
                   (32 * _12151) + (32 * _12514) + 192,
                   3
        mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * ('cd', 36).length] = call.data[calldata.size len 32 * ('cd', 36).length]
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 228] = cd[4]
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 260] = 96
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 324] = ('cd', 68).length
        idx = 0
        s = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 356
        t = (32 * ('cd', 36).length) + 160
        while idx < mem[(32 * ('cd', 36).length) + 128]:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 292] = cd[132]
        require ext_code.size(this.address)
        staticcall this.address.0xb6eacc9d with:
                gas gas_remaining wei
               args mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 228 len (97 * ('cd', 36).length) + (32 * ('cd', 68).length) + 128]
        if not ext_call.success:
            _7478 = mem[(32 * ('cd', 36).length) + 128]
            require mem[(32 * ('cd', 36).length) + 128] <= test266151307()
            mem[64] = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * mem[(32 * ('cd', 36).length) + 128]) + 256
            if not mem[(32 * ('cd', 36).length) + 128]:
                mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * mem[(32 * ('cd', 36).length) + 128]) + 256] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
                mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + 260] = cd[4]
                mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + 292] = 96
                _7492 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + 356] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                idx = 0
                s = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + 388
                t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
                while idx < _7492:
                    mem[s] = mem[t + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + 324] = cd[132]
                require ext_code.size(this.address)
                staticcall this.address.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + (32 * _7492) + -mem[64] + 384]
                if not ext_call.success:
                    _8968 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
                    _8975 = mem[64]
                    mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                    mem[64] = mem[64] + (32 * _8968) + 32
                    if not _8968:
                        require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        require mem[_8975] - 1 < mem[_8975]
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256]:
                            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8975 + (32 * _8968) + 32] = 128
                            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8975] - 1) + _8975 + 32]:
                                _9269 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                                mem[_8975 + (32 * _8968) + 192 len 32 * _9269] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9269]
                                mem[_8975 + (32 * _8968) + 64] = (32 * _9269) + 160
                                mem[_8975 + (32 * _8968) + (32 * _9269) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                                mem[_8975 + (32 * _8968) + (32 * _9269) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                                mem[_8975 + (32 * _8968) + 96] = (32 * _9269) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                                mem[_8975 + (32 * _8968) + (32 * _9269) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                                mem[_8975 + (32 * _8968) + (32 * _9269) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                                mem[_8975 + (32 * _8968) + 128] = 1
                                return memory
                                  from mem[64]
                                   len _8975 + (32 * _8968) + (32 * _9269) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                            _9270 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8975 + (32 * _8968) + 192 len 32 * _9270] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9270]
                            mem[_8975 + (32 * _8968) + 64] = (32 * _9270) + 160
                            mem[_8975 + (32 * _8968) + (32 * _9270) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                            mem[_8975 + (32 * _8968) + (32 * _9270) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                            mem[_8975 + (32 * _8968) + 96] = (32 * _9270) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                            mem[_8975 + (32 * _8968) + (32 * _9270) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                            mem[_8975 + (32 * _8968) + (32 * _9270) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                            mem[_8975 + (32 * _8968) + 128] = 3
                            return memory
                              from mem[64]
                               len _8975 + (32 * _8968) + (32 * _9270) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                        require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                        mem[_8975 + (32 * _8968) + 32] = 128
                        if mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] >= mem[(32 * mem[_8975] - 1) + _8975 + 32]:
                            _9271 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8975 + (32 * _8968) + 192 len 32 * _9271] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9271]
                            mem[_8975 + (32 * _8968) + 64] = (32 * _9271) + 160
                            mem[_8975 + (32 * _8968) + (32 * _9271) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                            mem[_8975 + (32 * _8968) + (32 * _9271) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                            mem[_8975 + (32 * _8968) + 96] = (32 * _9271) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                            mem[_8975 + (32 * _8968) + (32 * _9271) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                            mem[_8975 + (32 * _8968) + (32 * _9271) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                            mem[_8975 + (32 * _8968) + 128] = 2
                            return memory
                              from mem[64]
                               len _8975 + (32 * _8968) + (32 * _9271) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                        _9272 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8975 + (32 * _8968) + 192 len 32 * _9272] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9272]
                        mem[_8975 + (32 * _8968) + 64] = (32 * _9272) + 160
                        mem[_8975 + (32 * _8968) + (32 * _9272) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                        mem[_8975 + (32 * _8968) + (32 * _9272) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                        mem[_8975 + (32 * _8968) + 96] = (32 * _9272) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                        mem[_8975 + (32 * _8968) + (32 * _9272) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                        mem[_8975 + (32 * _8968) + (32 * _9272) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                        mem[_8975 + (32 * _8968) + 128] = 3
                        return memory
                          from mem[64]
                           len _8975 + (32 * _8968) + (32 * _9272) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                    mem[_8975 + 32 len 32 * _8968] = call.data[calldata.size len 32 * _8968]
                    require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    require mem[_8975] - 1 < mem[_8975]
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256]:
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8975 + (32 * _8968) + 32] = 128
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8975] - 1) + _8975 + 32]:
                            _9317 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8975 + (32 * _8968) + 192 len 32 * _9317] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9317]
                            mem[_8975 + (32 * _8968) + 64] = (32 * _9317) + 160
                            mem[_8975 + (32 * _8968) + (32 * _9317) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                            mem[_8975 + (32 * _8968) + (32 * _9317) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                            mem[_8975 + (32 * _8968) + 96] = (32 * _9317) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                            mem[_8975 + (32 * _8968) + (32 * _9317) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                            mem[_8975 + (32 * _8968) + (32 * _9317) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                            mem[_8975 + (32 * _8968) + 128] = 1
                            return memory
                              from mem[64]
                               len _8975 + (32 * _8968) + (32 * _9317) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                        _9318 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8975 + (32 * _8968) + 192 len 32 * _9318] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9318]
                        mem[_8975 + (32 * _8968) + 64] = (32 * _9318) + 160
                        mem[_8975 + (32 * _8968) + (32 * _9318) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                        mem[_8975 + (32 * _8968) + (32 * _9318) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                        mem[_8975 + (32 * _8968) + 96] = (32 * _9318) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                        mem[_8975 + (32 * _8968) + (32 * _9318) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                        mem[_8975 + (32 * _8968) + (32 * _9318) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                        mem[_8975 + (32 * _8968) + 128] = 3
                        return memory
                          from mem[64]
                           len _8975 + (32 * _8968) + (32 * _9318) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                    require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                    mem[_8975 + (32 * _8968) + 32] = 128
                    if mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] >= mem[(32 * mem[_8975] - 1) + _8975 + 32]:
                        _9319 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8975 + (32 * _8968) + 192 len 32 * _9319] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9319]
                        mem[_8975 + (32 * _8968) + 64] = (32 * _9319) + 160
                        mem[_8975 + (32 * _8968) + (32 * _9319) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                        mem[_8975 + (32 * _8968) + (32 * _9319) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                        mem[_8975 + (32 * _8968) + 96] = (32 * _9319) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                        mem[_8975 + (32 * _8968) + (32 * _9319) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                        mem[_8975 + (32 * _8968) + (32 * _9319) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                        mem[_8975 + (32 * _8968) + 128] = 2
                        return memory
                          from mem[64]
                           len _8975 + (32 * _8968) + (32 * _9319) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                    _9320 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8975 + (32 * _8968) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8975 + (32 * _8968) + 192 len 32 * _9320] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9320]
                    mem[_8975 + (32 * _8968) + 64] = (32 * _9320) + 160
                    mem[_8975 + (32 * _8968) + (32 * _9320) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                    mem[_8975 + (32 * _8968) + (32 * _9320) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                    mem[_8975 + (32 * _8968) + 96] = (32 * _9320) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                    mem[_8975 + (32 * _8968) + (32 * _9320) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8975]
                    mem[_8975 + (32 * _8968) + (32 * _9320) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8975]] = mem[_8975 + 32 len 32 * mem[_8975]]
                    mem[_8975 + (32 * _8968) + 128] = 3
                    return memory
                      from mem[64]
                       len _8975 + (32 * _8968) + (32 * _9320) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8975]) + -mem[64] + 256
                _8963 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8976 = mem[_8963]
                require mem[_8963] <= test266151307()
                require _8963 + mem[_8963] + 31 < _8963 + return_data.size
                _8986 = mem[_8963 + mem[_8963]]
                require mem[_8963 + mem[_8963]] <= test266151307()
                require (32 * mem[_8963 + mem[_8963]]) + 32 >= 0 and _8963 + ceil32(return_data.size) + (32 * mem[_8963 + mem[_8963]]) + 32 <= test266151307()
                mem[64] = _8963 + ceil32(return_data.size) + (32 * mem[_8963 + mem[_8963]]) + 32
                mem[_8963 + ceil32(return_data.size)] = _8986
                require return_data.size >= _8976 + (32 * _8986) + 32
                mem[_8963 + ceil32(return_data.size) + 32 len 32 * _8986] = mem[_8963 + _8976 + 32 len 32 * _8986]
                require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                require _8986 - 1 < _8986
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256]:
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64]] = 128
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * _8986 - 1) + _8963 + ceil32(return_data.size) + 32]:
                        _10890 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[mem[64] + 160 len 32 * _10890] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10890]
                        mem[mem[64] + 32] = (32 * _10890) + 160
                        mem[mem[64] + (32 * _10890) + 160] = 0, Mask(224, 32, cd[4]) >> 32
                        mem[mem[64] + (32 * _10890) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                        mem[mem[64] + 64] = (32 * _10890) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                        mem[mem[64] + (32 * _10890) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8986
                        mem[mem[64] + (32 * _10890) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986] = mem[_8963 + ceil32(return_data.size) + 32 len 32 * _8986]
                        mem[mem[64] + 96] = 1
                        return 128, 
                               (32 * _10890) + 160,
                               (32 * _10890) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                               1,
                               mem[mem[64] + 128 len (32 * _10890) + 32],
                               0,
                               Mask(224, 32, cd[4]) >> 32,
                               mem[mem[64] + (32 * _10890) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                               _8986,
                               mem[mem[64] + (32 * _10890) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986]
                    _10891 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 160 len 32 * _10891] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10891]
                    mem[mem[64] + 32] = (32 * _10891) + 160
                    mem[mem[64] + (32 * _10891) + 160] = 0, Mask(224, 32, cd[4]) >> 32
                    mem[mem[64] + (32 * _10891) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                    mem[mem[64] + 64] = (32 * _10891) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                    mem[mem[64] + (32 * _10891) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8986
                    mem[mem[64] + (32 * _10891) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986] = mem[_8963 + ceil32(return_data.size) + 32 len 32 * _8986]
                    mem[mem[64] + 96] = 3
                    return 128, 
                           (32 * _10891) + 160,
                           (32 * _10891) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                           3,
                           mem[mem[64] + 128 len (32 * _10891) + 32],
                           0,
                           Mask(224, 32, cd[4]) >> 32,
                           mem[mem[64] + (32 * _10891) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                           _8986,
                           mem[mem[64] + (32 * _10891) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986]
                require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                mem[mem[64]] = 128
                if mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] >= mem[(32 * _8986 - 1) + _8963 + ceil32(return_data.size) + 32]:
                    _10892 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 160 len 32 * _10892] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10892]
                    mem[mem[64] + 32] = (32 * _10892) + 160
                    mem[mem[64] + (32 * _10892) + 160] = 0, Mask(224, 32, cd[4]) >> 32
                    mem[mem[64] + (32 * _10892) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                    mem[mem[64] + 64] = (32 * _10892) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                    mem[mem[64] + (32 * _10892) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8986
                    mem[mem[64] + (32 * _10892) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986] = mem[_8963 + ceil32(return_data.size) + 32 len 32 * _8986]
                    mem[mem[64] + 96] = 2
                    return 128, 
                           (32 * _10892) + 160,
                           (32 * _10892) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                           2,
                           mem[mem[64] + 128 len (32 * _10892) + 32],
                           0,
                           Mask(224, 32, cd[4]) >> 32,
                           mem[mem[64] + (32 * _10892) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                           _8986,
                           mem[mem[64] + (32 * _10892) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986]
                _10893 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 160 len 32 * _10893] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10893]
                mem[mem[64] + 32] = (32 * _10893) + 160
                mem[mem[64] + (32 * _10893) + 160] = 0, Mask(224, 32, cd[4]) >> 32
                mem[mem[64] + (32 * _10893) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                mem[mem[64] + 64] = (32 * _10893) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                mem[mem[64] + (32 * _10893) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8986
                mem[mem[64] + (32 * _10893) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986] = mem[_8963 + ceil32(return_data.size) + 32 len 32 * _8986]
                mem[mem[64] + 96] = 3
                return 128, 
                       (32 * _10893) + 160,
                       (32 * _10893) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                       3,
                       mem[mem[64] + 128 len (32 * _10893) + 32],
                       0,
                       Mask(224, 32, cd[4]) >> 32,
                       mem[mem[64] + (32 * _10893) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                       _8986,
                       mem[mem[64] + (32 * _10893) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8986]
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * mem[(32 * ('cd', 36).length) + 128]] = call.data[calldata.size len 32 * mem[(32 * ('cd', 36).length) + 128]]
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * mem[(32 * ('cd', 36).length) + 128]) + 256] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * mem[(32 * ('cd', 36).length) + 128]) + 260] = cd[4]
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * mem[(32 * ('cd', 36).length) + 128]) + 292] = 96
            _7497 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * mem[(32 * ('cd', 36).length) + 128]) + 356] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            idx = 0
            s = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * mem[(32 * ('cd', 36).length) + 128]) + 388
            t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
            while idx < _7497:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + 324] = cd[132]
            require ext_code.size(this.address)
            staticcall this.address.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + (32 * _7478) + (32 * _7497) + -mem[64] + 384]
            if not ext_call.success:
                _8969 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
                _8977 = mem[64]
                mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                mem[64] = mem[64] + (32 * _8969) + 32
                if not _8969:
                    require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    require mem[_8977] - 1 < mem[_8977]
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256]:
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8977 + (32 * _8969) + 32] = 128
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8977] - 1) + _8977 + 32]:
                            _9276 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                            mem[_8977 + (32 * _8969) + 192 len 32 * _9276] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9276]
                            mem[_8977 + (32 * _8969) + 64] = (32 * _9276) + 160
                            mem[_8977 + (32 * _8969) + (32 * _9276) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                            mem[_8977 + (32 * _8969) + (32 * _9276) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                            mem[_8977 + (32 * _8969) + 96] = (32 * _9276) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                            mem[_8977 + (32 * _8969) + (32 * _9276) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                            mem[_8977 + (32 * _8969) + (32 * _9276) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                            mem[_8977 + (32 * _8969) + 128] = 1
                            return memory
                              from mem[64]
                               len _8977 + (32 * _8969) + (32 * _9276) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
                        _9277 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8977 + (32 * _8969) + 192 len 32 * _9277] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9277]
                        mem[_8977 + (32 * _8969) + 64] = (32 * _9277) + 160
                        mem[_8977 + (32 * _8969) + (32 * _9277) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                        mem[_8977 + (32 * _8969) + (32 * _9277) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                        mem[_8977 + (32 * _8969) + 96] = (32 * _9277) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                        mem[_8977 + (32 * _8969) + (32 * _9277) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                        mem[_8977 + (32 * _8969) + (32 * _9277) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                        mem[_8977 + (32 * _8969) + 128] = 3
                        return memory
                          from mem[64]
                           len _8977 + (32 * _8969) + (32 * _9277) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
                    require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                    mem[_8977 + (32 * _8969) + 32] = 128
                    if mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] >= mem[(32 * mem[_8977] - 1) + _8977 + 32]:
                        _9278 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8977 + (32 * _8969) + 192 len 32 * _9278] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9278]
                        mem[_8977 + (32 * _8969) + 64] = (32 * _9278) + 160
                        mem[_8977 + (32 * _8969) + (32 * _9278) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                        mem[_8977 + (32 * _8969) + (32 * _9278) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                        mem[_8977 + (32 * _8969) + 96] = (32 * _9278) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                        mem[_8977 + (32 * _8969) + (32 * _9278) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                        mem[_8977 + (32 * _8969) + (32 * _9278) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                        mem[_8977 + (32 * _8969) + 128] = 2
                        return memory
                          from mem[64]
                           len _8977 + (32 * _8969) + (32 * _9278) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
                    _9279 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8977 + (32 * _8969) + 192 len 32 * _9279] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9279]
                    mem[_8977 + (32 * _8969) + 64] = (32 * _9279) + 160
                    mem[_8977 + (32 * _8969) + (32 * _9279) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                    mem[_8977 + (32 * _8969) + (32 * _9279) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                    mem[_8977 + (32 * _8969) + 96] = (32 * _9279) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                    mem[_8977 + (32 * _8969) + (32 * _9279) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                    mem[_8977 + (32 * _8969) + (32 * _9279) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                    mem[_8977 + (32 * _8969) + 128] = 3
                    return memory
                      from mem[64]
                       len _8977 + (32 * _8969) + (32 * _9279) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
                mem[_8977 + 32 len 32 * _8969] = call.data[calldata.size len 32 * _8969]
                require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                require mem[_8977] - 1 < mem[_8977]
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256]:
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8977 + (32 * _8969) + 32] = 128
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_8977] - 1) + _8977 + 32]:
                        _9322 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_8977 + (32 * _8969) + 192 len 32 * _9322] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9322]
                        var108001 = _9322
                        mem[_8977 + (32 * _8969) + 64] = (32 * _9322) + 160
                        mem[_8977 + (32 * _8969) + (32 * _9322) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                        mem[_8977 + (32 * _8969) + (32 * _9322) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                        mem[_8977 + (32 * _8969) + 96] = (32 * _9322) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                        mem[_8977 + (32 * _8969) + (32 * _9322) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                        mem[_8977 + (32 * _8969) + (32 * _9322) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                        mem[_8977 + (32 * _8969) + 128] = 1
                        return memory
                          from mem[64]
                           len _8977 + (32 * _8969) + (32 * _9322) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
                    _9323 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8977 + (32 * _8969) + 192 len 32 * _9323] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9323]
                    var108001 = _9323
                    mem[_8977 + (32 * _8969) + 64] = (32 * _9323) + 160
                    mem[_8977 + (32 * _8969) + (32 * _9323) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                    mem[_8977 + (32 * _8969) + (32 * _9323) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                    mem[_8977 + (32 * _8969) + 96] = (32 * _9323) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                    mem[_8977 + (32 * _8969) + (32 * _9323) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                    mem[_8977 + (32 * _8969) + (32 * _9323) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                    mem[_8977 + (32 * _8969) + 128] = 3
                    return memory
                      from mem[64]
                       len _8977 + (32 * _8969) + (32 * _9323) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
                require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
                mem[_8977 + (32 * _8969) + 32] = 128
                if mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] >= mem[(32 * mem[_8977] - 1) + _8977 + 32]:
                    _9324 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_8977 + (32 * _8969) + 192 len 32 * _9324] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9324]
                    var108001 = _9324
                    mem[_8977 + (32 * _8969) + 64] = (32 * _9324) + 160
                    mem[_8977 + (32 * _8969) + (32 * _9324) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                    mem[_8977 + (32 * _8969) + (32 * _9324) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                    mem[_8977 + (32 * _8969) + 96] = (32 * _9324) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                    mem[_8977 + (32 * _8969) + (32 * _9324) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                    mem[_8977 + (32 * _8969) + (32 * _9324) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                    mem[_8977 + (32 * _8969) + 128] = 2
                    return memory
                      from mem[64]
                       len _8977 + (32 * _8969) + (32 * _9324) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
                _9325 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_8977 + (32 * _8969) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_8977 + (32 * _8969) + 192 len 32 * _9325] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _9325]
                var108001 = _9325
                mem[_8977 + (32 * _8969) + 64] = (32 * _9325) + 160
                mem[_8977 + (32 * _8969) + (32 * _9325) + 192] = 0, Mask(224, 32, cd[4]) >> 32
                mem[_8977 + (32 * _8969) + (32 * _9325) + 224 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                mem[_8977 + (32 * _8969) + 96] = (32 * _9325) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                mem[_8977 + (32 * _8969) + (32 * _9325) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224] = mem[_8977]
                mem[_8977 + (32 * _8969) + (32 * _9325) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 256 len 32 * mem[_8977]] = mem[_8977 + 32 len 32 * mem[_8977]]
                mem[_8977 + (32 * _8969) + 128] = 3
                return memory
                  from mem[64]
                   len _8977 + (32 * _8969) + (32 * _9325) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + (32 * mem[_8977]) + -mem[64] + 256
            _8964 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8978 = mem[_8964]
            require mem[_8964] <= test266151307()
            require _8964 + mem[_8964] + 31 < _8964 + return_data.size
            _8987 = mem[_8964 + mem[_8964]]
            require mem[_8964 + mem[_8964]] <= test266151307()
            require (32 * mem[_8964 + mem[_8964]]) + 32 >= 0 and _8964 + ceil32(return_data.size) + (32 * mem[_8964 + mem[_8964]]) + 32 <= test266151307()
            mem[64] = _8964 + ceil32(return_data.size) + (32 * mem[_8964 + mem[_8964]]) + 32
            mem[_8964 + ceil32(return_data.size)] = _8987
            require return_data.size >= _8978 + (32 * _8987) + 32
            mem[_8964 + ceil32(return_data.size) + 32 len 32 * _8987] = mem[_8964 + _8978 + 32 len 32 * _8987]
            require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            require _8987 - 1 < _8987
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256]:
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64]] = 128
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * _8987 - 1) + _8964 + ceil32(return_data.size) + 32]:
                    _10894 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[mem[64] + 160 len 32 * _10894] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10894]
                    mem[mem[64] + 32] = (32 * _10894) + 160
                    mem[mem[64] + (32 * _10894) + 160] = 0, Mask(224, 32, cd[4]) >> 32
                    mem[mem[64] + (32 * _10894) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                    mem[mem[64] + 64] = (32 * _10894) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                    mem[mem[64] + (32 * _10894) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8987
                    mem[mem[64] + (32 * _10894) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987] = mem[_8964 + ceil32(return_data.size) + 32 len 32 * _8987]
                    mem[mem[64] + 96] = 1
                    return 128, 
                           (32 * _10894) + 160,
                           (32 * _10894) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                           1,
                           mem[mem[64] + 128 len (32 * _10894) + 32],
                           0,
                           Mask(224, 32, cd[4]) >> 32,
                           mem[mem[64] + (32 * _10894) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                           _8987,
                           mem[mem[64] + (32 * _10894) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987]
                _10895 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 160 len 32 * _10895] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10895]
                mem[mem[64] + 32] = (32 * _10895) + 160
                mem[mem[64] + (32 * _10895) + 160] = 0, Mask(224, 32, cd[4]) >> 32
                mem[mem[64] + (32 * _10895) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                mem[mem[64] + 64] = (32 * _10895) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                mem[mem[64] + (32 * _10895) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8987
                mem[mem[64] + (32 * _10895) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987] = mem[_8964 + ceil32(return_data.size) + 32 len 32 * _8987]
                mem[mem[64] + 96] = 3
                return 128, 
                       (32 * _10895) + 160,
                       (32 * _10895) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                       3,
                       mem[mem[64] + 128 len (32 * _10895) + 32],
                       0,
                       Mask(224, 32, cd[4]) >> 32,
                       mem[mem[64] + (32 * _10895) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                       _8987,
                       mem[mem[64] + (32 * _10895) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987]
            require 0, Mask(224, 32, cd[4]) >> 32 - 1 < 0, Mask(224, 32, cd[4]) >> 32
            mem[mem[64]] = 128
            if mem[(32 * 0, Mask(224, 32, cd[4]) >> 32 - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256] >= mem[(32 * _8987 - 1) + _8964 + ceil32(return_data.size) + 32]:
                _10896 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 160 len 32 * _10896] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10896]
                mem[mem[64] + 32] = (32 * _10896) + 160
                mem[mem[64] + (32 * _10896) + 160] = 0, Mask(224, 32, cd[4]) >> 32
                mem[mem[64] + (32 * _10896) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
                mem[mem[64] + 64] = (32 * _10896) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
                mem[mem[64] + (32 * _10896) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8987
                mem[mem[64] + (32 * _10896) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987] = mem[_8964 + ceil32(return_data.size) + 32 len 32 * _8987]
                mem[mem[64] + 96] = 2
                return 128, 
                       (32 * _10896) + 160,
                       (32 * _10896) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                       2,
                       mem[mem[64] + 128 len (32 * _10896) + 32],
                       0,
                       Mask(224, 32, cd[4]) >> 32,
                       mem[mem[64] + (32 * _10896) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                       _8987,
                       mem[mem[64] + (32 * _10896) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987]
            _10897 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 160 len 32 * _10897] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10897]
            mem[mem[64] + 32] = (32 * _10897) + 160
            mem[mem[64] + (32 * _10897) + 160] = 0, Mask(224, 32, cd[4]) >> 32
            mem[mem[64] + (32 * _10897) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 256 len 32 * 0, Mask(224, 32, cd[4]) >> 32]
            mem[mem[64] + 64] = (32 * _10897) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192
            mem[mem[64] + (32 * _10897) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192] = _8987
            mem[mem[64] + (32 * _10897) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987] = mem[_8964 + ceil32(return_data.size) + 32 len 32 * _8987]
            mem[mem[64] + 96] = 3
            return 128, 
                   (32 * _10897) + 160,
                   (32 * _10897) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 192,
                   3,
                   mem[mem[64] + 128 len (32 * _10897) + 32],
                   0,
                   Mask(224, 32, cd[4]) >> 32,
                   mem[mem[64] + (32 * _10897) + 192 len 32 * 0, Mask(224, 32, cd[4]) >> 32],
                   _8987,
                   mem[mem[64] + (32 * _10897) + (32 * 0, Mask(224, 32, cd[4]) >> 32) + 224 len 32 * _8987]
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224
        require return_data.size >= 32
        _7482 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32
        require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32 <= test266151307()
        require (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32 + 255 < (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + return_data.size + 224
        _7485 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32 + 224]
        require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32 + 224] <= test266151307()
        require (32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32 + 224]) + 32 >= 0 and (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + (32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32 + 224]) + 256 <= test266151307()
        mem[64] = (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + (32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 4], Mask(224, 32, cd[4]) >> 32 + 224]) + 256
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] = _7485
        require return_data.size >= _7482 + (32 * _7485) + 32
        mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _7485] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + _7482 + 256 len 32 * _7485]
        mem[mem[64]] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = cd[4]
        mem[mem[64] + 36] = 96
        _8988 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
        mem[mem[64] + 100] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
        idx = 0
        s = mem[64] + 132
        t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
        while idx < _8988:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[mem[64] + 68] = cd[132]
        require ext_code.size(this.address)
        staticcall this.address.0xb6eacc9d with:
                gas gas_remaining wei
               args cd[4], 96, cd[132], mem[mem[64] + 100 len (32 * _8988) + 32]
        if not ext_call.success:
            _10515 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
            _10528 = mem[64]
            mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            mem[64] = mem[64] + (32 * _10515) + 32
            if not _10515:
                require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1 < mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                require mem[_10528] - 1 < mem[_10528]
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256]:
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10528 + (32 * _10515) + 32] = 128
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_10528] - 1) + _10528 + 32]:
                        _10967 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                        mem[_10528 + (32 * _10515) + 192 len 32 * _10967] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10967]
                        mem[_10528 + (32 * _10515) + 64] = (32 * _10967) + 160
                        _11737 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                        mem[_10528 + (32 * _10515) + (32 * _10967) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                        mem[_10528 + (32 * _10515) + (32 * _10967) + 224 len 32 * _11737] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11737]
                        mem[_10528 + (32 * _10515) + 96] = (32 * _10967) + (32 * _11737) + 192
                        mem[_10528 + (32 * _10515) + (32 * _10967) + (32 * _11737) + 224] = mem[_10528]
                        mem[_10528 + (32 * _10515) + (32 * _10967) + (32 * _11737) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
                        mem[_10528 + (32 * _10515) + 128] = 1
                        return memory
                          from mem[64]
                           len _10528 + (32 * _10515) + (32 * _10967) + (32 * _11737) + (32 * mem[_10528]) + -mem[64] + 256
                    _10968 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10528 + (32 * _10515) + 192 len 32 * _10968] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10968]
                    mem[_10528 + (32 * _10515) + 64] = (32 * _10968) + 160
                    _11738 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                    mem[_10528 + (32 * _10515) + (32 * _10968) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                    mem[_10528 + (32 * _10515) + (32 * _10968) + 224 len 32 * _11738] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11738]
                    mem[_10528 + (32 * _10515) + 96] = (32 * _10968) + (32 * _11738) + 192
                    mem[_10528 + (32 * _10515) + (32 * _10968) + (32 * _11738) + 224] = mem[_10528]
                    mem[_10528 + (32 * _10515) + (32 * _10968) + (32 * _11738) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
                    mem[_10528 + (32 * _10515) + 128] = 3
                    return memory
                      from mem[64]
                       len _10528 + (32 * _10515) + (32 * _10968) + (32 * _11738) + (32 * mem[_10528]) + -mem[64] + 256
                require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1 < mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[_10528 + (32 * _10515) + 32] = 128
                if mem[(32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256] >= mem[(32 * mem[_10528] - 1) + _10528 + 32]:
                    _10969 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10528 + (32 * _10515) + 192 len 32 * _10969] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10969]
                    mem[_10528 + (32 * _10515) + 64] = (32 * _10969) + 160
                    _11739 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                    mem[_10528 + (32 * _10515) + (32 * _10969) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                    mem[_10528 + (32 * _10515) + (32 * _10969) + 224 len 32 * _11739] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11739]
                    mem[_10528 + (32 * _10515) + 96] = (32 * _10969) + (32 * _11739) + 192
                    mem[_10528 + (32 * _10515) + (32 * _10969) + (32 * _11739) + 224] = mem[_10528]
                    mem[_10528 + (32 * _10515) + (32 * _10969) + (32 * _11739) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
                    mem[_10528 + (32 * _10515) + 128] = 2
                    return memory
                      from mem[64]
                       len _10528 + (32 * _10515) + (32 * _10969) + (32 * _11739) + (32 * mem[_10528]) + -mem[64] + 256
                _10970 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10528 + (32 * _10515) + 192 len 32 * _10970] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _10970]
                mem[_10528 + (32 * _10515) + 64] = (32 * _10970) + 160
                _11740 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[_10528 + (32 * _10515) + (32 * _10970) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[_10528 + (32 * _10515) + (32 * _10970) + 224 len 32 * _11740] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11740]
                mem[_10528 + (32 * _10515) + 96] = (32 * _10970) + (32 * _11740) + 192
                mem[_10528 + (32 * _10515) + (32 * _10970) + (32 * _11740) + 224] = mem[_10528]
                mem[_10528 + (32 * _10515) + (32 * _10970) + (32 * _11740) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
                mem[_10528 + (32 * _10515) + 128] = 3
                return memory
                  from mem[64]
                   len _10528 + (32 * _10515) + (32 * _10970) + (32 * _11740) + (32 * mem[_10528]) + -mem[64] + 256
            mem[_10528 + 32 len 32 * _10515] = call.data[calldata.size len 32 * _10515]
            require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1 < mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            require mem[_10528] - 1 < mem[_10528]
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256]:
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10528 + (32 * _10515) + 32] = 128
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] >= mem[(32 * mem[_10528] - 1) + _10528 + 32]:
                    _11013 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                    mem[_10528 + (32 * _10515) + 192 len 32 * _11013] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11013]
                    mem[_10528 + (32 * _10515) + 64] = (32 * _11013) + 160
                    _11741 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                    mem[_10528 + (32 * _10515) + (32 * _11013) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                    mem[_10528 + (32 * _10515) + (32 * _11013) + 224 len 32 * _11741] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11741]
                    mem[_10528 + (32 * _10515) + 96] = (32 * _11013) + (32 * _11741) + 192
                    mem[_10528 + (32 * _10515) + (32 * _11013) + (32 * _11741) + 224] = mem[_10528]
                    mem[_10528 + (32 * _10515) + (32 * _11013) + (32 * _11741) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
                    mem[_10528 + (32 * _10515) + 128] = 1
                    return memory
                      from mem[64]
                       len _10528 + (32 * _10515) + (32 * _11013) + (32 * _11741) + (32 * mem[_10528]) + -mem[64] + 256
                _11014 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10528 + (32 * _10515) + 192 len 32 * _11014] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11014]
                mem[_10528 + (32 * _10515) + 64] = (32 * _11014) + 160
                _11742 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[_10528 + (32 * _10515) + (32 * _11014) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[_10528 + (32 * _10515) + (32 * _11014) + 224 len 32 * _11742] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11742]
                mem[_10528 + (32 * _10515) + 96] = (32 * _11014) + (32 * _11742) + 192
                mem[_10528 + (32 * _10515) + (32 * _11014) + (32 * _11742) + 224] = mem[_10528]
                mem[_10528 + (32 * _10515) + (32 * _11014) + (32 * _11742) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
                mem[_10528 + (32 * _10515) + 128] = 3
                return memory
                  from mem[64]
                   len _10528 + (32 * _10515) + (32 * _11014) + (32 * _11742) + (32 * mem[_10528]) + -mem[64] + 256
            require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1 < mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[_10528 + (32 * _10515) + 32] = 128
            if mem[(32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256] >= mem[(32 * mem[_10528] - 1) + _10528 + 32]:
                _11015 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[_10528 + (32 * _10515) + 192 len 32 * _11015] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11015]
                mem[_10528 + (32 * _10515) + 64] = (32 * _11015) + 160
                _11743 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[_10528 + (32 * _10515) + (32 * _11015) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[_10528 + (32 * _10515) + (32 * _11015) + 224 len 32 * _11743] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11743]
                mem[_10528 + (32 * _10515) + 96] = (32 * _11015) + (32 * _11743) + 192
                mem[_10528 + (32 * _10515) + (32 * _11015) + (32 * _11743) + 224] = mem[_10528]
                mem[_10528 + (32 * _10515) + (32 * _11015) + (32 * _11743) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
                mem[_10528 + (32 * _10515) + 128] = 2
                return memory
                  from mem[64]
                   len _10528 + (32 * _10515) + (32 * _11015) + (32 * _11743) + (32 * mem[_10528]) + -mem[64] + 256
            _11016 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[_10528 + (32 * _10515) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[_10528 + (32 * _10515) + 192 len 32 * _11016] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _11016]
            mem[_10528 + (32 * _10515) + 64] = (32 * _11016) + 160
            _11744 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[_10528 + (32 * _10515) + (32 * _11016) + 192] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[_10528 + (32 * _10515) + (32 * _11016) + 224 len 32 * _11744] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _11744]
            mem[_10528 + (32 * _10515) + 96] = (32 * _11016) + (32 * _11744) + 192
            mem[_10528 + (32 * _10515) + (32 * _11016) + (32 * _11744) + 224] = mem[_10528]
            mem[_10528 + (32 * _10515) + (32 * _11016) + (32 * _11744) + 256 len 32 * mem[_10528]] = mem[_10528 + 32 len 32 * mem[_10528]]
            mem[_10528 + (32 * _10515) + 128] = 3
            return memory
              from mem[64]
               len _10528 + (32 * _10515) + (32 * _11016) + (32 * _11744) + (32 * mem[_10528]) + -mem[64] + 256
        _10479 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _10529 = mem[_10479]
        require mem[_10479] <= test266151307()
        require _10479 + mem[_10479] + 31 < _10479 + return_data.size
        _10584 = mem[_10479 + mem[_10479]]
        require mem[_10479 + mem[_10479]] <= test266151307()
        require (32 * mem[_10479 + mem[_10479]]) + 32 >= 0 and _10479 + ceil32(return_data.size) + (32 * mem[_10479 + mem[_10479]]) + 32 <= test266151307()
        mem[64] = _10479 + ceil32(return_data.size) + (32 * mem[_10479 + mem[_10479]]) + 32
        mem[_10479 + ceil32(return_data.size)] = _10584
        require return_data.size >= _10529 + (32 * _10584) + 32
        mem[_10479 + ceil32(return_data.size) + 32 len 32 * _10584] = mem[_10479 + _10529 + 32 len 32 * _10584]
        require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1 < mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
        require _10584 - 1 < _10584
        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] < mem[(32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256]:
            require mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1 < mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[mem[64]] = 128
            if mem[(32 * mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] - 1) + (64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256] >= mem[(32 * _10584 - 1) + _10479 + ceil32(return_data.size) + 32]:
                _12154 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
                mem[mem[64] + 160 len 32 * _12154] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12154]
                mem[mem[64] + 32] = (32 * _12154) + 160
                _12549 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[mem[64] + (32 * _12154) + 160] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
                mem[mem[64] + (32 * _12154) + 192 len 32 * _12549] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _12549]
                mem[mem[64] + 64] = (32 * _12154) + (32 * _12549) + 192
                mem[mem[64] + (32 * _12154) + (32 * _12549) + 192] = _10584
                mem[mem[64] + (32 * _12154) + (32 * _12549) + 224 len 32 * _10584] = mem[_10479 + ceil32(return_data.size) + 32 len 32 * _10584]
                mem[mem[64] + 96] = 2
                return Array(len=mem[mem[64] + 128 len (32 * _12154) + (32 * _12549) + 64], data=_10584, mem[mem[64] + (32 * _12154) + (32 * _12549) + 224 len 32 * _10584]), 
                       (32 * _12154) + 160,
                       (32 * _12154) + (32 * _12549) + 192,
                       2
            _12155 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 160 len 32 * _12155] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12155]
            mem[mem[64] + 32] = (32 * _12155) + 160
            _12550 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[mem[64] + (32 * _12155) + 160] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[mem[64] + (32 * _12155) + 192 len 32 * _12550] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _12550]
            mem[mem[64] + 64] = (32 * _12155) + (32 * _12550) + 192
            mem[mem[64] + (32 * _12155) + (32 * _12550) + 192] = _10584
            mem[mem[64] + (32 * _12155) + (32 * _12550) + 224 len 32 * _10584] = mem[_10479 + ceil32(return_data.size) + 32 len 32 * _10584]
            mem[mem[64] + 96] = 3
            return Array(len=mem[mem[64] + 128 len (32 * _12155) + (32 * _12550) + 64], data=_10584, mem[mem[64] + (32 * _12155) + (32 * _12550) + 224 len 32 * _10584]), 
                   (32 * _12155) + 160,
                   (32 * _12155) + (32 * _12550) + 192,
                   3
        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224] < mem[(32 * _10584 - 1) + _10479 + ceil32(return_data.size) + 32]:
            mem[mem[64]] = 128
            _12153 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
            mem[mem[64] + 160 len 32 * _12153] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12153]
            mem[mem[64] + 32] = (32 * _12153) + 160
            _12548 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[mem[64] + (32 * _12153) + 160] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
            mem[mem[64] + (32 * _12153) + 192 len 32 * _12548] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _12548]
            mem[mem[64] + 64] = (32 * _12153) + (32 * _12548) + 192
            mem[mem[64] + (32 * _12153) + (32 * _12548) + 192] = _10584
            mem[mem[64] + (32 * _12153) + (32 * _12548) + 224 len 32 * _10584] = mem[_10479 + ceil32(return_data.size) + 32 len 32 * _10584]
            mem[mem[64] + 96] = 3
            return Array(len=mem[mem[64] + 128 len (32 * _12153) + (32 * _12548) + 64], data=_10584, mem[mem[64] + (32 * _12153) + (32 * _12548) + 224 len 32 * _10584]), 
                   (32 * _12153) + 160,
                   (32 * _12153) + (32 * _12548) + 192,
                   3
        _12136 = mem[64]
        mem[mem[64]] = 128
        _12152 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192]
        mem[mem[64] + 160 len 32 * _12152] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 224 len 32 * _12152]
        mem[mem[64] + 32] = (32 * _12152) + 160
        _12547 = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
        mem[mem[64] + (32 * _12152) + 160] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224]
        mem[mem[64] + (32 * _12152) + 192 len 32 * _12547] = mem[(64 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 256 len 32 * _12547]
        mem[mem[64] + 64] = (32 * _12152) + (32 * _12547) + 192
        mem[_12136 + (32 * _12152) + (32 * _12547) + 192] = _10584
        mem[_12136 + (32 * _12152) + (32 * _12547) + 224 len 32 * _10584] = mem[_10479 + ceil32(return_data.size) + 32 len 32 * _10584]
        mem[_12136 + 96] = 1
        return memory
          from mem[64]
           len _12136 + (32 * _12152) + (32 * _12547) + (32 * _10584) + -mem[64] + 224
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192
    require return_data.size >= 32
    _5984 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32
    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32 <= test266151307()
    require (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32 + 223 < (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + return_data.size + 192
    _5985 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32 + 192]
    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32 + 192] <= test266151307()
    require (32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32 + 192]) + 32 >= 0 and (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + (32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32 + 192]) + 224 <= test266151307()
    mem[64] = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + (32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + 192 len 4], Mask(224, 32, cd[4]) >> 32 + 192]) + 224
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] = _5985
    require return_data.size >= _5984 + (32 * _5985) + 32
    mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _5985] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + _5984 + 224 len 32 * _5985]
    mem[mem[64]] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[4]
    mem[mem[64] + 36] = 96
    mem[mem[64] + 100] = ('cd', 68).length
    idx = 0
    s = mem[64] + 132
    t = (32 * ('cd', 36).length) + 160
    while idx < ('cd', 68).length:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[mem[64] + 68] = cd[132]
    require ext_code.size(this.address)
    staticcall this.address.0xb6eacc9d with:
            gas gas_remaining wei
           args cd[4], Array(len=('cd', 68).length, data=mem[mem[64] + 132 len 32 * ('cd', 68).length]), cd[132]
    if not ext_call.success:
        _8970 = mem[(32 * ('cd', 36).length) + 128]
        require mem[(32 * ('cd', 36).length) + 128] <= test266151307()
        _8979 = mem[64]
        mem[64] = mem[64] + (32 * mem[(32 * ('cd', 36).length) + 128]) + 32
        if not mem[(32 * ('cd', 36).length) + 128]:
            mem[_8979 + (32 * mem[(32 * ('cd', 36).length) + 128]) + 32] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
            mem[_8979 + (32 * _8970) + 36] = cd[4]
            mem[_8979 + (32 * _8970) + 68] = 96
            _9039 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            mem[_8979 + (32 * _8970) + 132] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            idx = 0
            s = _8979 + (32 * _8970) + 164
            t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
            while idx < _9039:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[_8979 + (32 * _8970) + 100] = cd[132]
            require ext_code.size(this.address)
            staticcall this.address.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _8979 + (32 * _8970) + (32 * _9039) + -mem[64] + 160]
            if not ext_call.success:
                _10516 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
                _10530 = mem[64]
                mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
                mem[64] = mem[64] + (32 * _10516) + 32
                if not _10516:
                    require mem[_8979] - 1 < mem[_8979]
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    require mem[_10530] - 1 < mem[_10530]
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8979] - 1) + _8979 + 32]:
                        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10530 + (32 * _10516) + 32] = 128
                        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_10530] - 1) + _10530 + 32]:
                            _10974 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                            mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                            mem[_10530 + (32 * _10516) + 192 len 32 * _10974] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10974]
                            mem[_10530 + (32 * _10516) + 64] = (32 * _10974) + 160
                            _11745 = mem[_8979]
                            mem[_10530 + (32 * _10516) + (32 * _10974) + 192] = mem[_8979]
                            mem[_10530 + (32 * _10516) + (32 * _10974) + 224 len 32 * _11745] = mem[_8979 + 32 len 32 * _11745]
                            mem[_10530 + (32 * _10516) + 96] = (32 * _10974) + (32 * _11745) + 192
                            mem[_10530 + (32 * _10516) + (32 * _10974) + (32 * _11745) + 224] = mem[_10530]
                            mem[_10530 + (32 * _10516) + (32 * _10974) + (32 * _11745) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                            mem[_10530 + (32 * _10516) + 128] = 1
                            return memory
                              from mem[64]
                               len _10530 + (32 * _10516) + (32 * _10974) + (32 * _11745) + (32 * mem[_10530]) + -mem[64] + 256
                        _10975 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10530 + (32 * _10516) + 192 len 32 * _10975] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10975]
                        mem[_10530 + (32 * _10516) + 64] = (32 * _10975) + 160
                        _11746 = mem[_8979]
                        mem[_10530 + (32 * _10516) + (32 * _10975) + 192] = mem[_8979]
                        mem[_10530 + (32 * _10516) + (32 * _10975) + 224 len 32 * _11746] = mem[_8979 + 32 len 32 * _11746]
                        mem[_10530 + (32 * _10516) + 96] = (32 * _10975) + (32 * _11746) + 192
                        mem[_10530 + (32 * _10516) + (32 * _10975) + (32 * _11746) + 224] = mem[_10530]
                        mem[_10530 + (32 * _10516) + (32 * _10975) + (32 * _11746) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                        mem[_10530 + (32 * _10516) + 128] = 3
                        return memory
                          from mem[64]
                           len _10530 + (32 * _10516) + (32 * _10975) + (32 * _11746) + (32 * mem[_10530]) + -mem[64] + 256
                    require mem[_8979] - 1 < mem[_8979]
                    mem[_10530 + (32 * _10516) + 32] = 128
                    if mem[(32 * mem[_8979] - 1) + _8979 + 32] >= mem[(32 * mem[_10530] - 1) + _10530 + 32]:
                        _10976 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10530 + (32 * _10516) + 192 len 32 * _10976] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10976]
                        mem[_10530 + (32 * _10516) + 64] = (32 * _10976) + 160
                        _11747 = mem[_8979]
                        mem[_10530 + (32 * _10516) + (32 * _10976) + 192] = mem[_8979]
                        mem[_10530 + (32 * _10516) + (32 * _10976) + 224 len 32 * _11747] = mem[_8979 + 32 len 32 * _11747]
                        mem[_10530 + (32 * _10516) + 96] = (32 * _10976) + (32 * _11747) + 192
                        mem[_10530 + (32 * _10516) + (32 * _10976) + (32 * _11747) + 224] = mem[_10530]
                        mem[_10530 + (32 * _10516) + (32 * _10976) + (32 * _11747) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                        mem[_10530 + (32 * _10516) + 128] = 2
                        return memory
                          from mem[64]
                           len _10530 + (32 * _10516) + (32 * _10976) + (32 * _11747) + (32 * mem[_10530]) + -mem[64] + 256
                    _10977 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10530 + (32 * _10516) + 192 len 32 * _10977] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10977]
                    mem[_10530 + (32 * _10516) + 64] = (32 * _10977) + 160
                    _11748 = mem[_8979]
                    mem[_10530 + (32 * _10516) + (32 * _10977) + 192] = mem[_8979]
                    mem[_10530 + (32 * _10516) + (32 * _10977) + 224 len 32 * _11748] = mem[_8979 + 32 len 32 * _11748]
                    mem[_10530 + (32 * _10516) + 96] = (32 * _10977) + (32 * _11748) + 192
                    mem[_10530 + (32 * _10516) + (32 * _10977) + (32 * _11748) + 224] = mem[_10530]
                    mem[_10530 + (32 * _10516) + (32 * _10977) + (32 * _11748) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                    mem[_10530 + (32 * _10516) + 128] = 3
                    return memory
                      from mem[64]
                       len _10530 + (32 * _10516) + (32 * _10977) + (32 * _11748) + (32 * mem[_10530]) + -mem[64] + 256
                mem[_10530 + 32 len 32 * _10516] = call.data[calldata.size len 32 * _10516]
                require mem[_8979] - 1 < mem[_8979]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                require mem[_10530] - 1 < mem[_10530]
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8979] - 1) + _8979 + 32]:
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10530 + (32 * _10516) + 32] = 128
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_10530] - 1) + _10530 + 32]:
                        _11018 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10530 + (32 * _10516) + 192 len 32 * _11018] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11018]
                        mem[_10530 + (32 * _10516) + 64] = (32 * _11018) + 160
                        _11749 = mem[_8979]
                        mem[_10530 + (32 * _10516) + (32 * _11018) + 192] = mem[_8979]
                        mem[_10530 + (32 * _10516) + (32 * _11018) + 224 len 32 * _11749] = mem[_8979 + 32 len 32 * _11749]
                        mem[_10530 + (32 * _10516) + 96] = (32 * _11018) + (32 * _11749) + 192
                        mem[_10530 + (32 * _10516) + (32 * _11018) + (32 * _11749) + 224] = mem[_10530]
                        mem[_10530 + (32 * _10516) + (32 * _11018) + (32 * _11749) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                        mem[_10530 + (32 * _10516) + 128] = 1
                        return memory
                          from mem[64]
                           len _10530 + (32 * _10516) + (32 * _11018) + (32 * _11749) + (32 * mem[_10530]) + -mem[64] + 256
                    _11019 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10530 + (32 * _10516) + 192 len 32 * _11019] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11019]
                    mem[_10530 + (32 * _10516) + 64] = (32 * _11019) + 160
                    _11750 = mem[_8979]
                    mem[_10530 + (32 * _10516) + (32 * _11019) + 192] = mem[_8979]
                    mem[_10530 + (32 * _10516) + (32 * _11019) + 224 len 32 * _11750] = mem[_8979 + 32 len 32 * _11750]
                    mem[_10530 + (32 * _10516) + 96] = (32 * _11019) + (32 * _11750) + 192
                    mem[_10530 + (32 * _10516) + (32 * _11019) + (32 * _11750) + 224] = mem[_10530]
                    mem[_10530 + (32 * _10516) + (32 * _11019) + (32 * _11750) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                    mem[_10530 + (32 * _10516) + 128] = 3
                    return memory
                      from mem[64]
                       len _10530 + (32 * _10516) + (32 * _11019) + (32 * _11750) + (32 * mem[_10530]) + -mem[64] + 256
                require mem[_8979] - 1 < mem[_8979]
                mem[_10530 + (32 * _10516) + 32] = 128
                if mem[(32 * mem[_8979] - 1) + _8979 + 32] >= mem[(32 * mem[_10530] - 1) + _10530 + 32]:
                    _11020 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10530 + (32 * _10516) + 192 len 32 * _11020] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11020]
                    mem[_10530 + (32 * _10516) + 64] = (32 * _11020) + 160
                    _11751 = mem[_8979]
                    mem[_10530 + (32 * _10516) + (32 * _11020) + 192] = mem[_8979]
                    mem[_10530 + (32 * _10516) + (32 * _11020) + 224 len 32 * _11751] = mem[_8979 + 32 len 32 * _11751]
                    mem[_10530 + (32 * _10516) + 96] = (32 * _11020) + (32 * _11751) + 192
                    mem[_10530 + (32 * _10516) + (32 * _11020) + (32 * _11751) + 224] = mem[_10530]
                    mem[_10530 + (32 * _10516) + (32 * _11020) + (32 * _11751) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                    mem[_10530 + (32 * _10516) + 128] = 2
                    return memory
                      from mem[64]
                       len _10530 + (32 * _10516) + (32 * _11020) + (32 * _11751) + (32 * mem[_10530]) + -mem[64] + 256
                _11021 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10530 + (32 * _10516) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10530 + (32 * _10516) + 192 len 32 * _11021] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11021]
                mem[_10530 + (32 * _10516) + 64] = (32 * _11021) + 160
                _11752 = mem[_8979]
                mem[_10530 + (32 * _10516) + (32 * _11021) + 192] = mem[_8979]
                mem[_10530 + (32 * _10516) + (32 * _11021) + 224 len 32 * _11752] = mem[_8979 + 32 len 32 * _11752]
                mem[_10530 + (32 * _10516) + 96] = (32 * _11021) + (32 * _11752) + 192
                mem[_10530 + (32 * _10516) + (32 * _11021) + (32 * _11752) + 224] = mem[_10530]
                mem[_10530 + (32 * _10516) + (32 * _11021) + (32 * _11752) + 256 len 32 * mem[_10530]] = mem[_10530 + 32 len 32 * mem[_10530]]
                mem[_10530 + (32 * _10516) + 128] = 3
                return memory
                  from mem[64]
                   len _10530 + (32 * _10516) + (32 * _11021) + (32 * _11752) + (32 * mem[_10530]) + -mem[64] + 256
            _10480 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _10531 = mem[_10480]
            require mem[_10480] <= test266151307()
            require _10480 + mem[_10480] + 31 < _10480 + return_data.size
            _10585 = mem[_10480 + mem[_10480]]
            require mem[_10480 + mem[_10480]] <= test266151307()
            require (32 * mem[_10480 + mem[_10480]]) + 32 >= 0 and _10480 + ceil32(return_data.size) + (32 * mem[_10480 + mem[_10480]]) + 32 <= test266151307()
            mem[64] = _10480 + ceil32(return_data.size) + (32 * mem[_10480 + mem[_10480]]) + 32
            mem[_10480 + ceil32(return_data.size)] = _10585
            require return_data.size >= _10531 + (32 * _10585) + 32
            mem[_10480 + ceil32(return_data.size) + 32 len 32 * _10585] = mem[_10480 + _10531 + 32 len 32 * _10585]
            require mem[_8979] - 1 < mem[_8979]
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            require _10585 - 1 < _10585
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8979] - 1) + _8979 + 32]:
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[mem[64]] = 128
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * _10585 - 1) + _10480 + ceil32(return_data.size) + 32]:
                    _12156 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[mem[64] + 160 len 32 * _12156] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12156]
                    mem[mem[64] + 32] = (32 * _12156) + 160
                    _12559 = mem[_8979]
                    mem[mem[64] + (32 * _12156) + 160] = mem[_8979]
                    mem[mem[64] + (32 * _12156) + 192 len 32 * _12559] = mem[_8979 + 32 len 32 * _12559]
                    mem[mem[64] + 64] = (32 * _12156) + (32 * _12559) + 192
                    mem[mem[64] + (32 * _12156) + (32 * _12559) + 192] = _10585
                    mem[mem[64] + (32 * _12156) + (32 * _12559) + 224 len 32 * _10585] = mem[_10480 + ceil32(return_data.size) + 32 len 32 * _10585]
                    mem[mem[64] + 96] = 1
                    return Array(len=mem[mem[64] + 128 len (32 * _12156) + (32 * _12559) + 64], data=_10585, mem[mem[64] + (32 * _12156) + (32 * _12559) + 224 len 32 * _10585]), 
                           (32 * _12156) + 160,
                           (32 * _12156) + (32 * _12559) + 192,
                           1
                _12157 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[mem[64] + 160 len 32 * _12157] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12157]
                mem[mem[64] + 32] = (32 * _12157) + 160
                _12560 = mem[_8979]
                mem[mem[64] + (32 * _12157) + 160] = mem[_8979]
                mem[mem[64] + (32 * _12157) + 192 len 32 * _12560] = mem[_8979 + 32 len 32 * _12560]
                mem[mem[64] + 64] = (32 * _12157) + (32 * _12560) + 192
                mem[mem[64] + (32 * _12157) + (32 * _12560) + 192] = _10585
                mem[mem[64] + (32 * _12157) + (32 * _12560) + 224 len 32 * _10585] = mem[_10480 + ceil32(return_data.size) + 32 len 32 * _10585]
                mem[mem[64] + 96] = 3
                return Array(len=mem[mem[64] + 128 len (32 * _12157) + (32 * _12560) + 64], data=_10585, mem[mem[64] + (32 * _12157) + (32 * _12560) + 224 len 32 * _10585]), 
                       (32 * _12157) + 160,
                       (32 * _12157) + (32 * _12560) + 192,
                       3
            require mem[_8979] - 1 < mem[_8979]
            mem[mem[64]] = 128
            if mem[(32 * mem[_8979] - 1) + _8979 + 32] >= mem[(32 * _10585 - 1) + _10480 + ceil32(return_data.size) + 32]:
                _12158 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[mem[64] + 160 len 32 * _12158] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12158]
                mem[mem[64] + 32] = (32 * _12158) + 160
                _12561 = mem[_8979]
                mem[mem[64] + (32 * _12158) + 160] = mem[_8979]
                mem[mem[64] + (32 * _12158) + 192 len 32 * _12561] = mem[_8979 + 32 len 32 * _12561]
                mem[mem[64] + 64] = (32 * _12158) + (32 * _12561) + 192
                mem[mem[64] + (32 * _12158) + (32 * _12561) + 192] = _10585
                mem[mem[64] + (32 * _12158) + (32 * _12561) + 224 len 32 * _10585] = mem[_10480 + ceil32(return_data.size) + 32 len 32 * _10585]
                mem[mem[64] + 96] = 2
                return Array(len=mem[mem[64] + 128 len (32 * _12158) + (32 * _12561) + 64], data=_10585, mem[mem[64] + (32 * _12158) + (32 * _12561) + 224 len 32 * _10585]), 
                       (32 * _12158) + 160,
                       (32 * _12158) + (32 * _12561) + 192,
                       2
            _12159 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 160 len 32 * _12159] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12159]
            mem[mem[64] + 32] = (32 * _12159) + 160
            _12562 = mem[_8979]
            mem[mem[64] + (32 * _12159) + 160] = mem[_8979]
            mem[mem[64] + (32 * _12159) + 192 len 32 * _12562] = mem[_8979 + 32 len 32 * _12562]
            mem[mem[64] + 64] = (32 * _12159) + (32 * _12562) + 192
            mem[mem[64] + (32 * _12159) + (32 * _12562) + 192] = _10585
            mem[mem[64] + (32 * _12159) + (32 * _12562) + 224 len 32 * _10585] = mem[_10480 + ceil32(return_data.size) + 32 len 32 * _10585]
            mem[mem[64] + 96] = 3
            return Array(len=mem[mem[64] + 128 len (32 * _12159) + (32 * _12562) + 64], data=_10585, mem[mem[64] + (32 * _12159) + (32 * _12562) + 224 len 32 * _10585]), 
                   (32 * _12159) + 160,
                   (32 * _12159) + (32 * _12562) + 192,
                   3
        mem[_8979 + 32 len 32 * mem[(32 * ('cd', 36).length) + 128]] = call.data[calldata.size len 32 * mem[(32 * ('cd', 36).length) + 128]]
        mem[_8979 + (32 * _8970) + 32] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
        mem[_8979 + (32 * _8970) + 36] = cd[4]
        mem[_8979 + (32 * _8970) + 68] = 96
        _9049 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
        mem[_8979 + (32 * _8970) + 132] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
        idx = 0
        s = _8979 + (32 * _8970) + 164
        t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
        while idx < _9049:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_8979 + (32 * _8970) + 100] = cd[132]
        require ext_code.size(this.address)
        staticcall this.address.mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _8979 + (32 * _8970) + (32 * _9049) + -mem[64] + 160]
        if not ext_call.success:
            _10517 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
            _10532 = mem[64]
            mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
            mem[64] = mem[64] + (32 * _10517) + 32
            if not _10517:
                require mem[_8979] - 1 < mem[_8979]
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                require mem[_10532] - 1 < mem[_10532]
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8979] - 1) + _8979 + 32]:
                    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10532 + (32 * _10517) + 32] = 128
                    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_10532] - 1) + _10532 + 32]:
                        _10981 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                        mem[_10532 + (32 * _10517) + 192 len 32 * _10981] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10981]
                        mem[_10532 + (32 * _10517) + 64] = (32 * _10981) + 160
                        _11753 = mem[_8979]
                        mem[_10532 + (32 * _10517) + (32 * _10981) + 192] = mem[_8979]
                        mem[_10532 + (32 * _10517) + (32 * _10981) + 224 len 32 * _11753] = mem[_8979 + 32 len 32 * _11753]
                        mem[_10532 + (32 * _10517) + 96] = (32 * _10981) + (32 * _11753) + 192
                        mem[_10532 + (32 * _10517) + (32 * _10981) + (32 * _11753) + 224] = mem[_10532]
                        mem[_10532 + (32 * _10517) + (32 * _10981) + (32 * _11753) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
                        mem[_10532 + (32 * _10517) + 128] = 1
                        return memory
                          from mem[64]
                           len _10532 + (32 * _10517) + (32 * _10981) + (32 * _11753) + (32 * mem[_10532]) + -mem[64] + 256
                    _10982 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10532 + (32 * _10517) + 192 len 32 * _10982] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10982]
                    mem[_10532 + (32 * _10517) + 64] = (32 * _10982) + 160
                    _11754 = mem[_8979]
                    mem[_10532 + (32 * _10517) + (32 * _10982) + 192] = mem[_8979]
                    mem[_10532 + (32 * _10517) + (32 * _10982) + 224 len 32 * _11754] = mem[_8979 + 32 len 32 * _11754]
                    mem[_10532 + (32 * _10517) + 96] = (32 * _10982) + (32 * _11754) + 192
                    mem[_10532 + (32 * _10517) + (32 * _10982) + (32 * _11754) + 224] = mem[_10532]
                    mem[_10532 + (32 * _10517) + (32 * _10982) + (32 * _11754) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
                    mem[_10532 + (32 * _10517) + 128] = 3
                    return memory
                      from mem[64]
                       len _10532 + (32 * _10517) + (32 * _10982) + (32 * _11754) + (32 * mem[_10532]) + -mem[64] + 256
                require mem[_8979] - 1 < mem[_8979]
                mem[_10532 + (32 * _10517) + 32] = 128
                if mem[(32 * mem[_8979] - 1) + _8979 + 32] >= mem[(32 * mem[_10532] - 1) + _10532 + 32]:
                    _10983 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10532 + (32 * _10517) + 192 len 32 * _10983] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10983]
                    mem[_10532 + (32 * _10517) + 64] = (32 * _10983) + 160
                    _11755 = mem[_8979]
                    mem[_10532 + (32 * _10517) + (32 * _10983) + 192] = mem[_8979]
                    mem[_10532 + (32 * _10517) + (32 * _10983) + 224 len 32 * _11755] = mem[_8979 + 32 len 32 * _11755]
                    mem[_10532 + (32 * _10517) + 96] = (32 * _10983) + (32 * _11755) + 192
                    mem[_10532 + (32 * _10517) + (32 * _10983) + (32 * _11755) + 224] = mem[_10532]
                    mem[_10532 + (32 * _10517) + (32 * _10983) + (32 * _11755) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
                    mem[_10532 + (32 * _10517) + 128] = 2
                    return memory
                      from mem[64]
                       len _10532 + (32 * _10517) + (32 * _10983) + (32 * _11755) + (32 * mem[_10532]) + -mem[64] + 256
                _10984 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10532 + (32 * _10517) + 192 len 32 * _10984] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _10984]
                mem[_10532 + (32 * _10517) + 64] = (32 * _10984) + 160
                _11756 = mem[_8979]
                mem[_10532 + (32 * _10517) + (32 * _10984) + 192] = mem[_8979]
                mem[_10532 + (32 * _10517) + (32 * _10984) + 224 len 32 * _11756] = mem[_8979 + 32 len 32 * _11756]
                mem[_10532 + (32 * _10517) + 96] = (32 * _10984) + (32 * _11756) + 192
                mem[_10532 + (32 * _10517) + (32 * _10984) + (32 * _11756) + 224] = mem[_10532]
                mem[_10532 + (32 * _10517) + (32 * _10984) + (32 * _11756) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
                mem[_10532 + (32 * _10517) + 128] = 3
                return memory
                  from mem[64]
                   len _10532 + (32 * _10517) + (32 * _10984) + (32 * _11756) + (32 * mem[_10532]) + -mem[64] + 256
            mem[_10532 + 32 len 32 * _10517] = call.data[calldata.size len 32 * _10517]
            require mem[_8979] - 1 < mem[_8979]
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            require mem[_10532] - 1 < mem[_10532]
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8979] - 1) + _8979 + 32]:
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10532 + (32 * _10517) + 32] = 128
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_10532] - 1) + _10532 + 32]:
                    _11023 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_10532 + (32 * _10517) + 192 len 32 * _11023] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11023]
                    mem[_10532 + (32 * _10517) + 64] = (32 * _11023) + 160
                    _11757 = mem[_8979]
                    mem[_10532 + (32 * _10517) + (32 * _11023) + 192] = mem[_8979]
                    mem[_10532 + (32 * _10517) + (32 * _11023) + 224 len 32 * _11757] = mem[_8979 + 32 len 32 * _11757]
                    mem[_10532 + (32 * _10517) + 96] = (32 * _11023) + (32 * _11757) + 192
                    mem[_10532 + (32 * _10517) + (32 * _11023) + (32 * _11757) + 224] = mem[_10532]
                    mem[_10532 + (32 * _10517) + (32 * _11023) + (32 * _11757) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
                    mem[_10532 + (32 * _10517) + 128] = 1
                    return memory
                      from mem[64]
                       len _10532 + (32 * _10517) + (32 * _11023) + (32 * _11757) + (32 * mem[_10532]) + -mem[64] + 256
                _11024 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10532 + (32 * _10517) + 192 len 32 * _11024] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11024]
                mem[_10532 + (32 * _10517) + 64] = (32 * _11024) + 160
                _11758 = mem[_8979]
                mem[_10532 + (32 * _10517) + (32 * _11024) + 192] = mem[_8979]
                mem[_10532 + (32 * _10517) + (32 * _11024) + 224 len 32 * _11758] = mem[_8979 + 32 len 32 * _11758]
                mem[_10532 + (32 * _10517) + 96] = (32 * _11024) + (32 * _11758) + 192
                mem[_10532 + (32 * _10517) + (32 * _11024) + (32 * _11758) + 224] = mem[_10532]
                mem[_10532 + (32 * _10517) + (32 * _11024) + (32 * _11758) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
                mem[_10532 + (32 * _10517) + 128] = 3
                return memory
                  from mem[64]
                   len _10532 + (32 * _10517) + (32 * _11024) + (32 * _11758) + (32 * mem[_10532]) + -mem[64] + 256
            require mem[_8979] - 1 < mem[_8979]
            mem[_10532 + (32 * _10517) + 32] = 128
            if mem[(32 * mem[_8979] - 1) + _8979 + 32] >= mem[(32 * mem[_10532] - 1) + _10532 + 32]:
                _11025 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_10532 + (32 * _10517) + 192 len 32 * _11025] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11025]
                mem[_10532 + (32 * _10517) + 64] = (32 * _11025) + 160
                _11759 = mem[_8979]
                mem[_10532 + (32 * _10517) + (32 * _11025) + 192] = mem[_8979]
                mem[_10532 + (32 * _10517) + (32 * _11025) + 224 len 32 * _11759] = mem[_8979 + 32 len 32 * _11759]
                mem[_10532 + (32 * _10517) + 96] = (32 * _11025) + (32 * _11759) + 192
                mem[_10532 + (32 * _10517) + (32 * _11025) + (32 * _11759) + 224] = mem[_10532]
                mem[_10532 + (32 * _10517) + (32 * _11025) + (32 * _11759) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
                mem[_10532 + (32 * _10517) + 128] = 2
                return memory
                  from mem[64]
                   len _10532 + (32 * _10517) + (32 * _11025) + (32 * _11759) + (32 * mem[_10532]) + -mem[64] + 256
            _11026 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_10532 + (32 * _10517) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_10532 + (32 * _10517) + 192 len 32 * _11026] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _11026]
            mem[_10532 + (32 * _10517) + 64] = (32 * _11026) + 160
            _11760 = mem[_8979]
            mem[_10532 + (32 * _10517) + (32 * _11026) + 192] = mem[_8979]
            mem[_10532 + (32 * _10517) + (32 * _11026) + 224 len 32 * _11760] = mem[_8979 + 32 len 32 * _11760]
            mem[_10532 + (32 * _10517) + 96] = (32 * _11026) + (32 * _11760) + 192
            mem[_10532 + (32 * _10517) + (32 * _11026) + (32 * _11760) + 224] = mem[_10532]
            mem[_10532 + (32 * _10517) + (32 * _11026) + (32 * _11760) + 256 len 32 * mem[_10532]] = mem[_10532 + 32 len 32 * mem[_10532]]
            mem[_10532 + (32 * _10517) + 128] = 3
            return memory
              from mem[64]
               len _10532 + (32 * _10517) + (32 * _11026) + (32 * _11760) + (32 * mem[_10532]) + -mem[64] + 256
        _10481 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _10533 = mem[_10481]
        require mem[_10481] <= test266151307()
        require _10481 + mem[_10481] + 31 < _10481 + return_data.size
        _10586 = mem[_10481 + mem[_10481]]
        require mem[_10481 + mem[_10481]] <= test266151307()
        require (32 * mem[_10481 + mem[_10481]]) + 32 >= 0 and _10481 + ceil32(return_data.size) + (32 * mem[_10481 + mem[_10481]]) + 32 <= test266151307()
        mem[64] = _10481 + ceil32(return_data.size) + (32 * mem[_10481 + mem[_10481]]) + 32
        mem[_10481 + ceil32(return_data.size)] = _10586
        require return_data.size >= _10533 + (32 * _10586) + 32
        mem[_10481 + ceil32(return_data.size) + 32 len 32 * _10586] = mem[_10481 + _10533 + 32 len 32 * _10586]
        require mem[_8979] - 1 < mem[_8979]
        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        require _10586 - 1 < _10586
        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8979] - 1) + _8979 + 32]:
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64]] = 128
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * _10586 - 1) + _10481 + ceil32(return_data.size) + 32]:
                _12160 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[mem[64] + 160 len 32 * _12160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12160]
                mem[mem[64] + 32] = (32 * _12160) + 160
                _12571 = mem[_8979]
                mem[mem[64] + (32 * _12160) + 160] = mem[_8979]
                mem[mem[64] + (32 * _12160) + 192 len 32 * _12571] = mem[_8979 + 32 len 32 * _12571]
                mem[mem[64] + 64] = (32 * _12160) + (32 * _12571) + 192
                mem[mem[64] + (32 * _12160) + (32 * _12571) + 192] = _10586
                mem[mem[64] + (32 * _12160) + (32 * _12571) + 224 len 32 * _10586] = mem[_10481 + ceil32(return_data.size) + 32 len 32 * _10586]
                mem[mem[64] + 96] = 1
                return Array(len=mem[mem[64] + 128 len (32 * _12160) + (32 * _12571) + 64], data=_10586, mem[mem[64] + (32 * _12160) + (32 * _12571) + 224 len 32 * _10586]), 
                       (32 * _12160) + 160,
                       (32 * _12160) + (32 * _12571) + 192,
                       1
            _12161 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 160 len 32 * _12161] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12161]
            mem[mem[64] + 32] = (32 * _12161) + 160
            _12572 = mem[_8979]
            mem[mem[64] + (32 * _12161) + 160] = mem[_8979]
            mem[mem[64] + (32 * _12161) + 192 len 32 * _12572] = mem[_8979 + 32 len 32 * _12572]
            mem[mem[64] + 64] = (32 * _12161) + (32 * _12572) + 192
            mem[mem[64] + (32 * _12161) + (32 * _12572) + 192] = _10586
            mem[mem[64] + (32 * _12161) + (32 * _12572) + 224 len 32 * _10586] = mem[_10481 + ceil32(return_data.size) + 32 len 32 * _10586]
            mem[mem[64] + 96] = 3
            return Array(len=mem[mem[64] + 128 len (32 * _12161) + (32 * _12572) + 64], data=_10586, mem[mem[64] + (32 * _12161) + (32 * _12572) + 224 len 32 * _10586]), 
                   (32 * _12161) + 160,
                   (32 * _12161) + (32 * _12572) + 192,
                   3
        require mem[_8979] - 1 < mem[_8979]
        mem[mem[64]] = 128
        if mem[(32 * mem[_8979] - 1) + _8979 + 32] >= mem[(32 * _10586 - 1) + _10481 + ceil32(return_data.size) + 32]:
            _12162 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 160 len 32 * _12162] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12162]
            mem[mem[64] + 32] = (32 * _12162) + 160
            _12573 = mem[_8979]
            mem[mem[64] + (32 * _12162) + 160] = mem[_8979]
            mem[mem[64] + (32 * _12162) + 192 len 32 * _12573] = mem[_8979 + 32 len 32 * _12573]
            mem[mem[64] + 64] = (32 * _12162) + (32 * _12573) + 192
            mem[mem[64] + (32 * _12162) + (32 * _12573) + 192] = _10586
            mem[mem[64] + (32 * _12162) + (32 * _12573) + 224 len 32 * _10586] = mem[_10481 + ceil32(return_data.size) + 32 len 32 * _10586]
            mem[mem[64] + 96] = 2
            return Array(len=mem[mem[64] + 128 len (32 * _12162) + (32 * _12573) + 64], data=_10586, mem[mem[64] + (32 * _12162) + (32 * _12573) + 224 len 32 * _10586]), 
                   (32 * _12162) + 160,
                   (32 * _12162) + (32 * _12573) + 192,
                   2
        _12163 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[mem[64] + 160 len 32 * _12163] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12163]
        mem[mem[64] + 32] = (32 * _12163) + 160
        _12574 = mem[_8979]
        mem[mem[64] + (32 * _12163) + 160] = mem[_8979]
        mem[mem[64] + (32 * _12163) + 192 len 32 * _12574] = mem[_8979 + 32 len 32 * _12574]
        mem[mem[64] + 64] = (32 * _12163) + (32 * _12574) + 192
        mem[mem[64] + (32 * _12163) + (32 * _12574) + 192] = _10586
        mem[mem[64] + (32 * _12163) + (32 * _12574) + 224 len 32 * _10586] = mem[_10481 + ceil32(return_data.size) + 32 len 32 * _10586]
        mem[mem[64] + 96] = 3
        return Array(len=mem[mem[64] + 128 len (32 * _12163) + (32 * _12574) + 64], data=_10586, mem[mem[64] + (32 * _12163) + (32 * _12574) + 224 len 32 * _10586]), 
               (32 * _12163) + 160,
               (32 * _12163) + (32 * _12574) + 192,
               3
    _8965 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _8980 = mem[_8965]
    require mem[_8965] <= test266151307()
    require _8965 + mem[_8965] + 31 < _8965 + return_data.size
    _8989 = mem[_8965 + mem[_8965]]
    require mem[_8965 + mem[_8965]] <= test266151307()
    require (32 * mem[_8965 + mem[_8965]]) + 32 >= 0 and _8965 + ceil32(return_data.size) + (32 * mem[_8965 + mem[_8965]]) + 32 <= test266151307()
    mem[64] = _8965 + ceil32(return_data.size) + (32 * mem[_8965 + mem[_8965]]) + 32
    mem[_8965 + ceil32(return_data.size)] = _8989
    require return_data.size >= _8980 + (32 * _8989) + 32
    mem[_8965 + ceil32(return_data.size) + 32 len 32 * _8989] = mem[_8965 + _8980 + 32 len 32 * _8989]
    _10578 = mem[64]
    mem[mem[64]] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = cd[4]
    mem[mem[64] + 36] = 96
    _10587 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
    mem[mem[64] + 100] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
    idx = 0
    s = mem[64] + 132
    t = (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 192
    while idx < _10587:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[_10578 + 68] = cd[132]
    require ext_code.size(this.address)
    staticcall this.address.mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len _10578 + (32 * _10587) + -mem[64] + 128]
    if not ext_call.success:
        _11842 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160] <= test266151307()
        _11851 = mem[64]
        mem[mem[64]] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + 160]
        mem[64] = mem[64] + (32 * _11842) + 32
        if not _11842:
            require mem[_8965 + ceil32(return_data.size)] - 1 < mem[_8965 + ceil32(return_data.size)]
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            require mem[_11851] - 1 < mem[_11851]
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8965 + ceil32(return_data.size)] - 1) + _8965 + ceil32(return_data.size) + 32]:
                require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_11851 + (32 * _11842) + 32] = 128
                if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_11851] - 1) + _11851 + 32]:
                    _12190 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                    mem[_11851 + (32 * _11842) + 192 len 32 * _12190] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12190]
                    mem[_11851 + (32 * _11842) + 64] = (32 * _12190) + 160
                    _12575 = mem[_8965 + ceil32(return_data.size)]
                    mem[_11851 + (32 * _11842) + (32 * _12190) + 192] = mem[_8965 + ceil32(return_data.size)]
                    mem[_11851 + (32 * _11842) + (32 * _12190) + 224 len 32 * _12575] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12575]
                    mem[_11851 + (32 * _11842) + 96] = (32 * _12190) + (32 * _12575) + 192
                    mem[_11851 + (32 * _11842) + (32 * _12190) + (32 * _12575) + 224] = mem[_11851]
                    mem[_11851 + (32 * _11842) + (32 * _12190) + (32 * _12575) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
                    mem[_11851 + (32 * _11842) + 128] = 1
                    return memory
                      from mem[64]
                       len _11851 + (32 * _11842) + (32 * _12190) + (32 * _12575) + (32 * mem[_11851]) + -mem[64] + 256
                _12191 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_11851 + (32 * _11842) + 192 len 32 * _12191] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12191]
                mem[_11851 + (32 * _11842) + 64] = (32 * _12191) + 160
                _12576 = mem[_8965 + ceil32(return_data.size)]
                mem[_11851 + (32 * _11842) + (32 * _12191) + 192] = mem[_8965 + ceil32(return_data.size)]
                mem[_11851 + (32 * _11842) + (32 * _12191) + 224 len 32 * _12576] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12576]
                mem[_11851 + (32 * _11842) + 96] = (32 * _12191) + (32 * _12576) + 192
                mem[_11851 + (32 * _11842) + (32 * _12191) + (32 * _12576) + 224] = mem[_11851]
                mem[_11851 + (32 * _11842) + (32 * _12191) + (32 * _12576) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
                mem[_11851 + (32 * _11842) + 128] = 3
                return memory
                  from mem[64]
                   len _11851 + (32 * _11842) + (32 * _12191) + (32 * _12576) + (32 * mem[_11851]) + -mem[64] + 256
            require mem[_8965 + ceil32(return_data.size)] - 1 < mem[_8965 + ceil32(return_data.size)]
            mem[_11851 + (32 * _11842) + 32] = 128
            if mem[(32 * mem[_8965 + ceil32(return_data.size)] - 1) + _8965 + ceil32(return_data.size) + 32] >= mem[(32 * mem[_11851] - 1) + _11851 + 32]:
                _12192 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_11851 + (32 * _11842) + 192 len 32 * _12192] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12192]
                mem[_11851 + (32 * _11842) + 64] = (32 * _12192) + 160
                _12577 = mem[_8965 + ceil32(return_data.size)]
                mem[_11851 + (32 * _11842) + (32 * _12192) + 192] = mem[_8965 + ceil32(return_data.size)]
                mem[_11851 + (32 * _11842) + (32 * _12192) + 224 len 32 * _12577] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12577]
                mem[_11851 + (32 * _11842) + 96] = (32 * _12192) + (32 * _12577) + 192
                mem[_11851 + (32 * _11842) + (32 * _12192) + (32 * _12577) + 224] = mem[_11851]
                mem[_11851 + (32 * _11842) + (32 * _12192) + (32 * _12577) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
                mem[_11851 + (32 * _11842) + 128] = 2
                return memory
                  from mem[64]
                   len _11851 + (32 * _11842) + (32 * _12192) + (32 * _12577) + (32 * mem[_11851]) + -mem[64] + 256
            _12193 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_11851 + (32 * _11842) + 192 len 32 * _12193] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12193]
            mem[_11851 + (32 * _11842) + 64] = (32 * _12193) + 160
            _12578 = mem[_8965 + ceil32(return_data.size)]
            mem[_11851 + (32 * _11842) + (32 * _12193) + 192] = mem[_8965 + ceil32(return_data.size)]
            mem[_11851 + (32 * _11842) + (32 * _12193) + 224 len 32 * _12578] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12578]
            mem[_11851 + (32 * _11842) + 96] = (32 * _12193) + (32 * _12578) + 192
            mem[_11851 + (32 * _11842) + (32 * _12193) + (32 * _12578) + 224] = mem[_11851]
            mem[_11851 + (32 * _11842) + (32 * _12193) + (32 * _12578) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
            mem[_11851 + (32 * _11842) + 128] = 3
            return memory
              from mem[64]
               len _11851 + (32 * _11842) + (32 * _12193) + (32 * _12578) + (32 * mem[_11851]) + -mem[64] + 256
        mem[_11851 + 32 len 32 * _11842] = call.data[calldata.size len 32 * _11842]
        require mem[_8965 + ceil32(return_data.size)] - 1 < mem[_8965 + ceil32(return_data.size)]
        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        require mem[_11851] - 1 < mem[_11851]
        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8965 + ceil32(return_data.size)] - 1) + _8965 + ceil32(return_data.size) + 32]:
            require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_11851 + (32 * _11842) + 32] = 128
            if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_11851] - 1) + _11851 + 32]:
                _12213 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
                mem[_11851 + (32 * _11842) + 192 len 32 * _12213] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12213]
                mem[_11851 + (32 * _11842) + 64] = (32 * _12213) + 160
                _12579 = mem[_8965 + ceil32(return_data.size)]
                mem[_11851 + (32 * _11842) + (32 * _12213) + 192] = mem[_8965 + ceil32(return_data.size)]
                mem[_11851 + (32 * _11842) + (32 * _12213) + 224 len 32 * _12579] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12579]
                mem[_11851 + (32 * _11842) + 96] = (32 * _12213) + (32 * _12579) + 192
                mem[_11851 + (32 * _11842) + (32 * _12213) + (32 * _12579) + 224] = mem[_11851]
                mem[_11851 + (32 * _11842) + (32 * _12213) + (32 * _12579) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
                mem[_11851 + (32 * _11842) + 128] = 1
                return memory
                  from mem[64]
                   len _11851 + (32 * _11842) + (32 * _12213) + (32 * _12579) + (32 * mem[_11851]) + -mem[64] + 256
            _12214 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_11851 + (32 * _11842) + 192 len 32 * _12214] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12214]
            mem[_11851 + (32 * _11842) + 64] = (32 * _12214) + 160
            _12580 = mem[_8965 + ceil32(return_data.size)]
            mem[_11851 + (32 * _11842) + (32 * _12214) + 192] = mem[_8965 + ceil32(return_data.size)]
            mem[_11851 + (32 * _11842) + (32 * _12214) + 224 len 32 * _12580] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12580]
            mem[_11851 + (32 * _11842) + 96] = (32 * _12214) + (32 * _12580) + 192
            mem[_11851 + (32 * _11842) + (32 * _12214) + (32 * _12580) + 224] = mem[_11851]
            mem[_11851 + (32 * _11842) + (32 * _12214) + (32 * _12580) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
            mem[_11851 + (32 * _11842) + 128] = 3
            return memory
              from mem[64]
               len _11851 + (32 * _11842) + (32 * _12214) + (32 * _12580) + (32 * mem[_11851]) + -mem[64] + 256
        require mem[_8965 + ceil32(return_data.size)] - 1 < mem[_8965 + ceil32(return_data.size)]
        mem[_11851 + (32 * _11842) + 32] = 128
        if mem[(32 * mem[_8965 + ceil32(return_data.size)] - 1) + _8965 + ceil32(return_data.size) + 32] >= mem[(32 * mem[_11851] - 1) + _11851 + 32]:
            _12215 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[_11851 + (32 * _11842) + 192 len 32 * _12215] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12215]
            mem[_11851 + (32 * _11842) + 64] = (32 * _12215) + 160
            _12581 = mem[_8965 + ceil32(return_data.size)]
            mem[_11851 + (32 * _11842) + (32 * _12215) + 192] = mem[_8965 + ceil32(return_data.size)]
            mem[_11851 + (32 * _11842) + (32 * _12215) + 224 len 32 * _12581] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12581]
            mem[_11851 + (32 * _11842) + 96] = (32 * _12215) + (32 * _12581) + 192
            mem[_11851 + (32 * _11842) + (32 * _12215) + (32 * _12581) + 224] = mem[_11851]
            mem[_11851 + (32 * _11842) + (32 * _12215) + (32 * _12581) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
            mem[_11851 + (32 * _11842) + 128] = 2
            return memory
              from mem[64]
               len _11851 + (32 * _11842) + (32 * _12215) + (32 * _12581) + (32 * mem[_11851]) + -mem[64] + 256
        _12216 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[_11851 + (32 * _11842) + 160] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[_11851 + (32 * _11842) + 192 len 32 * _12216] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12216]
        mem[_11851 + (32 * _11842) + 64] = (32 * _12216) + 160
        _12582 = mem[_8965 + ceil32(return_data.size)]
        mem[_11851 + (32 * _11842) + (32 * _12216) + 192] = mem[_8965 + ceil32(return_data.size)]
        mem[_11851 + (32 * _11842) + (32 * _12216) + 224 len 32 * _12582] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12582]
        mem[_11851 + (32 * _11842) + 96] = (32 * _12216) + (32 * _12582) + 192
        mem[_11851 + (32 * _11842) + (32 * _12216) + (32 * _12582) + 224] = mem[_11851]
        mem[_11851 + (32 * _11842) + (32 * _12216) + (32 * _12582) + 256 len 32 * mem[_11851]] = mem[_11851 + 32 len 32 * mem[_11851]]
        mem[_11851 + (32 * _11842) + 128] = 3
        return memory
          from mem[64]
           len _11851 + (32 * _11842) + (32 * _12216) + (32 * _12582) + (32 * mem[_11851]) + -mem[64] + 256
    _11761 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _11852 = mem[_11761]
    require mem[_11761] <= test266151307()
    require _11761 + mem[_11761] + 31 < _11761 + return_data.size
    _11949 = mem[_11761 + mem[_11761]]
    require mem[_11761 + mem[_11761]] <= test266151307()
    require (32 * mem[_11761 + mem[_11761]]) + 32 >= 0 and _11761 + ceil32(return_data.size) + (32 * mem[_11761 + mem[_11761]]) + 32 <= test266151307()
    mem[64] = _11761 + ceil32(return_data.size) + (32 * mem[_11761 + mem[_11761]]) + 32
    mem[_11761 + ceil32(return_data.size)] = _11949
    require return_data.size >= _11852 + (32 * _11949) + 32
    mem[_11761 + ceil32(return_data.size) + 32 len 32 * _11949] = mem[_11761 + _11852 + 32 len 32 * _11949]
    require mem[_8965 + ceil32(return_data.size)] - 1 < mem[_8965 + ceil32(return_data.size)]
    require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
    require _11949 - 1 < _11949
    if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * mem[_8965 + ceil32(return_data.size)] - 1) + _8965 + ceil32(return_data.size) + 32]:
        require mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1 < mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        if mem[(32 * mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192] - 1) + (32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224] >= mem[(32 * _11949 - 1) + _11761 + ceil32(return_data.size) + 32]:
            mem[mem[64]] = 128
            _12797 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
            mem[mem[64] + 160 len 32 * _12797] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12797]
            mem[mem[64] + 32] = (32 * _12797) + 160
            _12973 = mem[_8965 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _12797) + 160] = mem[_8965 + ceil32(return_data.size)]
            mem[mem[64] + (32 * _12797) + 192 len 32 * _12973] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12973]
            mem[mem[64] + 64] = (32 * _12797) + (32 * _12973) + 192
            mem[mem[64] + (32 * _12797) + (32 * _12973) + 192] = _11949
            mem[mem[64] + (32 * _12797) + (32 * _12973) + 224 len 32 * _11949] = mem[_11761 + ceil32(return_data.size) + 32 len 32 * _11949]
            mem[mem[64] + 96] = 1
            return Array(len=mem[mem[64] + 128 len (32 * _12797) + (32 * _12973) + 64], data=_11949, mem[mem[64] + (32 * _12797) + (32 * _12973) + 224 len 32 * _11949]), 
                   (32 * _12797) + 160,
                   (32 * _12797) + (32 * _12973) + 192,
                   1
        _12794 = mem[64]
        mem[mem[64]] = 128
        _12798 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[mem[64] + 160 len 32 * _12798] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12798]
        mem[mem[64] + 32] = (32 * _12798) + 160
        _12974 = mem[_8965 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _12798) + 160] = mem[_8965 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _12798) + 192 len 32 * _12974] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12974]
        mem[mem[64] + 64] = (32 * _12798) + (32 * _12974) + 192
        mem[_12794 + (32 * _12798) + (32 * _12974) + 192] = _11949
        mem[_12794 + (32 * _12798) + (32 * _12974) + 224 len 32 * _11949] = mem[_11761 + ceil32(return_data.size) + 32 len 32 * _11949]
        mem[_12794 + 96] = 3
        return memory
          from mem[64]
           len _12794 + (32 * _12798) + (32 * _12974) + (32 * _11949) + -mem[64] + 224
    require mem[_8965 + ceil32(return_data.size)] - 1 < mem[_8965 + ceil32(return_data.size)]
    if mem[(32 * mem[_8965 + ceil32(return_data.size)] - 1) + _8965 + ceil32(return_data.size) + 32] >= mem[(32 * _11949 - 1) + _11761 + ceil32(return_data.size) + 32]:
        _12795 = mem[64]
        mem[mem[64]] = 128
        _12799 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
        mem[mem[64] + 160 len 32 * _12799] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12799]
        mem[mem[64] + 32] = (32 * _12799) + 160
        _12975 = mem[_8965 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _12799) + 160] = mem[_8965 + ceil32(return_data.size)]
        mem[mem[64] + (32 * _12799) + 192 len 32 * _12975] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12975]
        mem[mem[64] + 64] = (32 * _12799) + (32 * _12975) + 192
        mem[_12795 + (32 * _12799) + (32 * _12975) + 192] = _11949
        mem[_12795 + (32 * _12799) + (32 * _12975) + 224 len 32 * _11949] = mem[_11761 + ceil32(return_data.size) + 32 len 32 * _11949]
        mem[_12795 + 96] = 2
        return memory
          from mem[64]
           len _12795 + (32 * _12799) + (32 * _12975) + (32 * _11949) + -mem[64] + 224
    _12796 = mem[64]
    mem[mem[64]] = 128
    _12800 = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
    mem[mem[64] + 128] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 192]
    mem[mem[64] + 160 len 32 * _12800] = mem[(32 * ('cd', 36).length) + (32 * ('cd', 68).length) + (32 * ('cd', 100).length) + ceil32(return_data.size) + 224 len 32 * _12800]
    mem[mem[64] + 32] = (32 * _12800) + 160
    _12976 = mem[_8965 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _12800) + 160] = mem[_8965 + ceil32(return_data.size)]
    mem[mem[64] + (32 * _12800) + 192 len 32 * _12976] = mem[_8965 + ceil32(return_data.size) + 32 len 32 * _12976]
    mem[mem[64] + 64] = (32 * _12800) + (32 * _12976) + 192
    mem[_12796 + (32 * _12800) + (32 * _12976) + 192] = _11949
    mem[_12796 + (32 * _12800) + (32 * _12976) + 224 len 32 * _11949] = mem[_11761 + ceil32(return_data.size) + 32 len 32 * _11949]
    mem[_12796 + 96] = 3
    return memory
      from mem[64]
       len _12796 + (32 * _12800) + (32 * _12976) + (32 * _11949) + -mem[64] + 224
}

function sub_ae33f324(?) {
    require calldata.size - 4 >= 96
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    require ('cd', 36).length <= test266151307()
    require (32 * ('cd', 36).length) + 128 >= 96 and (32 * ('cd', 36).length) + 128 <= test266151307()
    mem[96] = ('cd', 36).length
    require calldata.size >= cd[36] + (32 * ('cd', 36).length) + 36
    idx = 0
    s = cd[36] + 36
    t = 128
    while idx < ('cd', 36).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[(32 * ('cd', 36).length) + 128] = 0xb6eacc9d00000000000000000000000000000000000000000000000000000000
    mem[(32 * ('cd', 36).length) + 132] = cd[4]
    mem[(32 * ('cd', 36).length) + 164] = 96
    mem[(32 * ('cd', 36).length) + 228] = ('cd', 36).length
    idx = 0
    s = (32 * ('cd', 36).length) + 260
    t = 128
    while idx < ('cd', 36).length:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[(32 * ('cd', 36).length) + 196] = cd[68]
    require ext_code.size(this.address)
    staticcall this.address.0xb6eacc9d with:
            gas gas_remaining wei
           args mem[(32 * ('cd', 36).length) + 132 len (96 * ('cd', 36).length) + 128]
    if not ext_call.success:
        require ('cd', 36).length <= test266151307()
        mem[(32 * ('cd', 36).length) + 128] = ('cd', 36).length
        if not ('cd', 36).length:
            require ('cd', 36).length
            if mem[140 len 20] != address(WETHAddress):
                revert with 0, 'SuperRouter: INVALID_PATH'
            require ('cd', 36).length - 1 < ('cd', 36).length
            if mem[(32 * ('cd', 36).length - 1) + (32 * ('cd', 36).length) + 160] < 1:
                revert with 0, 'SuperRouter: INSUFFICIENT_OUTPUT_AMOUNT'
            require ('cd', 36).length
            mem[(64 * ('cd', 36).length) + 160] = 0xd0e30db000000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(WETHAddress))
            call address(WETHAddress).0xd0e30db0 with:
               value uint32(cd[4]), 0 wei
                 gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ('cd', 36).length
            require 1 < ('cd', 36).length
            _6843 = mem[160]
            mem[0] = cd[68]
            mem[32] = 4
            if mem[140 len 20] == mem[172 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[140 len 20] < mem[172 len 20]:
                if not mem[140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                mem[(64 * ('cd', 36).length) + 192] = address(mem[128])
                mem[(64 * ('cd', 36).length) + 212] = address(mem[160])
                mem[(64 * ('cd', 36).length) + 160] = 40
                mem[(64 * ('cd', 36).length) + 264] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[(64 * ('cd', 36).length) + 265] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[(64 * ('cd', 36).length) + 285] = sha3(mem[140 len 20], address(_6843))
                mem[(64 * ('cd', 36).length) + 317] = stor4[cd[68]].field_512
                mem[(64 * ('cd', 36).length) + 232] = 85
                require 0 < ('cd', 36).length
                mem[(64 * ('cd', 36).length) + 353] = address(sha3(0, stor4[cd[68]].field_0, sha3(mem[140 len 20], address(_6843)), stor4[cd[68]].field_512))
                mem[(64 * ('cd', 36).length) + 385] = uint32(cd[4]), 0
                require ext_code.size(address(WETHAddress))
                call address(WETHAddress).0xa9059cbb with:
                     gas gas_remaining wei
                    args address(sha3(0, stor4[cd[68]].field_0, sha3(mem[140 len 20], address(_6843)), stor4[cd[68]].field_512)), uint32(cd[4]), 0
                mem[(64 * ('cd', 36).length) + 349] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (64 * ('cd', 36).length) + ceil32(return_data.size) + 349
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                require ext_call.return_data[0]
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[96]
                    _10212 = mem[(32 * idx) + 128]
                    require idx + 1 < mem[96]
                    _10220 = mem[(32 * idx + 1) + 128]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                        if not mem[(32 * idx) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10253 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10493 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10630 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10632 = sha3(mem[_10630 + 32 len mem[_10630]])
                                    mem[_10493 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10493 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10493 + 125] = _10632
                                    mem[_10493 + 157] = stor4[cd[68]].field_512
                                    mem[_10493 + 72] = 85
                                    mem[_10493 + 189] = 0
                                    mem[64] = _10493 + 221
                                    mem[_10493 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10493 + 225] = 0
                                    mem[_10493 + 257] = _10253
                                    mem[_10493 + 289] = msg.sender
                                    mem[_10493 + 321] = 128
                                    mem[_10493 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10493 + 385] = mem[s + _10493 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10632, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10632, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10253, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10494 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10212)
                                    _10634 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10636 = sha3(mem[_10634 + 32 len mem[_10634]])
                                    mem[_10494 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10494 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10494 + 125] = _10636
                                    mem[_10494 + 157] = stor4[cd[68]].field_512
                                    mem[_10494 + 72] = 85
                                    mem[_10494 + 189] = 0
                                    mem[64] = _10494 + 221
                                    mem[_10494 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10494 + 225] = 0
                                    mem[_10494 + 257] = _10253
                                    mem[_10494 + 289] = msg.sender
                                    mem[_10494 + 321] = 128
                                    mem[_10494 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10494 + 385] = mem[s + _10494 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10636, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10636, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10253, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10309 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10491 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10309)
                                    _10622 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10624 = sha3(mem[_10622 + 32 len mem[_10622]])
                                    mem[_10491 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10491 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10491 + 125] = _10624
                                    mem[_10491 + 157] = stor4[cd[68]].field_512
                                    mem[_10491 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10491 + 221] = address(_10212)
                                        mem[_10491 + 241] = address(_10220)
                                        mem[_10491 + 189] = 40
                                        mem[_10491 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10491 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10491 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10491 + 346] = stor4[cd[68]].field_512
                                        mem[_10491 + 261] = 85
                                        mem[_10491 + 378] = 0
                                        mem[64] = _10491 + 410
                                        mem[_10491 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10491 + 414] = 0
                                        mem[_10491 + 446] = _10253
                                        mem[_10491 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10624, stor4[cd[68]].field_512))
                                        mem[_10491 + 510] = 128
                                        mem[_10491 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10491 + 574] = mem[s + _10491 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10253, address(sha3(0, stor4[cd[68]].field_0, _10624, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10491 + 221] = address(_10220)
                                        mem[_10491 + 241] = address(_10212)
                                        mem[_10491 + 189] = 40
                                        mem[_10491 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10491 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10491 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10491 + 346] = stor4[cd[68]].field_512
                                        mem[_10491 + 261] = 85
                                        mem[_10491 + 378] = 0
                                        mem[64] = _10491 + 410
                                        mem[_10491 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10491 + 414] = 0
                                        mem[_10491 + 446] = _10253
                                        mem[_10491 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10624, stor4[cd[68]].field_512))
                                        mem[_10491 + 510] = 128
                                        mem[_10491 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10491 + 574] = mem[s + _10491 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10253, address(sha3(0, stor4[cd[68]].field_0, _10624, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10492 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10626 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10628 = sha3(mem[_10626 + 32 len mem[_10626]])
                                    mem[_10492 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10492 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10492 + 125] = _10628
                                    mem[_10492 + 157] = stor4[cd[68]].field_512
                                    mem[_10492 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10492 + 221] = address(_10212)
                                        mem[_10492 + 241] = address(_10220)
                                        mem[_10492 + 189] = 40
                                        mem[_10492 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10492 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10492 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10492 + 346] = stor4[cd[68]].field_512
                                        mem[_10492 + 261] = 85
                                        mem[_10492 + 378] = 0
                                        mem[64] = _10492 + 410
                                        mem[_10492 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10492 + 414] = 0
                                        mem[_10492 + 446] = _10253
                                        mem[_10492 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10628, stor4[cd[68]].field_512))
                                        mem[_10492 + 510] = 128
                                        mem[_10492 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10492 + 574] = mem[s + _10492 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10253, address(sha3(0, stor4[cd[68]].field_0, _10628, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10492 + 221] = address(_10220)
                                        mem[_10492 + 241] = address(_10212)
                                        mem[_10492 + 189] = 40
                                        mem[_10492 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10492 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10492 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10492 + 346] = stor4[cd[68]].field_512
                                        mem[_10492 + 261] = 85
                                        mem[_10492 + 378] = 0
                                        mem[64] = _10492 + 410
                                        mem[_10492 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10492 + 414] = 0
                                        mem[_10492 + 446] = _10253
                                        mem[_10492 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10628, stor4[cd[68]].field_512))
                                        mem[_10492 + 510] = 128
                                        mem[_10492 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10492 + 574] = mem[s + _10492 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10253, address(sha3(0, stor4[cd[68]].field_0, _10628, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10497 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10646 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10648 = sha3(mem[_10646 + 32 len mem[_10646]])
                                    mem[_10497 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10497 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10497 + 125] = _10648
                                    mem[_10497 + 157] = stor4[cd[68]].field_512
                                    mem[_10497 + 72] = 85
                                    mem[_10497 + 189] = 0
                                    mem[64] = _10497 + 221
                                    mem[_10497 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10497 + 225] = _10253
                                    mem[_10497 + 257] = 0
                                    mem[_10497 + 289] = msg.sender
                                    mem[_10497 + 321] = 128
                                    mem[_10497 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10497 + 385] = mem[s + _10497 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10648, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10648, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10253, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10498 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10212)
                                    _10650 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10652 = sha3(mem[_10650 + 32 len mem[_10650]])
                                    mem[_10498 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10498 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10498 + 125] = _10652
                                    mem[_10498 + 157] = stor4[cd[68]].field_512
                                    mem[_10498 + 72] = 85
                                    mem[_10498 + 189] = 0
                                    mem[64] = _10498 + 221
                                    mem[_10498 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10498 + 225] = _10253
                                    mem[_10498 + 257] = 0
                                    mem[_10498 + 289] = msg.sender
                                    mem[_10498 + 321] = 128
                                    mem[_10498 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10498 + 385] = mem[s + _10498 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10652, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10652, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10253, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10310 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10495 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10310)
                                    _10638 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10640 = sha3(mem[_10638 + 32 len mem[_10638]])
                                    mem[_10495 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10495 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10495 + 125] = _10640
                                    mem[_10495 + 157] = stor4[cd[68]].field_512
                                    mem[_10495 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10495 + 221] = address(_10212)
                                        mem[_10495 + 241] = address(_10220)
                                        mem[_10495 + 189] = 40
                                        mem[_10495 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10495 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10495 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10495 + 346] = stor4[cd[68]].field_512
                                        mem[_10495 + 261] = 85
                                        mem[_10495 + 378] = 0
                                        mem[64] = _10495 + 410
                                        mem[_10495 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10495 + 414] = _10253
                                        mem[_10495 + 446] = 0
                                        mem[_10495 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10640, stor4[cd[68]].field_512))
                                        mem[_10495 + 510] = 128
                                        mem[_10495 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10495 + 574] = mem[s + _10495 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10253, 0, address(sha3(0, stor4[cd[68]].field_0, _10640, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10495 + 221] = address(_10220)
                                        mem[_10495 + 241] = address(_10212)
                                        mem[_10495 + 189] = 40
                                        mem[_10495 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10495 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10495 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10495 + 346] = stor4[cd[68]].field_512
                                        mem[_10495 + 261] = 85
                                        mem[_10495 + 378] = 0
                                        mem[64] = _10495 + 410
                                        mem[_10495 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10495 + 414] = _10253
                                        mem[_10495 + 446] = 0
                                        mem[_10495 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10640, stor4[cd[68]].field_512))
                                        mem[_10495 + 510] = 128
                                        mem[_10495 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10495 + 574] = mem[s + _10495 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10253, 0, address(sha3(0, stor4[cd[68]].field_0, _10640, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10496 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10642 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10644 = sha3(mem[_10642 + 32 len mem[_10642]])
                                    mem[_10496 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10496 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10496 + 125] = _10644
                                    mem[_10496 + 157] = stor4[cd[68]].field_512
                                    mem[_10496 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10496 + 221] = address(_10212)
                                        mem[_10496 + 241] = address(_10220)
                                        mem[_10496 + 189] = 40
                                        mem[_10496 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10496 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10496 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10496 + 346] = stor4[cd[68]].field_512
                                        mem[_10496 + 261] = 85
                                        mem[_10496 + 378] = 0
                                        mem[64] = _10496 + 410
                                        mem[_10496 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10496 + 414] = _10253
                                        mem[_10496 + 446] = 0
                                        mem[_10496 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10644, stor4[cd[68]].field_512))
                                        mem[_10496 + 510] = 128
                                        mem[_10496 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10496 + 574] = mem[s + _10496 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10253, 0, address(sha3(0, stor4[cd[68]].field_0, _10644, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10496 + 221] = address(_10220)
                                        mem[_10496 + 241] = address(_10212)
                                        mem[_10496 + 189] = 40
                                        mem[_10496 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10496 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10496 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10496 + 346] = stor4[cd[68]].field_512
                                        mem[_10496 + 261] = 85
                                        mem[_10496 + 378] = 0
                                        mem[64] = _10496 + 410
                                        mem[_10496 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10496 + 414] = _10253
                                        mem[_10496 + 446] = 0
                                        mem[_10496 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10644, stor4[cd[68]].field_512))
                                        mem[_10496 + 510] = 128
                                        mem[_10496 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10496 + 574] = mem[s + _10496 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10253, 0, address(sha3(0, stor4[cd[68]].field_0, _10644, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10255 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10501 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10662 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10664 = sha3(mem[_10662 + 32 len mem[_10662]])
                                    mem[_10501 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10501 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10501 + 125] = _10664
                                    mem[_10501 + 157] = stor4[cd[68]].field_512
                                    mem[_10501 + 72] = 85
                                    mem[_10501 + 189] = 0
                                    mem[64] = _10501 + 221
                                    mem[_10501 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10501 + 225] = 0
                                    mem[_10501 + 257] = _10255
                                    mem[_10501 + 289] = msg.sender
                                    mem[_10501 + 321] = 128
                                    mem[_10501 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10501 + 385] = mem[s + _10501 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10664, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10664, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10255, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10502 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10212)
                                    _10666 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10668 = sha3(mem[_10666 + 32 len mem[_10666]])
                                    mem[_10502 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10502 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10502 + 125] = _10668
                                    mem[_10502 + 157] = stor4[cd[68]].field_512
                                    mem[_10502 + 72] = 85
                                    mem[_10502 + 189] = 0
                                    mem[64] = _10502 + 221
                                    mem[_10502 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10502 + 225] = 0
                                    mem[_10502 + 257] = _10255
                                    mem[_10502 + 289] = msg.sender
                                    mem[_10502 + 321] = 128
                                    mem[_10502 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10502 + 385] = mem[s + _10502 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10668, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10668, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10255, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10311 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10499 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10311)
                                    _10654 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10656 = sha3(mem[_10654 + 32 len mem[_10654]])
                                    mem[_10499 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10499 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10499 + 125] = _10656
                                    mem[_10499 + 157] = stor4[cd[68]].field_512
                                    mem[_10499 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10499 + 221] = address(_10212)
                                        mem[_10499 + 241] = address(_10220)
                                        mem[_10499 + 189] = 40
                                        mem[_10499 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10499 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10499 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10499 + 346] = stor4[cd[68]].field_512
                                        mem[_10499 + 261] = 85
                                        mem[_10499 + 378] = 0
                                        mem[64] = _10499 + 410
                                        mem[_10499 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10499 + 414] = 0
                                        mem[_10499 + 446] = _10255
                                        mem[_10499 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10656, stor4[cd[68]].field_512))
                                        mem[_10499 + 510] = 128
                                        mem[_10499 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10499 + 574] = mem[s + _10499 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10255, address(sha3(0, stor4[cd[68]].field_0, _10656, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10499 + 221] = address(_10220)
                                        mem[_10499 + 241] = address(_10212)
                                        mem[_10499 + 189] = 40
                                        mem[_10499 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10499 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10499 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10499 + 346] = stor4[cd[68]].field_512
                                        mem[_10499 + 261] = 85
                                        mem[_10499 + 378] = 0
                                        mem[64] = _10499 + 410
                                        mem[_10499 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10499 + 414] = 0
                                        mem[_10499 + 446] = _10255
                                        mem[_10499 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10656, stor4[cd[68]].field_512))
                                        mem[_10499 + 510] = 128
                                        mem[_10499 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10499 + 574] = mem[s + _10499 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10255, address(sha3(0, stor4[cd[68]].field_0, _10656, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10500 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10658 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10660 = sha3(mem[_10658 + 32 len mem[_10658]])
                                    mem[_10500 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10500 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10500 + 125] = _10660
                                    mem[_10500 + 157] = stor4[cd[68]].field_512
                                    mem[_10500 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10500 + 221] = address(_10212)
                                        mem[_10500 + 241] = address(_10220)
                                        mem[_10500 + 189] = 40
                                        mem[_10500 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10500 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10500 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10500 + 346] = stor4[cd[68]].field_512
                                        mem[_10500 + 261] = 85
                                        mem[_10500 + 378] = 0
                                        mem[64] = _10500 + 410
                                        mem[_10500 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10500 + 414] = 0
                                        mem[_10500 + 446] = _10255
                                        mem[_10500 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10660, stor4[cd[68]].field_512))
                                        mem[_10500 + 510] = 128
                                        mem[_10500 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10500 + 574] = mem[s + _10500 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10255, address(sha3(0, stor4[cd[68]].field_0, _10660, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10500 + 221] = address(_10220)
                                        mem[_10500 + 241] = address(_10212)
                                        mem[_10500 + 189] = 40
                                        mem[_10500 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10500 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10500 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10500 + 346] = stor4[cd[68]].field_512
                                        mem[_10500 + 261] = 85
                                        mem[_10500 + 378] = 0
                                        mem[64] = _10500 + 410
                                        mem[_10500 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10500 + 414] = 0
                                        mem[_10500 + 446] = _10255
                                        mem[_10500 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10660, stor4[cd[68]].field_512))
                                        mem[_10500 + 510] = 128
                                        mem[_10500 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10500 + 574] = mem[s + _10500 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10255, address(sha3(0, stor4[cd[68]].field_0, _10660, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10505 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10678 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10680 = sha3(mem[_10678 + 32 len mem[_10678]])
                                    mem[_10505 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10505 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10505 + 125] = _10680
                                    mem[_10505 + 157] = stor4[cd[68]].field_512
                                    mem[_10505 + 72] = 85
                                    mem[_10505 + 189] = 0
                                    mem[64] = _10505 + 221
                                    mem[_10505 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10505 + 225] = _10255
                                    mem[_10505 + 257] = 0
                                    mem[_10505 + 289] = msg.sender
                                    mem[_10505 + 321] = 128
                                    mem[_10505 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10505 + 385] = mem[s + _10505 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10680, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10680, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10255, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10506 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10212)
                                    _10682 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10684 = sha3(mem[_10682 + 32 len mem[_10682]])
                                    mem[_10506 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10506 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10506 + 125] = _10684
                                    mem[_10506 + 157] = stor4[cd[68]].field_512
                                    mem[_10506 + 72] = 85
                                    mem[_10506 + 189] = 0
                                    mem[64] = _10506 + 221
                                    mem[_10506 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10506 + 225] = _10255
                                    mem[_10506 + 257] = 0
                                    mem[_10506 + 289] = msg.sender
                                    mem[_10506 + 321] = 128
                                    mem[_10506 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10506 + 385] = mem[s + _10506 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10684, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10684, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10255, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10312 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10503 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10312)
                                    _10670 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10672 = sha3(mem[_10670 + 32 len mem[_10670]])
                                    mem[_10503 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10503 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10503 + 125] = _10672
                                    mem[_10503 + 157] = stor4[cd[68]].field_512
                                    mem[_10503 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10503 + 221] = address(_10212)
                                        mem[_10503 + 241] = address(_10220)
                                        mem[_10503 + 189] = 40
                                        mem[_10503 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10503 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10503 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10503 + 346] = stor4[cd[68]].field_512
                                        mem[_10503 + 261] = 85
                                        mem[_10503 + 378] = 0
                                        mem[64] = _10503 + 410
                                        mem[_10503 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10503 + 414] = _10255
                                        mem[_10503 + 446] = 0
                                        mem[_10503 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10672, stor4[cd[68]].field_512))
                                        mem[_10503 + 510] = 128
                                        mem[_10503 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10503 + 574] = mem[s + _10503 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10255, 0, address(sha3(0, stor4[cd[68]].field_0, _10672, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10503 + 221] = address(_10220)
                                        mem[_10503 + 241] = address(_10212)
                                        mem[_10503 + 189] = 40
                                        mem[_10503 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10503 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10503 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10503 + 346] = stor4[cd[68]].field_512
                                        mem[_10503 + 261] = 85
                                        mem[_10503 + 378] = 0
                                        mem[64] = _10503 + 410
                                        mem[_10503 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10503 + 414] = _10255
                                        mem[_10503 + 446] = 0
                                        mem[_10503 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10672, stor4[cd[68]].field_512))
                                        mem[_10503 + 510] = 128
                                        mem[_10503 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10503 + 574] = mem[s + _10503 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10255, 0, address(sha3(0, stor4[cd[68]].field_0, _10672, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10504 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10220)
                                    _10674 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10676 = sha3(mem[_10674 + 32 len mem[_10674]])
                                    mem[_10504 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10504 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10504 + 125] = _10676
                                    mem[_10504 + 157] = stor4[cd[68]].field_512
                                    mem[_10504 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10212) == address(_10220):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10212) < address(_10220):
                                        if not address(_10212):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10504 + 221] = address(_10212)
                                        mem[_10504 + 241] = address(_10220)
                                        mem[_10504 + 189] = 40
                                        mem[_10504 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10504 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10504 + 314] = sha3(address(_10212), address(_10220))
                                        mem[_10504 + 346] = stor4[cd[68]].field_512
                                        mem[_10504 + 261] = 85
                                        mem[_10504 + 378] = 0
                                        mem[64] = _10504 + 410
                                        mem[_10504 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10504 + 414] = _10255
                                        mem[_10504 + 446] = 0
                                        mem[_10504 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10676, stor4[cd[68]].field_512))
                                        mem[_10504 + 510] = 128
                                        mem[_10504 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10504 + 574] = mem[s + _10504 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10212), address(_10220)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10255, 0, address(sha3(0, stor4[cd[68]].field_0, _10676, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10220):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10504 + 221] = address(_10220)
                                        mem[_10504 + 241] = address(_10212)
                                        mem[_10504 + 189] = 40
                                        mem[_10504 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10504 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10504 + 314] = sha3(address(_10220), address(_10212))
                                        mem[_10504 + 346] = stor4[cd[68]].field_512
                                        mem[_10504 + 261] = 85
                                        mem[_10504 + 378] = 0
                                        mem[64] = _10504 + 410
                                        mem[_10504 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10504 + 414] = _10255
                                        mem[_10504 + 446] = 0
                                        mem[_10504 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10676, stor4[cd[68]].field_512))
                                        mem[_10504 + 510] = 128
                                        mem[_10504 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10504 + 574] = mem[s + _10504 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10220), address(_10212)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10255, 0, address(sha3(0, stor4[cd[68]].field_0, _10676, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
            else:
                if not mem[172 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                mem[(64 * ('cd', 36).length) + 192] = address(mem[160])
                mem[(64 * ('cd', 36).length) + 212] = address(mem[128])
                mem[(64 * ('cd', 36).length) + 160] = 40
                mem[(64 * ('cd', 36).length) + 264] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[(64 * ('cd', 36).length) + 265] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[(64 * ('cd', 36).length) + 285] = sha3(mem[(64 * ('cd', 36).length) + 192 len 20], mem[140 len 20])
                mem[(64 * ('cd', 36).length) + 317] = stor4[cd[68]].field_512
                mem[(64 * ('cd', 36).length) + 232] = 85
                require 0 < ('cd', 36).length
                mem[(64 * ('cd', 36).length) + 353] = address(sha3(0, stor4[cd[68]].field_0, sha3(mem[(64 * ('cd', 36).length) + 192 len 20], mem[140 len 20]), stor4[cd[68]].field_512))
                mem[(64 * ('cd', 36).length) + 385] = uint32(cd[4]), 0
                require ext_code.size(address(WETHAddress))
                call address(WETHAddress).0xa9059cbb with:
                     gas gas_remaining wei
                    args address(sha3(0, stor4[cd[68]].field_0, sha3(mem[(64 * ('cd', 36).length) + 192 len 20], mem[140 len 20]), stor4[cd[68]].field_512)), uint32(cd[4]), 0
                mem[(64 * ('cd', 36).length) + 349] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (64 * ('cd', 36).length) + ceil32(return_data.size) + 349
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                require ext_call.return_data[0]
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[96]
                    _10214 = mem[(32 * idx) + 128]
                    require idx + 1 < mem[96]
                    _10221 = mem[(32 * idx + 1) + 128]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                        if not mem[(32 * idx) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10257 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10509 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10694 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10696 = sha3(mem[_10694 + 32 len mem[_10694]])
                                    mem[_10509 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10509 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10509 + 125] = _10696
                                    mem[_10509 + 157] = stor4[cd[68]].field_512
                                    mem[_10509 + 72] = 85
                                    mem[_10509 + 189] = 0
                                    mem[64] = _10509 + 221
                                    mem[_10509 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10509 + 225] = 0
                                    mem[_10509 + 257] = _10257
                                    mem[_10509 + 289] = msg.sender
                                    mem[_10509 + 321] = 128
                                    mem[_10509 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10509 + 385] = mem[s + _10509 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10696, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10696, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10257, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10510 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10214)
                                    _10698 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10700 = sha3(mem[_10698 + 32 len mem[_10698]])
                                    mem[_10510 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10510 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10510 + 125] = _10700
                                    mem[_10510 + 157] = stor4[cd[68]].field_512
                                    mem[_10510 + 72] = 85
                                    mem[_10510 + 189] = 0
                                    mem[64] = _10510 + 221
                                    mem[_10510 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10510 + 225] = 0
                                    mem[_10510 + 257] = _10257
                                    mem[_10510 + 289] = msg.sender
                                    mem[_10510 + 321] = 128
                                    mem[_10510 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10510 + 385] = mem[s + _10510 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10700, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10700, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10257, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10313 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10507 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10313)
                                    _10686 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10688 = sha3(mem[_10686 + 32 len mem[_10686]])
                                    mem[_10507 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10507 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10507 + 125] = _10688
                                    mem[_10507 + 157] = stor4[cd[68]].field_512
                                    mem[_10507 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10507 + 221] = address(_10214)
                                        mem[_10507 + 241] = address(_10221)
                                        mem[_10507 + 189] = 40
                                        mem[_10507 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10507 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10507 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10507 + 346] = stor4[cd[68]].field_512
                                        mem[_10507 + 261] = 85
                                        mem[_10507 + 378] = 0
                                        mem[64] = _10507 + 410
                                        mem[_10507 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10507 + 414] = 0
                                        mem[_10507 + 446] = _10257
                                        mem[_10507 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10688, stor4[cd[68]].field_512))
                                        mem[_10507 + 510] = 128
                                        mem[_10507 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10507 + 574] = mem[s + _10507 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10257, address(sha3(0, stor4[cd[68]].field_0, _10688, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10507 + 221] = address(_10221)
                                        mem[_10507 + 241] = address(_10214)
                                        mem[_10507 + 189] = 40
                                        mem[_10507 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10507 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10507 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10507 + 346] = stor4[cd[68]].field_512
                                        mem[_10507 + 261] = 85
                                        mem[_10507 + 378] = 0
                                        mem[64] = _10507 + 410
                                        mem[_10507 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10507 + 414] = 0
                                        mem[_10507 + 446] = _10257
                                        mem[_10507 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10688, stor4[cd[68]].field_512))
                                        mem[_10507 + 510] = 128
                                        mem[_10507 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10507 + 574] = mem[s + _10507 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10257, address(sha3(0, stor4[cd[68]].field_0, _10688, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10508 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10690 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10692 = sha3(mem[_10690 + 32 len mem[_10690]])
                                    mem[_10508 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10508 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10508 + 125] = _10692
                                    mem[_10508 + 157] = stor4[cd[68]].field_512
                                    mem[_10508 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10508 + 221] = address(_10214)
                                        mem[_10508 + 241] = address(_10221)
                                        mem[_10508 + 189] = 40
                                        mem[_10508 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10508 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10508 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10508 + 346] = stor4[cd[68]].field_512
                                        mem[_10508 + 261] = 85
                                        mem[_10508 + 378] = 0
                                        mem[64] = _10508 + 410
                                        mem[_10508 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10508 + 414] = 0
                                        mem[_10508 + 446] = _10257
                                        mem[_10508 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10692, stor4[cd[68]].field_512))
                                        mem[_10508 + 510] = 128
                                        mem[_10508 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10508 + 574] = mem[s + _10508 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10257, address(sha3(0, stor4[cd[68]].field_0, _10692, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10508 + 221] = address(_10221)
                                        mem[_10508 + 241] = address(_10214)
                                        mem[_10508 + 189] = 40
                                        mem[_10508 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10508 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10508 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10508 + 346] = stor4[cd[68]].field_512
                                        mem[_10508 + 261] = 85
                                        mem[_10508 + 378] = 0
                                        mem[64] = _10508 + 410
                                        mem[_10508 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10508 + 414] = 0
                                        mem[_10508 + 446] = _10257
                                        mem[_10508 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10692, stor4[cd[68]].field_512))
                                        mem[_10508 + 510] = 128
                                        mem[_10508 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10508 + 574] = mem[s + _10508 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10257, address(sha3(0, stor4[cd[68]].field_0, _10692, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10513 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10710 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10712 = sha3(mem[_10710 + 32 len mem[_10710]])
                                    mem[_10513 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10513 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10513 + 125] = _10712
                                    mem[_10513 + 157] = stor4[cd[68]].field_512
                                    mem[_10513 + 72] = 85
                                    mem[_10513 + 189] = 0
                                    mem[64] = _10513 + 221
                                    mem[_10513 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10513 + 225] = _10257
                                    mem[_10513 + 257] = 0
                                    mem[_10513 + 289] = msg.sender
                                    mem[_10513 + 321] = 128
                                    mem[_10513 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10513 + 385] = mem[s + _10513 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10712, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10712, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10257, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10514 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10214)
                                    _10714 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10716 = sha3(mem[_10714 + 32 len mem[_10714]])
                                    mem[_10514 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10514 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10514 + 125] = _10716
                                    mem[_10514 + 157] = stor4[cd[68]].field_512
                                    mem[_10514 + 72] = 85
                                    mem[_10514 + 189] = 0
                                    mem[64] = _10514 + 221
                                    mem[_10514 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10514 + 225] = _10257
                                    mem[_10514 + 257] = 0
                                    mem[_10514 + 289] = msg.sender
                                    mem[_10514 + 321] = 128
                                    mem[_10514 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10514 + 385] = mem[s + _10514 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10716, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10716, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10257, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10314 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10511 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10314)
                                    _10702 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10704 = sha3(mem[_10702 + 32 len mem[_10702]])
                                    mem[_10511 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10511 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10511 + 125] = _10704
                                    mem[_10511 + 157] = stor4[cd[68]].field_512
                                    mem[_10511 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10511 + 221] = address(_10214)
                                        mem[_10511 + 241] = address(_10221)
                                        mem[_10511 + 189] = 40
                                        mem[_10511 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10511 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10511 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10511 + 346] = stor4[cd[68]].field_512
                                        mem[_10511 + 261] = 85
                                        mem[_10511 + 378] = 0
                                        mem[64] = _10511 + 410
                                        mem[_10511 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10511 + 414] = _10257
                                        mem[_10511 + 446] = 0
                                        mem[_10511 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10704, stor4[cd[68]].field_512))
                                        mem[_10511 + 510] = 128
                                        mem[_10511 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10511 + 574] = mem[s + _10511 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10257, 0, address(sha3(0, stor4[cd[68]].field_0, _10704, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10511 + 221] = address(_10221)
                                        mem[_10511 + 241] = address(_10214)
                                        mem[_10511 + 189] = 40
                                        mem[_10511 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10511 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10511 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10511 + 346] = stor4[cd[68]].field_512
                                        mem[_10511 + 261] = 85
                                        mem[_10511 + 378] = 0
                                        mem[64] = _10511 + 410
                                        mem[_10511 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10511 + 414] = _10257
                                        mem[_10511 + 446] = 0
                                        mem[_10511 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10704, stor4[cd[68]].field_512))
                                        mem[_10511 + 510] = 128
                                        mem[_10511 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10511 + 574] = mem[s + _10511 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10257, 0, address(sha3(0, stor4[cd[68]].field_0, _10704, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10512 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10706 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10708 = sha3(mem[_10706 + 32 len mem[_10706]])
                                    mem[_10512 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10512 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10512 + 125] = _10708
                                    mem[_10512 + 157] = stor4[cd[68]].field_512
                                    mem[_10512 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10512 + 221] = address(_10214)
                                        mem[_10512 + 241] = address(_10221)
                                        mem[_10512 + 189] = 40
                                        mem[_10512 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10512 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10512 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10512 + 346] = stor4[cd[68]].field_512
                                        mem[_10512 + 261] = 85
                                        mem[_10512 + 378] = 0
                                        mem[64] = _10512 + 410
                                        mem[_10512 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10512 + 414] = _10257
                                        mem[_10512 + 446] = 0
                                        mem[_10512 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10708, stor4[cd[68]].field_512))
                                        mem[_10512 + 510] = 128
                                        mem[_10512 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10512 + 574] = mem[s + _10512 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10257, 0, address(sha3(0, stor4[cd[68]].field_0, _10708, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10512 + 221] = address(_10221)
                                        mem[_10512 + 241] = address(_10214)
                                        mem[_10512 + 189] = 40
                                        mem[_10512 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10512 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10512 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10512 + 346] = stor4[cd[68]].field_512
                                        mem[_10512 + 261] = 85
                                        mem[_10512 + 378] = 0
                                        mem[64] = _10512 + 410
                                        mem[_10512 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10512 + 414] = _10257
                                        mem[_10512 + 446] = 0
                                        mem[_10512 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10708, stor4[cd[68]].field_512))
                                        mem[_10512 + 510] = 128
                                        mem[_10512 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10512 + 574] = mem[s + _10512 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10257, 0, address(sha3(0, stor4[cd[68]].field_0, _10708, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10259 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10517 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10726 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10728 = sha3(mem[_10726 + 32 len mem[_10726]])
                                    mem[_10517 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10517 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10517 + 125] = _10728
                                    mem[_10517 + 157] = stor4[cd[68]].field_512
                                    mem[_10517 + 72] = 85
                                    mem[_10517 + 189] = 0
                                    mem[64] = _10517 + 221
                                    mem[_10517 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10517 + 225] = 0
                                    mem[_10517 + 257] = _10259
                                    mem[_10517 + 289] = msg.sender
                                    mem[_10517 + 321] = 128
                                    mem[_10517 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10517 + 385] = mem[s + _10517 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10728, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10728, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10259, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10518 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10214)
                                    _10730 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10732 = sha3(mem[_10730 + 32 len mem[_10730]])
                                    mem[_10518 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10518 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10518 + 125] = _10732
                                    mem[_10518 + 157] = stor4[cd[68]].field_512
                                    mem[_10518 + 72] = 85
                                    mem[_10518 + 189] = 0
                                    mem[64] = _10518 + 221
                                    mem[_10518 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10518 + 225] = 0
                                    mem[_10518 + 257] = _10259
                                    mem[_10518 + 289] = msg.sender
                                    mem[_10518 + 321] = 128
                                    mem[_10518 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10518 + 385] = mem[s + _10518 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10732, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10732, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10259, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10315 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10515 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10315)
                                    _10718 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10720 = sha3(mem[_10718 + 32 len mem[_10718]])
                                    mem[_10515 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10515 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10515 + 125] = _10720
                                    mem[_10515 + 157] = stor4[cd[68]].field_512
                                    mem[_10515 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10515 + 221] = address(_10214)
                                        mem[_10515 + 241] = address(_10221)
                                        mem[_10515 + 189] = 40
                                        mem[_10515 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10515 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10515 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10515 + 346] = stor4[cd[68]].field_512
                                        mem[_10515 + 261] = 85
                                        mem[_10515 + 378] = 0
                                        mem[64] = _10515 + 410
                                        mem[_10515 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10515 + 414] = 0
                                        mem[_10515 + 446] = _10259
                                        mem[_10515 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10720, stor4[cd[68]].field_512))
                                        mem[_10515 + 510] = 128
                                        mem[_10515 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10515 + 574] = mem[s + _10515 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10259, address(sha3(0, stor4[cd[68]].field_0, _10720, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10515 + 221] = address(_10221)
                                        mem[_10515 + 241] = address(_10214)
                                        mem[_10515 + 189] = 40
                                        mem[_10515 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10515 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10515 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10515 + 346] = stor4[cd[68]].field_512
                                        mem[_10515 + 261] = 85
                                        mem[_10515 + 378] = 0
                                        mem[64] = _10515 + 410
                                        mem[_10515 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10515 + 414] = 0
                                        mem[_10515 + 446] = _10259
                                        mem[_10515 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10720, stor4[cd[68]].field_512))
                                        mem[_10515 + 510] = 128
                                        mem[_10515 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10515 + 574] = mem[s + _10515 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10259, address(sha3(0, stor4[cd[68]].field_0, _10720, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10516 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10722 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10724 = sha3(mem[_10722 + 32 len mem[_10722]])
                                    mem[_10516 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10516 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10516 + 125] = _10724
                                    mem[_10516 + 157] = stor4[cd[68]].field_512
                                    mem[_10516 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10516 + 221] = address(_10214)
                                        mem[_10516 + 241] = address(_10221)
                                        mem[_10516 + 189] = 40
                                        mem[_10516 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10516 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10516 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10516 + 346] = stor4[cd[68]].field_512
                                        mem[_10516 + 261] = 85
                                        mem[_10516 + 378] = 0
                                        mem[64] = _10516 + 410
                                        mem[_10516 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10516 + 414] = 0
                                        mem[_10516 + 446] = _10259
                                        mem[_10516 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10724, stor4[cd[68]].field_512))
                                        mem[_10516 + 510] = 128
                                        mem[_10516 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10516 + 574] = mem[s + _10516 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10259, address(sha3(0, stor4[cd[68]].field_0, _10724, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10516 + 221] = address(_10221)
                                        mem[_10516 + 241] = address(_10214)
                                        mem[_10516 + 189] = 40
                                        mem[_10516 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10516 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10516 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10516 + 346] = stor4[cd[68]].field_512
                                        mem[_10516 + 261] = 85
                                        mem[_10516 + 378] = 0
                                        mem[64] = _10516 + 410
                                        mem[_10516 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10516 + 414] = 0
                                        mem[_10516 + 446] = _10259
                                        mem[_10516 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10724, stor4[cd[68]].field_512))
                                        mem[_10516 + 510] = 128
                                        mem[_10516 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10516 + 574] = mem[s + _10516 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10259, address(sha3(0, stor4[cd[68]].field_0, _10724, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10521 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10742 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10744 = sha3(mem[_10742 + 32 len mem[_10742]])
                                    mem[_10521 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10521 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10521 + 125] = _10744
                                    mem[_10521 + 157] = stor4[cd[68]].field_512
                                    mem[_10521 + 72] = 85
                                    mem[_10521 + 189] = 0
                                    mem[64] = _10521 + 221
                                    mem[_10521 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10521 + 225] = _10259
                                    mem[_10521 + 257] = 0
                                    mem[_10521 + 289] = msg.sender
                                    mem[_10521 + 321] = 128
                                    mem[_10521 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10521 + 385] = mem[s + _10521 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10744, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10744, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10259, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10522 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10214)
                                    _10746 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10748 = sha3(mem[_10746 + 32 len mem[_10746]])
                                    mem[_10522 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10522 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10522 + 125] = _10748
                                    mem[_10522 + 157] = stor4[cd[68]].field_512
                                    mem[_10522 + 72] = 85
                                    mem[_10522 + 189] = 0
                                    mem[64] = _10522 + 221
                                    mem[_10522 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10522 + 225] = _10259
                                    mem[_10522 + 257] = 0
                                    mem[_10522 + 289] = msg.sender
                                    mem[_10522 + 321] = 128
                                    mem[_10522 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10522 + 385] = mem[s + _10522 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10748, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10748, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10259, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10316 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10519 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10316)
                                    _10734 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10736 = sha3(mem[_10734 + 32 len mem[_10734]])
                                    mem[_10519 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10519 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10519 + 125] = _10736
                                    mem[_10519 + 157] = stor4[cd[68]].field_512
                                    mem[_10519 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10519 + 221] = address(_10214)
                                        mem[_10519 + 241] = address(_10221)
                                        mem[_10519 + 189] = 40
                                        mem[_10519 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10519 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10519 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10519 + 346] = stor4[cd[68]].field_512
                                        mem[_10519 + 261] = 85
                                        mem[_10519 + 378] = 0
                                        mem[64] = _10519 + 410
                                        mem[_10519 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10519 + 414] = _10259
                                        mem[_10519 + 446] = 0
                                        mem[_10519 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10736, stor4[cd[68]].field_512))
                                        mem[_10519 + 510] = 128
                                        mem[_10519 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10519 + 574] = mem[s + _10519 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10259, 0, address(sha3(0, stor4[cd[68]].field_0, _10736, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10519 + 221] = address(_10221)
                                        mem[_10519 + 241] = address(_10214)
                                        mem[_10519 + 189] = 40
                                        mem[_10519 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10519 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10519 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10519 + 346] = stor4[cd[68]].field_512
                                        mem[_10519 + 261] = 85
                                        mem[_10519 + 378] = 0
                                        mem[64] = _10519 + 410
                                        mem[_10519 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10519 + 414] = _10259
                                        mem[_10519 + 446] = 0
                                        mem[_10519 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10736, stor4[cd[68]].field_512))
                                        mem[_10519 + 510] = 128
                                        mem[_10519 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10519 + 574] = mem[s + _10519 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10259, 0, address(sha3(0, stor4[cd[68]].field_0, _10736, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10520 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10221)
                                    _10738 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10740 = sha3(mem[_10738 + 32 len mem[_10738]])
                                    mem[_10520 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10520 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10520 + 125] = _10740
                                    mem[_10520 + 157] = stor4[cd[68]].field_512
                                    mem[_10520 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10214) == address(_10221):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10214) < address(_10221):
                                        if not address(_10214):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10520 + 221] = address(_10214)
                                        mem[_10520 + 241] = address(_10221)
                                        mem[_10520 + 189] = 40
                                        mem[_10520 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10520 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10520 + 314] = sha3(address(_10214), address(_10221))
                                        mem[_10520 + 346] = stor4[cd[68]].field_512
                                        mem[_10520 + 261] = 85
                                        mem[_10520 + 378] = 0
                                        mem[64] = _10520 + 410
                                        mem[_10520 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10520 + 414] = _10259
                                        mem[_10520 + 446] = 0
                                        mem[_10520 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10740, stor4[cd[68]].field_512))
                                        mem[_10520 + 510] = 128
                                        mem[_10520 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10520 + 574] = mem[s + _10520 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10214), address(_10221)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10259, 0, address(sha3(0, stor4[cd[68]].field_0, _10740, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10221):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10520 + 221] = address(_10221)
                                        mem[_10520 + 241] = address(_10214)
                                        mem[_10520 + 189] = 40
                                        mem[_10520 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10520 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10520 + 314] = sha3(address(_10221), address(_10214))
                                        mem[_10520 + 346] = stor4[cd[68]].field_512
                                        mem[_10520 + 261] = 85
                                        mem[_10520 + 378] = 0
                                        mem[64] = _10520 + 410
                                        mem[_10520 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10520 + 414] = _10259
                                        mem[_10520 + 446] = 0
                                        mem[_10520 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10740, stor4[cd[68]].field_512))
                                        mem[_10520 + 510] = 128
                                        mem[_10520 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10520 + 574] = mem[s + _10520 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10221), address(_10214)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10259, 0, address(sha3(0, stor4[cd[68]].field_0, _10740, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
        else:
            mem[(32 * ('cd', 36).length) + 160 len 32 * ('cd', 36).length] = call.data[calldata.size len 32 * ('cd', 36).length]
            require ('cd', 36).length
            if mem[140 len 20] != address(WETHAddress):
                revert with 0, 'SuperRouter: INVALID_PATH'
            require ('cd', 36).length - 1 < ('cd', 36).length
            if mem[(32 * ('cd', 36).length - 1) + (32 * ('cd', 36).length) + 160] < 1:
                revert with 0, 'SuperRouter: INSUFFICIENT_OUTPUT_AMOUNT'
            require ('cd', 36).length
            _6834 = mem[(32 * ('cd', 36).length) + 160 len 4], 0
            mem[(64 * ('cd', 36).length) + 160] = 0xd0e30db000000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(WETHAddress))
            call address(WETHAddress).0xd0e30db0 with:
               value _6834 wei
                 gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ('cd', 36).length
            require 1 < ('cd', 36).length
            _6847 = mem[160]
            mem[0] = cd[68]
            mem[32] = 4
            if mem[140 len 20] == mem[172 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[140 len 20] < mem[172 len 20]:
                if not mem[140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                mem[(64 * ('cd', 36).length) + 192] = address(mem[128])
                mem[(64 * ('cd', 36).length) + 212] = address(mem[160])
                mem[(64 * ('cd', 36).length) + 160] = 40
                mem[(64 * ('cd', 36).length) + 264] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[(64 * ('cd', 36).length) + 265] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[(64 * ('cd', 36).length) + 285] = sha3(mem[140 len 20], address(_6847))
                mem[(64 * ('cd', 36).length) + 317] = stor4[cd[68]].field_512
                mem[(64 * ('cd', 36).length) + 232] = 85
                require 0 < ('cd', 36).length
                mem[(64 * ('cd', 36).length) + 353] = address(sha3(0, stor4[cd[68]].field_0, sha3(mem[140 len 20], address(_6847)), stor4[cd[68]].field_512))
                mem[(64 * ('cd', 36).length) + 385] = mem[(32 * ('cd', 36).length) + 160 len 4], 0
                require ext_code.size(address(WETHAddress))
                call address(WETHAddress).0xa9059cbb with:
                     gas gas_remaining wei
                    args address(sha3(0, stor4[cd[68]].field_0, sha3(mem[140 len 20], address(_6847)), stor4[cd[68]].field_512)), mem[(32 * ('cd', 36).length) + 160 len 4], 0
                mem[(64 * ('cd', 36).length) + 349] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (64 * ('cd', 36).length) + ceil32(return_data.size) + 349
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                require ext_call.return_data[0]
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[96]
                    _10216 = mem[(32 * idx) + 128]
                    require idx + 1 < mem[96]
                    _10222 = mem[(32 * idx + 1) + 128]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                        if not mem[(32 * idx) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10261 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10525 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10758 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10760 = sha3(mem[_10758 + 32 len mem[_10758]])
                                    mem[_10525 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10525 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10525 + 125] = _10760
                                    mem[_10525 + 157] = stor4[cd[68]].field_512
                                    mem[_10525 + 72] = 85
                                    mem[_10525 + 189] = 0
                                    mem[64] = _10525 + 221
                                    mem[_10525 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10525 + 225] = 0
                                    mem[_10525 + 257] = _10261
                                    mem[_10525 + 289] = msg.sender
                                    mem[_10525 + 321] = 128
                                    mem[_10525 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10525 + 385] = mem[s + _10525 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10760, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10760, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10261, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10526 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10216)
                                    _10762 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10764 = sha3(mem[_10762 + 32 len mem[_10762]])
                                    mem[_10526 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10526 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10526 + 125] = _10764
                                    mem[_10526 + 157] = stor4[cd[68]].field_512
                                    mem[_10526 + 72] = 85
                                    mem[_10526 + 189] = 0
                                    mem[64] = _10526 + 221
                                    mem[_10526 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10526 + 225] = 0
                                    mem[_10526 + 257] = _10261
                                    mem[_10526 + 289] = msg.sender
                                    mem[_10526 + 321] = 128
                                    mem[_10526 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10526 + 385] = mem[s + _10526 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10764, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10764, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10261, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10317 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10523 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10317)
                                    _10750 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10752 = sha3(mem[_10750 + 32 len mem[_10750]])
                                    mem[_10523 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10523 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10523 + 125] = _10752
                                    mem[_10523 + 157] = stor4[cd[68]].field_512
                                    mem[_10523 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10523 + 221] = address(_10216)
                                        mem[_10523 + 241] = address(_10222)
                                        mem[_10523 + 189] = 40
                                        mem[_10523 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10523 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10523 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10523 + 346] = stor4[cd[68]].field_512
                                        mem[_10523 + 261] = 85
                                        mem[_10523 + 378] = 0
                                        mem[64] = _10523 + 410
                                        mem[_10523 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10523 + 414] = 0
                                        mem[_10523 + 446] = _10261
                                        mem[_10523 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10752, stor4[cd[68]].field_512))
                                        mem[_10523 + 510] = 128
                                        mem[_10523 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10523 + 574] = mem[s + _10523 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10261, address(sha3(0, stor4[cd[68]].field_0, _10752, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10523 + 221] = address(_10222)
                                        mem[_10523 + 241] = address(_10216)
                                        mem[_10523 + 189] = 40
                                        mem[_10523 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10523 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10523 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10523 + 346] = stor4[cd[68]].field_512
                                        mem[_10523 + 261] = 85
                                        mem[_10523 + 378] = 0
                                        mem[64] = _10523 + 410
                                        mem[_10523 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10523 + 414] = 0
                                        mem[_10523 + 446] = _10261
                                        mem[_10523 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10752, stor4[cd[68]].field_512))
                                        mem[_10523 + 510] = 128
                                        mem[_10523 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10523 + 574] = mem[s + _10523 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10261, address(sha3(0, stor4[cd[68]].field_0, _10752, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10524 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10754 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10756 = sha3(mem[_10754 + 32 len mem[_10754]])
                                    mem[_10524 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10524 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10524 + 125] = _10756
                                    mem[_10524 + 157] = stor4[cd[68]].field_512
                                    mem[_10524 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10524 + 221] = address(_10216)
                                        mem[_10524 + 241] = address(_10222)
                                        mem[_10524 + 189] = 40
                                        mem[_10524 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10524 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10524 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10524 + 346] = stor4[cd[68]].field_512
                                        mem[_10524 + 261] = 85
                                        mem[_10524 + 378] = 0
                                        mem[64] = _10524 + 410
                                        mem[_10524 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10524 + 414] = 0
                                        mem[_10524 + 446] = _10261
                                        mem[_10524 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10756, stor4[cd[68]].field_512))
                                        mem[_10524 + 510] = 128
                                        mem[_10524 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10524 + 574] = mem[s + _10524 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10261, address(sha3(0, stor4[cd[68]].field_0, _10756, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10524 + 221] = address(_10222)
                                        mem[_10524 + 241] = address(_10216)
                                        mem[_10524 + 189] = 40
                                        mem[_10524 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10524 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10524 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10524 + 346] = stor4[cd[68]].field_512
                                        mem[_10524 + 261] = 85
                                        mem[_10524 + 378] = 0
                                        mem[64] = _10524 + 410
                                        mem[_10524 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10524 + 414] = 0
                                        mem[_10524 + 446] = _10261
                                        mem[_10524 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10756, stor4[cd[68]].field_512))
                                        mem[_10524 + 510] = 128
                                        mem[_10524 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10524 + 574] = mem[s + _10524 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10261, address(sha3(0, stor4[cd[68]].field_0, _10756, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10529 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10774 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10776 = sha3(mem[_10774 + 32 len mem[_10774]])
                                    mem[_10529 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10529 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10529 + 125] = _10776
                                    mem[_10529 + 157] = stor4[cd[68]].field_512
                                    mem[_10529 + 72] = 85
                                    mem[_10529 + 189] = 0
                                    mem[64] = _10529 + 221
                                    mem[_10529 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10529 + 225] = _10261
                                    mem[_10529 + 257] = 0
                                    mem[_10529 + 289] = msg.sender
                                    mem[_10529 + 321] = 128
                                    mem[_10529 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10529 + 385] = mem[s + _10529 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10776, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10776, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10261, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10530 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10216)
                                    _10778 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10780 = sha3(mem[_10778 + 32 len mem[_10778]])
                                    mem[_10530 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10530 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10530 + 125] = _10780
                                    mem[_10530 + 157] = stor4[cd[68]].field_512
                                    mem[_10530 + 72] = 85
                                    mem[_10530 + 189] = 0
                                    mem[64] = _10530 + 221
                                    mem[_10530 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10530 + 225] = _10261
                                    mem[_10530 + 257] = 0
                                    mem[_10530 + 289] = msg.sender
                                    mem[_10530 + 321] = 128
                                    mem[_10530 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10530 + 385] = mem[s + _10530 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10780, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10780, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10261, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10318 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10527 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10318)
                                    _10766 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10768 = sha3(mem[_10766 + 32 len mem[_10766]])
                                    mem[_10527 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10527 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10527 + 125] = _10768
                                    mem[_10527 + 157] = stor4[cd[68]].field_512
                                    mem[_10527 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10527 + 221] = address(_10216)
                                        mem[_10527 + 241] = address(_10222)
                                        mem[_10527 + 189] = 40
                                        mem[_10527 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10527 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10527 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10527 + 346] = stor4[cd[68]].field_512
                                        mem[_10527 + 261] = 85
                                        mem[_10527 + 378] = 0
                                        mem[64] = _10527 + 410
                                        mem[_10527 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10527 + 414] = _10261
                                        mem[_10527 + 446] = 0
                                        mem[_10527 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10768, stor4[cd[68]].field_512))
                                        mem[_10527 + 510] = 128
                                        mem[_10527 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10527 + 574] = mem[s + _10527 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10261, 0, address(sha3(0, stor4[cd[68]].field_0, _10768, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10527 + 221] = address(_10222)
                                        mem[_10527 + 241] = address(_10216)
                                        mem[_10527 + 189] = 40
                                        mem[_10527 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10527 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10527 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10527 + 346] = stor4[cd[68]].field_512
                                        mem[_10527 + 261] = 85
                                        mem[_10527 + 378] = 0
                                        mem[64] = _10527 + 410
                                        mem[_10527 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10527 + 414] = _10261
                                        mem[_10527 + 446] = 0
                                        mem[_10527 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10768, stor4[cd[68]].field_512))
                                        mem[_10527 + 510] = 128
                                        mem[_10527 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10527 + 574] = mem[s + _10527 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10261, 0, address(sha3(0, stor4[cd[68]].field_0, _10768, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10528 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10770 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10772 = sha3(mem[_10770 + 32 len mem[_10770]])
                                    mem[_10528 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10528 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10528 + 125] = _10772
                                    mem[_10528 + 157] = stor4[cd[68]].field_512
                                    mem[_10528 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10528 + 221] = address(_10216)
                                        mem[_10528 + 241] = address(_10222)
                                        mem[_10528 + 189] = 40
                                        mem[_10528 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10528 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10528 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10528 + 346] = stor4[cd[68]].field_512
                                        mem[_10528 + 261] = 85
                                        mem[_10528 + 378] = 0
                                        mem[64] = _10528 + 410
                                        mem[_10528 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10528 + 414] = _10261
                                        mem[_10528 + 446] = 0
                                        mem[_10528 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10772, stor4[cd[68]].field_512))
                                        mem[_10528 + 510] = 128
                                        mem[_10528 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10528 + 574] = mem[s + _10528 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10261, 0, address(sha3(0, stor4[cd[68]].field_0, _10772, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10528 + 221] = address(_10222)
                                        mem[_10528 + 241] = address(_10216)
                                        mem[_10528 + 189] = 40
                                        mem[_10528 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10528 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10528 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10528 + 346] = stor4[cd[68]].field_512
                                        mem[_10528 + 261] = 85
                                        mem[_10528 + 378] = 0
                                        mem[64] = _10528 + 410
                                        mem[_10528 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10528 + 414] = _10261
                                        mem[_10528 + 446] = 0
                                        mem[_10528 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10772, stor4[cd[68]].field_512))
                                        mem[_10528 + 510] = 128
                                        mem[_10528 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10528 + 574] = mem[s + _10528 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10261, 0, address(sha3(0, stor4[cd[68]].field_0, _10772, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10263 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10533 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10790 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10792 = sha3(mem[_10790 + 32 len mem[_10790]])
                                    mem[_10533 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10533 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10533 + 125] = _10792
                                    mem[_10533 + 157] = stor4[cd[68]].field_512
                                    mem[_10533 + 72] = 85
                                    mem[_10533 + 189] = 0
                                    mem[64] = _10533 + 221
                                    mem[_10533 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10533 + 225] = 0
                                    mem[_10533 + 257] = _10263
                                    mem[_10533 + 289] = msg.sender
                                    mem[_10533 + 321] = 128
                                    mem[_10533 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10533 + 385] = mem[s + _10533 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10792, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10792, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10263, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10534 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10216)
                                    _10794 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10796 = sha3(mem[_10794 + 32 len mem[_10794]])
                                    mem[_10534 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10534 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10534 + 125] = _10796
                                    mem[_10534 + 157] = stor4[cd[68]].field_512
                                    mem[_10534 + 72] = 85
                                    mem[_10534 + 189] = 0
                                    mem[64] = _10534 + 221
                                    mem[_10534 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10534 + 225] = 0
                                    mem[_10534 + 257] = _10263
                                    mem[_10534 + 289] = msg.sender
                                    mem[_10534 + 321] = 128
                                    mem[_10534 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10534 + 385] = mem[s + _10534 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10796, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10796, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10263, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10319 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10531 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10319)
                                    _10782 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10784 = sha3(mem[_10782 + 32 len mem[_10782]])
                                    mem[_10531 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10531 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10531 + 125] = _10784
                                    mem[_10531 + 157] = stor4[cd[68]].field_512
                                    mem[_10531 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10531 + 221] = address(_10216)
                                        mem[_10531 + 241] = address(_10222)
                                        mem[_10531 + 189] = 40
                                        mem[_10531 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10531 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10531 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10531 + 346] = stor4[cd[68]].field_512
                                        mem[_10531 + 261] = 85
                                        mem[_10531 + 378] = 0
                                        mem[64] = _10531 + 410
                                        mem[_10531 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10531 + 414] = 0
                                        mem[_10531 + 446] = _10263
                                        mem[_10531 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10784, stor4[cd[68]].field_512))
                                        mem[_10531 + 510] = 128
                                        mem[_10531 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10531 + 574] = mem[s + _10531 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10263, address(sha3(0, stor4[cd[68]].field_0, _10784, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10531 + 221] = address(_10222)
                                        mem[_10531 + 241] = address(_10216)
                                        mem[_10531 + 189] = 40
                                        mem[_10531 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10531 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10531 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10531 + 346] = stor4[cd[68]].field_512
                                        mem[_10531 + 261] = 85
                                        mem[_10531 + 378] = 0
                                        mem[64] = _10531 + 410
                                        mem[_10531 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10531 + 414] = 0
                                        mem[_10531 + 446] = _10263
                                        mem[_10531 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10784, stor4[cd[68]].field_512))
                                        mem[_10531 + 510] = 128
                                        mem[_10531 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10531 + 574] = mem[s + _10531 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10263, address(sha3(0, stor4[cd[68]].field_0, _10784, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10532 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10786 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10788 = sha3(mem[_10786 + 32 len mem[_10786]])
                                    mem[_10532 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10532 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10532 + 125] = _10788
                                    mem[_10532 + 157] = stor4[cd[68]].field_512
                                    mem[_10532 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10532 + 221] = address(_10216)
                                        mem[_10532 + 241] = address(_10222)
                                        mem[_10532 + 189] = 40
                                        mem[_10532 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10532 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10532 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10532 + 346] = stor4[cd[68]].field_512
                                        mem[_10532 + 261] = 85
                                        mem[_10532 + 378] = 0
                                        mem[64] = _10532 + 410
                                        mem[_10532 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10532 + 414] = 0
                                        mem[_10532 + 446] = _10263
                                        mem[_10532 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10788, stor4[cd[68]].field_512))
                                        mem[_10532 + 510] = 128
                                        mem[_10532 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10532 + 574] = mem[s + _10532 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10263, address(sha3(0, stor4[cd[68]].field_0, _10788, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10532 + 221] = address(_10222)
                                        mem[_10532 + 241] = address(_10216)
                                        mem[_10532 + 189] = 40
                                        mem[_10532 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10532 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10532 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10532 + 346] = stor4[cd[68]].field_512
                                        mem[_10532 + 261] = 85
                                        mem[_10532 + 378] = 0
                                        mem[64] = _10532 + 410
                                        mem[_10532 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10532 + 414] = 0
                                        mem[_10532 + 446] = _10263
                                        mem[_10532 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10788, stor4[cd[68]].field_512))
                                        mem[_10532 + 510] = 128
                                        mem[_10532 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10532 + 574] = mem[s + _10532 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10263, address(sha3(0, stor4[cd[68]].field_0, _10788, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10537 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10806 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10808 = sha3(mem[_10806 + 32 len mem[_10806]])
                                    mem[_10537 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10537 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10537 + 125] = _10808
                                    mem[_10537 + 157] = stor4[cd[68]].field_512
                                    mem[_10537 + 72] = 85
                                    mem[_10537 + 189] = 0
                                    mem[64] = _10537 + 221
                                    mem[_10537 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10537 + 225] = _10263
                                    mem[_10537 + 257] = 0
                                    mem[_10537 + 289] = msg.sender
                                    mem[_10537 + 321] = 128
                                    mem[_10537 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10537 + 385] = mem[s + _10537 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10808, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10808, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10263, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10538 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10216)
                                    _10810 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10812 = sha3(mem[_10810 + 32 len mem[_10810]])
                                    mem[_10538 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10538 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10538 + 125] = _10812
                                    mem[_10538 + 157] = stor4[cd[68]].field_512
                                    mem[_10538 + 72] = 85
                                    mem[_10538 + 189] = 0
                                    mem[64] = _10538 + 221
                                    mem[_10538 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10538 + 225] = _10263
                                    mem[_10538 + 257] = 0
                                    mem[_10538 + 289] = msg.sender
                                    mem[_10538 + 321] = 128
                                    mem[_10538 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10538 + 385] = mem[s + _10538 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10812, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10812, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10263, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10320 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10535 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10320)
                                    _10798 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10800 = sha3(mem[_10798 + 32 len mem[_10798]])
                                    mem[_10535 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10535 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10535 + 125] = _10800
                                    mem[_10535 + 157] = stor4[cd[68]].field_512
                                    mem[_10535 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10535 + 221] = address(_10216)
                                        mem[_10535 + 241] = address(_10222)
                                        mem[_10535 + 189] = 40
                                        mem[_10535 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10535 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10535 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10535 + 346] = stor4[cd[68]].field_512
                                        mem[_10535 + 261] = 85
                                        mem[_10535 + 378] = 0
                                        mem[64] = _10535 + 410
                                        mem[_10535 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10535 + 414] = _10263
                                        mem[_10535 + 446] = 0
                                        mem[_10535 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10800, stor4[cd[68]].field_512))
                                        mem[_10535 + 510] = 128
                                        mem[_10535 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10535 + 574] = mem[s + _10535 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10263, 0, address(sha3(0, stor4[cd[68]].field_0, _10800, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10535 + 221] = address(_10222)
                                        mem[_10535 + 241] = address(_10216)
                                        mem[_10535 + 189] = 40
                                        mem[_10535 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10535 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10535 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10535 + 346] = stor4[cd[68]].field_512
                                        mem[_10535 + 261] = 85
                                        mem[_10535 + 378] = 0
                                        mem[64] = _10535 + 410
                                        mem[_10535 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10535 + 414] = _10263
                                        mem[_10535 + 446] = 0
                                        mem[_10535 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10800, stor4[cd[68]].field_512))
                                        mem[_10535 + 510] = 128
                                        mem[_10535 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10535 + 574] = mem[s + _10535 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10263, 0, address(sha3(0, stor4[cd[68]].field_0, _10800, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10536 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10222)
                                    _10802 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10804 = sha3(mem[_10802 + 32 len mem[_10802]])
                                    mem[_10536 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10536 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10536 + 125] = _10804
                                    mem[_10536 + 157] = stor4[cd[68]].field_512
                                    mem[_10536 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10216) == address(_10222):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10216) < address(_10222):
                                        if not address(_10216):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10536 + 221] = address(_10216)
                                        mem[_10536 + 241] = address(_10222)
                                        mem[_10536 + 189] = 40
                                        mem[_10536 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10536 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10536 + 314] = sha3(address(_10216), address(_10222))
                                        mem[_10536 + 346] = stor4[cd[68]].field_512
                                        mem[_10536 + 261] = 85
                                        mem[_10536 + 378] = 0
                                        mem[64] = _10536 + 410
                                        mem[_10536 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10536 + 414] = _10263
                                        mem[_10536 + 446] = 0
                                        mem[_10536 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10804, stor4[cd[68]].field_512))
                                        mem[_10536 + 510] = 128
                                        mem[_10536 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10536 + 574] = mem[s + _10536 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10216), address(_10222)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10263, 0, address(sha3(0, stor4[cd[68]].field_0, _10804, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10222):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10536 + 221] = address(_10222)
                                        mem[_10536 + 241] = address(_10216)
                                        mem[_10536 + 189] = 40
                                        mem[_10536 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10536 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10536 + 314] = sha3(address(_10222), address(_10216))
                                        mem[_10536 + 346] = stor4[cd[68]].field_512
                                        mem[_10536 + 261] = 85
                                        mem[_10536 + 378] = 0
                                        mem[64] = _10536 + 410
                                        mem[_10536 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10536 + 414] = _10263
                                        mem[_10536 + 446] = 0
                                        mem[_10536 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10804, stor4[cd[68]].field_512))
                                        mem[_10536 + 510] = 128
                                        mem[_10536 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10536 + 574] = mem[s + _10536 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10222), address(_10216)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10263, 0, address(sha3(0, stor4[cd[68]].field_0, _10804, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
            else:
                if not mem[172 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                mem[(64 * ('cd', 36).length) + 192] = address(mem[160])
                mem[(64 * ('cd', 36).length) + 212] = address(mem[128])
                mem[(64 * ('cd', 36).length) + 160] = 40
                mem[(64 * ('cd', 36).length) + 264] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[(64 * ('cd', 36).length) + 265] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[(64 * ('cd', 36).length) + 285] = sha3(mem[(64 * ('cd', 36).length) + 192 len 20], mem[140 len 20])
                mem[(64 * ('cd', 36).length) + 317] = stor4[cd[68]].field_512
                mem[(64 * ('cd', 36).length) + 232] = 85
                require 0 < ('cd', 36).length
                mem[(64 * ('cd', 36).length) + 353] = address(sha3(0, stor4[cd[68]].field_0, sha3(mem[(64 * ('cd', 36).length) + 192 len 20], mem[140 len 20]), stor4[cd[68]].field_512))
                mem[(64 * ('cd', 36).length) + 385] = mem[(32 * ('cd', 36).length) + 160 len 4], 0
                require ext_code.size(address(WETHAddress))
                call address(WETHAddress).0xa9059cbb with:
                     gas gas_remaining wei
                    args address(sha3(0, stor4[cd[68]].field_0, sha3(mem[(64 * ('cd', 36).length) + 192 len 20], mem[140 len 20]), stor4[cd[68]].field_512)), mem[(32 * ('cd', 36).length) + 160 len 4], 0
                mem[(64 * ('cd', 36).length) + 349] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (64 * ('cd', 36).length) + ceil32(return_data.size) + 349
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                require ext_call.return_data[0]
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[96]
                    _10218 = mem[(32 * idx) + 128]
                    require idx + 1 < mem[96]
                    _10223 = mem[(32 * idx + 1) + 128]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                        if not mem[(32 * idx) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10265 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10541 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10822 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10824 = sha3(mem[_10822 + 32 len mem[_10822]])
                                    mem[_10541 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10541 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10541 + 125] = _10824
                                    mem[_10541 + 157] = stor4[cd[68]].field_512
                                    mem[_10541 + 72] = 85
                                    mem[_10541 + 189] = 0
                                    mem[64] = _10541 + 221
                                    mem[_10541 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10541 + 225] = 0
                                    mem[_10541 + 257] = _10265
                                    mem[_10541 + 289] = msg.sender
                                    mem[_10541 + 321] = 128
                                    mem[_10541 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10541 + 385] = mem[s + _10541 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10824, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10824, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10265, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10542 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10218)
                                    _10826 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10828 = sha3(mem[_10826 + 32 len mem[_10826]])
                                    mem[_10542 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10542 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10542 + 125] = _10828
                                    mem[_10542 + 157] = stor4[cd[68]].field_512
                                    mem[_10542 + 72] = 85
                                    mem[_10542 + 189] = 0
                                    mem[64] = _10542 + 221
                                    mem[_10542 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10542 + 225] = 0
                                    mem[_10542 + 257] = _10265
                                    mem[_10542 + 289] = msg.sender
                                    mem[_10542 + 321] = 128
                                    mem[_10542 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10542 + 385] = mem[s + _10542 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10828, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10828, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10265, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10321 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10539 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10321)
                                    _10814 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10816 = sha3(mem[_10814 + 32 len mem[_10814]])
                                    mem[_10539 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10539 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10539 + 125] = _10816
                                    mem[_10539 + 157] = stor4[cd[68]].field_512
                                    mem[_10539 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10539 + 221] = address(_10218)
                                        mem[_10539 + 241] = address(_10223)
                                        mem[_10539 + 189] = 40
                                        mem[_10539 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10539 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10539 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10539 + 346] = stor4[cd[68]].field_512
                                        mem[_10539 + 261] = 85
                                        mem[_10539 + 378] = 0
                                        mem[64] = _10539 + 410
                                        mem[_10539 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10539 + 414] = 0
                                        mem[_10539 + 446] = _10265
                                        mem[_10539 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10816, stor4[cd[68]].field_512))
                                        mem[_10539 + 510] = 128
                                        mem[_10539 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10539 + 574] = mem[s + _10539 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10265, address(sha3(0, stor4[cd[68]].field_0, _10816, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10539 + 221] = address(_10223)
                                        mem[_10539 + 241] = address(_10218)
                                        mem[_10539 + 189] = 40
                                        mem[_10539 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10539 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10539 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10539 + 346] = stor4[cd[68]].field_512
                                        mem[_10539 + 261] = 85
                                        mem[_10539 + 378] = 0
                                        mem[64] = _10539 + 410
                                        mem[_10539 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10539 + 414] = 0
                                        mem[_10539 + 446] = _10265
                                        mem[_10539 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10816, stor4[cd[68]].field_512))
                                        mem[_10539 + 510] = 128
                                        mem[_10539 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10539 + 574] = mem[s + _10539 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10265, address(sha3(0, stor4[cd[68]].field_0, _10816, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10540 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10818 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10820 = sha3(mem[_10818 + 32 len mem[_10818]])
                                    mem[_10540 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10540 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10540 + 125] = _10820
                                    mem[_10540 + 157] = stor4[cd[68]].field_512
                                    mem[_10540 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10540 + 221] = address(_10218)
                                        mem[_10540 + 241] = address(_10223)
                                        mem[_10540 + 189] = 40
                                        mem[_10540 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10540 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10540 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10540 + 346] = stor4[cd[68]].field_512
                                        mem[_10540 + 261] = 85
                                        mem[_10540 + 378] = 0
                                        mem[64] = _10540 + 410
                                        mem[_10540 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10540 + 414] = 0
                                        mem[_10540 + 446] = _10265
                                        mem[_10540 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10820, stor4[cd[68]].field_512))
                                        mem[_10540 + 510] = 128
                                        mem[_10540 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10540 + 574] = mem[s + _10540 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10265, address(sha3(0, stor4[cd[68]].field_0, _10820, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10540 + 221] = address(_10223)
                                        mem[_10540 + 241] = address(_10218)
                                        mem[_10540 + 189] = 40
                                        mem[_10540 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10540 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10540 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10540 + 346] = stor4[cd[68]].field_512
                                        mem[_10540 + 261] = 85
                                        mem[_10540 + 378] = 0
                                        mem[64] = _10540 + 410
                                        mem[_10540 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10540 + 414] = 0
                                        mem[_10540 + 446] = _10265
                                        mem[_10540 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10820, stor4[cd[68]].field_512))
                                        mem[_10540 + 510] = 128
                                        mem[_10540 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10540 + 574] = mem[s + _10540 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10265, address(sha3(0, stor4[cd[68]].field_0, _10820, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10545 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10838 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10840 = sha3(mem[_10838 + 32 len mem[_10838]])
                                    mem[_10545 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10545 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10545 + 125] = _10840
                                    mem[_10545 + 157] = stor4[cd[68]].field_512
                                    mem[_10545 + 72] = 85
                                    mem[_10545 + 189] = 0
                                    mem[64] = _10545 + 221
                                    mem[_10545 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10545 + 225] = _10265
                                    mem[_10545 + 257] = 0
                                    mem[_10545 + 289] = msg.sender
                                    mem[_10545 + 321] = 128
                                    mem[_10545 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10545 + 385] = mem[s + _10545 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10840, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10840, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10265, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10546 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10218)
                                    _10842 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10844 = sha3(mem[_10842 + 32 len mem[_10842]])
                                    mem[_10546 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10546 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10546 + 125] = _10844
                                    mem[_10546 + 157] = stor4[cd[68]].field_512
                                    mem[_10546 + 72] = 85
                                    mem[_10546 + 189] = 0
                                    mem[64] = _10546 + 221
                                    mem[_10546 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10546 + 225] = _10265
                                    mem[_10546 + 257] = 0
                                    mem[_10546 + 289] = msg.sender
                                    mem[_10546 + 321] = 128
                                    mem[_10546 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10546 + 385] = mem[s + _10546 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10844, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10844, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10265, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10322 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10543 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10322)
                                    _10830 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10832 = sha3(mem[_10830 + 32 len mem[_10830]])
                                    mem[_10543 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10543 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10543 + 125] = _10832
                                    mem[_10543 + 157] = stor4[cd[68]].field_512
                                    mem[_10543 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10543 + 221] = address(_10218)
                                        mem[_10543 + 241] = address(_10223)
                                        mem[_10543 + 189] = 40
                                        mem[_10543 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10543 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10543 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10543 + 346] = stor4[cd[68]].field_512
                                        mem[_10543 + 261] = 85
                                        mem[_10543 + 378] = 0
                                        mem[64] = _10543 + 410
                                        mem[_10543 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10543 + 414] = _10265
                                        mem[_10543 + 446] = 0
                                        mem[_10543 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10832, stor4[cd[68]].field_512))
                                        mem[_10543 + 510] = 128
                                        mem[_10543 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10543 + 574] = mem[s + _10543 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10265, 0, address(sha3(0, stor4[cd[68]].field_0, _10832, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10543 + 221] = address(_10223)
                                        mem[_10543 + 241] = address(_10218)
                                        mem[_10543 + 189] = 40
                                        mem[_10543 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10543 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10543 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10543 + 346] = stor4[cd[68]].field_512
                                        mem[_10543 + 261] = 85
                                        mem[_10543 + 378] = 0
                                        mem[64] = _10543 + 410
                                        mem[_10543 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10543 + 414] = _10265
                                        mem[_10543 + 446] = 0
                                        mem[_10543 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10832, stor4[cd[68]].field_512))
                                        mem[_10543 + 510] = 128
                                        mem[_10543 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10543 + 574] = mem[s + _10543 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10265, 0, address(sha3(0, stor4[cd[68]].field_0, _10832, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10544 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10834 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10836 = sha3(mem[_10834 + 32 len mem[_10834]])
                                    mem[_10544 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10544 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10544 + 125] = _10836
                                    mem[_10544 + 157] = stor4[cd[68]].field_512
                                    mem[_10544 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10544 + 221] = address(_10218)
                                        mem[_10544 + 241] = address(_10223)
                                        mem[_10544 + 189] = 40
                                        mem[_10544 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10544 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10544 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10544 + 346] = stor4[cd[68]].field_512
                                        mem[_10544 + 261] = 85
                                        mem[_10544 + 378] = 0
                                        mem[64] = _10544 + 410
                                        mem[_10544 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10544 + 414] = _10265
                                        mem[_10544 + 446] = 0
                                        mem[_10544 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10836, stor4[cd[68]].field_512))
                                        mem[_10544 + 510] = 128
                                        mem[_10544 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10544 + 574] = mem[s + _10544 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10265, 0, address(sha3(0, stor4[cd[68]].field_0, _10836, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10544 + 221] = address(_10223)
                                        mem[_10544 + 241] = address(_10218)
                                        mem[_10544 + 189] = 40
                                        mem[_10544 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10544 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10544 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10544 + 346] = stor4[cd[68]].field_512
                                        mem[_10544 + 261] = 85
                                        mem[_10544 + 378] = 0
                                        mem[64] = _10544 + 410
                                        mem[_10544 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10544 + 414] = _10265
                                        mem[_10544 + 446] = 0
                                        mem[_10544 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10836, stor4[cd[68]].field_512))
                                        mem[_10544 + 510] = 128
                                        mem[_10544 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10544 + 574] = mem[s + _10544 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10265, 0, address(sha3(0, stor4[cd[68]].field_0, _10836, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + 140 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _10267 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10549 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10854 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10856 = sha3(mem[_10854 + 32 len mem[_10854]])
                                    mem[_10549 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10549 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10549 + 125] = _10856
                                    mem[_10549 + 157] = stor4[cd[68]].field_512
                                    mem[_10549 + 72] = 85
                                    mem[_10549 + 189] = 0
                                    mem[64] = _10549 + 221
                                    mem[_10549 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10549 + 225] = 0
                                    mem[_10549 + 257] = _10267
                                    mem[_10549 + 289] = msg.sender
                                    mem[_10549 + 321] = 128
                                    mem[_10549 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10549 + 385] = mem[s + _10549 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10856, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10856, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10267, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10550 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10218)
                                    _10858 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10860 = sha3(mem[_10858 + 32 len mem[_10858]])
                                    mem[_10550 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10550 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10550 + 125] = _10860
                                    mem[_10550 + 157] = stor4[cd[68]].field_512
                                    mem[_10550 + 72] = 85
                                    mem[_10550 + 189] = 0
                                    mem[64] = _10550 + 221
                                    mem[_10550 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10550 + 225] = 0
                                    mem[_10550 + 257] = _10267
                                    mem[_10550 + 289] = msg.sender
                                    mem[_10550 + 321] = 128
                                    mem[_10550 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10550 + 385] = mem[s + _10550 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10860, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10860, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _10267, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10323 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10547 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10323)
                                    _10846 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10848 = sha3(mem[_10846 + 32 len mem[_10846]])
                                    mem[_10547 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10547 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10547 + 125] = _10848
                                    mem[_10547 + 157] = stor4[cd[68]].field_512
                                    mem[_10547 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10547 + 221] = address(_10218)
                                        mem[_10547 + 241] = address(_10223)
                                        mem[_10547 + 189] = 40
                                        mem[_10547 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10547 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10547 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10547 + 346] = stor4[cd[68]].field_512
                                        mem[_10547 + 261] = 85
                                        mem[_10547 + 378] = 0
                                        mem[64] = _10547 + 410
                                        mem[_10547 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10547 + 414] = 0
                                        mem[_10547 + 446] = _10267
                                        mem[_10547 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10848, stor4[cd[68]].field_512))
                                        mem[_10547 + 510] = 128
                                        mem[_10547 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10547 + 574] = mem[s + _10547 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10267, address(sha3(0, stor4[cd[68]].field_0, _10848, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10547 + 221] = address(_10223)
                                        mem[_10547 + 241] = address(_10218)
                                        mem[_10547 + 189] = 40
                                        mem[_10547 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10547 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10547 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10547 + 346] = stor4[cd[68]].field_512
                                        mem[_10547 + 261] = 85
                                        mem[_10547 + 378] = 0
                                        mem[64] = _10547 + 410
                                        mem[_10547 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10547 + 414] = 0
                                        mem[_10547 + 446] = _10267
                                        mem[_10547 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10848, stor4[cd[68]].field_512))
                                        mem[_10547 + 510] = 128
                                        mem[_10547 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10547 + 574] = mem[s + _10547 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10267, address(sha3(0, stor4[cd[68]].field_0, _10848, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10548 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10850 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10852 = sha3(mem[_10850 + 32 len mem[_10850]])
                                    mem[_10548 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10548 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10548 + 125] = _10852
                                    mem[_10548 + 157] = stor4[cd[68]].field_512
                                    mem[_10548 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10548 + 221] = address(_10218)
                                        mem[_10548 + 241] = address(_10223)
                                        mem[_10548 + 189] = 40
                                        mem[_10548 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10548 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10548 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10548 + 346] = stor4[cd[68]].field_512
                                        mem[_10548 + 261] = 85
                                        mem[_10548 + 378] = 0
                                        mem[64] = _10548 + 410
                                        mem[_10548 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10548 + 414] = 0
                                        mem[_10548 + 446] = _10267
                                        mem[_10548 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10852, stor4[cd[68]].field_512))
                                        mem[_10548 + 510] = 128
                                        mem[_10548 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10548 + 574] = mem[s + _10548 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10267, address(sha3(0, stor4[cd[68]].field_0, _10852, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10548 + 221] = address(_10223)
                                        mem[_10548 + 241] = address(_10218)
                                        mem[_10548 + 189] = 40
                                        mem[_10548 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10548 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10548 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10548 + 346] = stor4[cd[68]].field_512
                                        mem[_10548 + 261] = 85
                                        mem[_10548 + 378] = 0
                                        mem[64] = _10548 + 410
                                        mem[_10548 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10548 + 414] = 0
                                        mem[_10548 + 446] = _10267
                                        mem[_10548 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10852, stor4[cd[68]].field_512))
                                        mem[_10548 + 510] = 128
                                        mem[_10548 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10548 + 574] = mem[s + _10548 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _10267, address(sha3(0, stor4[cd[68]].field_0, _10852, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[96] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                    if not mem[(32 * idx) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10553 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10870 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10872 = sha3(mem[_10870 + 32 len mem[_10870]])
                                    mem[_10553 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10553 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10553 + 125] = _10872
                                    mem[_10553 + 157] = stor4[cd[68]].field_512
                                    mem[_10553 + 72] = 85
                                    mem[_10553 + 189] = 0
                                    mem[64] = _10553 + 221
                                    mem[_10553 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10553 + 225] = _10267
                                    mem[_10553 + 257] = 0
                                    mem[_10553 + 289] = msg.sender
                                    mem[_10553 + 321] = 128
                                    mem[_10553 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10553 + 385] = mem[s + _10553 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10872, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10872, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10267, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10554 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10218)
                                    _10874 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10876 = sha3(mem[_10874 + 32 len mem[_10874]])
                                    mem[_10554 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10554 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10554 + 125] = _10876
                                    mem[_10554 + 157] = stor4[cd[68]].field_512
                                    mem[_10554 + 72] = 85
                                    mem[_10554 + 189] = 0
                                    mem[64] = _10554 + 221
                                    mem[_10554 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_10554 + 225] = _10267
                                    mem[_10554 + 257] = 0
                                    mem[_10554 + 289] = msg.sender
                                    mem[_10554 + 321] = 128
                                    mem[_10554 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _10554 + 385] = mem[s + _10554 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _10876, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _10876, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _10267, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[96]
                                _10324 = mem[(32 * idx + 2) + 128]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                    if not mem[(32 * idx + 1) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10551 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                    mem[mem[64] + 52] = address(_10324)
                                    _10862 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10864 = sha3(mem[_10862 + 32 len mem[_10862]])
                                    mem[_10551 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10551 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10551 + 125] = _10864
                                    mem[_10551 + 157] = stor4[cd[68]].field_512
                                    mem[_10551 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10551 + 221] = address(_10218)
                                        mem[_10551 + 241] = address(_10223)
                                        mem[_10551 + 189] = 40
                                        mem[_10551 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10551 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10551 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10551 + 346] = stor4[cd[68]].field_512
                                        mem[_10551 + 261] = 85
                                        mem[_10551 + 378] = 0
                                        mem[64] = _10551 + 410
                                        mem[_10551 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10551 + 414] = _10267
                                        mem[_10551 + 446] = 0
                                        mem[_10551 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10864, stor4[cd[68]].field_512))
                                        mem[_10551 + 510] = 128
                                        mem[_10551 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10551 + 574] = mem[s + _10551 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10267, 0, address(sha3(0, stor4[cd[68]].field_0, _10864, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10551 + 221] = address(_10223)
                                        mem[_10551 + 241] = address(_10218)
                                        mem[_10551 + 189] = 40
                                        mem[_10551 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10551 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10551 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10551 + 346] = stor4[cd[68]].field_512
                                        mem[_10551 + 261] = 85
                                        mem[_10551 + 378] = 0
                                        mem[64] = _10551 + 410
                                        mem[_10551 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10551 + 414] = _10267
                                        mem[_10551 + 446] = 0
                                        mem[_10551 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10864, stor4[cd[68]].field_512))
                                        mem[_10551 + 510] = 128
                                        mem[_10551 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10551 + 574] = mem[s + _10551 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10267, 0, address(sha3(0, stor4[cd[68]].field_0, _10864, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + 140 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _10552 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                    mem[mem[64] + 52] = address(_10223)
                                    _10866 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _10868 = sha3(mem[_10866 + 32 len mem[_10866]])
                                    mem[_10552 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_10552 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_10552 + 125] = _10868
                                    mem[_10552 + 157] = stor4[cd[68]].field_512
                                    mem[_10552 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_10218) == address(_10223):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_10218) < address(_10223):
                                        if not address(_10218):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10552 + 221] = address(_10218)
                                        mem[_10552 + 241] = address(_10223)
                                        mem[_10552 + 189] = 40
                                        mem[_10552 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10552 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10552 + 314] = sha3(address(_10218), address(_10223))
                                        mem[_10552 + 346] = stor4[cd[68]].field_512
                                        mem[_10552 + 261] = 85
                                        mem[_10552 + 378] = 0
                                        mem[64] = _10552 + 410
                                        mem[_10552 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10552 + 414] = _10267
                                        mem[_10552 + 446] = 0
                                        mem[_10552 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10868, stor4[cd[68]].field_512))
                                        mem[_10552 + 510] = 128
                                        mem[_10552 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10552 + 574] = mem[s + _10552 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10218), address(_10223)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10267, 0, address(sha3(0, stor4[cd[68]].field_0, _10868, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_10223):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_10552 + 221] = address(_10223)
                                        mem[_10552 + 241] = address(_10218)
                                        mem[_10552 + 189] = 40
                                        mem[_10552 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_10552 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_10552 + 314] = sha3(address(_10223), address(_10218))
                                        mem[_10552 + 346] = stor4[cd[68]].field_512
                                        mem[_10552 + 261] = 85
                                        mem[_10552 + 378] = 0
                                        mem[64] = _10552 + 410
                                        mem[_10552 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_10552 + 414] = _10267
                                        mem[_10552 + 446] = 0
                                        mem[_10552 + 478] = address(sha3(0, stor4[cd[68]].field_0, _10868, stor4[cd[68]].field_512))
                                        mem[_10552 + 510] = 128
                                        mem[_10552 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _10552 + 574] = mem[s + _10552 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_10223), address(_10218)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _10267, 0, address(sha3(0, stor4[cd[68]].field_0, _10868, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
    else:
        mem[(32 * ('cd', 36).length) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (32 * ('cd', 36).length) + ceil32(return_data.size) + 128
        require return_data.size >= 32
        _6809 = mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32
        require mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32 <= test266151307()
        require (32 * ('cd', 36).length) + mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32 + 159 < (32 * ('cd', 36).length) + return_data.size + 128
        _6810 = mem[(32 * ('cd', 36).length) + mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32 + 128]
        require mem[(32 * ('cd', 36).length) + mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32 + 128] <= test266151307()
        require (32 * mem[(32 * ('cd', 36).length) + mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32 + 128]) + 32 >= 0 and (32 * ('cd', 36).length) + ceil32(return_data.size) + (32 * mem[(32 * ('cd', 36).length) + mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32 + 128]) + 160 <= test266151307()
        mem[64] = (32 * ('cd', 36).length) + ceil32(return_data.size) + (32 * mem[(32 * ('cd', 36).length) + mem[(32 * ('cd', 36).length) + 128 len 4], Mask(224, 32, cd[4]) >> 32 + 128]) + 160
        mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 128] = _6810
        require return_data.size >= _6809 + (32 * _6810) + 32
        mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 160 len 32 * _6810] = mem[(32 * ('cd', 36).length) + _6809 + 160 len 32 * _6810]
        require ('cd', 36).length
        if mem[140 len 20] != address(WETHAddress):
            revert with 0, 'SuperRouter: INVALID_PATH'
        require _6810 - 1 < _6810
        if mem[(32 * _6810 - 1) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 160] < 1:
            revert with 0, 'SuperRouter: INSUFFICIENT_OUTPUT_AMOUNT'
        require _6810
        _10289 = mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 160]
        mem[mem[64]] = 0xd0e30db000000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(WETHAddress))
        call address(WETHAddress).0xd0e30db0 with:
           value _10289 wei
             gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require ('cd', 36).length
        _10358 = mem[128]
        require 1 < ('cd', 36).length
        _10360 = mem[160]
        mem[0] = cd[68]
        mem[32] = 4
        if mem[140 len 20] == mem[172 len 20]:
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if mem[140 len 20] < mem[172 len 20]:
            if not mem[140 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            _10878 = mem[64]
            mem[mem[64] + 32] = address(mem[128])
            mem[mem[64] + 52] = address(_10360)
            _11074 = mem[64]
            mem[mem[64]] = 40
            mem[64] = mem[64] + 72
            _11076 = sha3(mem[_11074 + 32 len mem[_11074]])
            mem[_10878 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
            mem[_10878 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
            mem[_10878 + 125] = _11076
            mem[_10878 + 157] = stor4[cd[68]].field_512
            mem[_10878 + 72] = 85
            require 0 < _6810
            _11218 = mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 160]
            mem[_10878 + 193] = address(sha3(0, stor4[cd[68]].field_0, _11076, stor4[cd[68]].field_512))
            mem[_10878 + 225] = _11218
            require ext_code.size(address(WETHAddress))
            call address(WETHAddress).0xa9059cbb with:
                 gas gas_remaining wei
                args address(sha3(0, stor4[cd[68]].field_0, _11076, stor4[cd[68]].field_512)), _11218
            mem[_10878 + 189] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = _10878 + ceil32(return_data.size) + 189
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            require ext_call.return_data[0]
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[96]
                _13590 = mem[(32 * idx) + 128]
                require idx + 1 < mem[96]
                _13594 = mem[(32 * idx + 1) + 128]
                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                    if not mem[(32 * idx) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 128]
                    _13800 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 160]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13914 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _13984 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _13986 = sha3(mem[_13984 + 32 len mem[_13984]])
                                mem[_13914 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13914 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13914 + 125] = _13986
                                mem[_13914 + 157] = stor4[cd[68]].field_512
                                mem[_13914 + 72] = 85
                                mem[_13914 + 189] = 0
                                mem[64] = _13914 + 221
                                mem[_13914 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13914 + 225] = 0
                                mem[_13914 + 257] = _13800
                                mem[_13914 + 289] = msg.sender
                                mem[_13914 + 321] = 128
                                mem[_13914 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13914 + 385] = mem[s + _13914 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _13986, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _13986, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13800, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13915 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13590)
                                _13988 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _13990 = sha3(mem[_13988 + 32 len mem[_13988]])
                                mem[_13915 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13915 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13915 + 125] = _13990
                                mem[_13915 + 157] = stor4[cd[68]].field_512
                                mem[_13915 + 72] = 85
                                mem[_13915 + 189] = 0
                                mem[64] = _13915 + 221
                                mem[_13915 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13915 + 225] = 0
                                mem[_13915 + 257] = _13800
                                mem[_13915 + 289] = msg.sender
                                mem[_13915 + 321] = 128
                                mem[_13915 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13915 + 385] = mem[s + _13915 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _13990, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _13990, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13800, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13824 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13912 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13824)
                                _13976 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _13978 = sha3(mem[_13976 + 32 len mem[_13976]])
                                mem[_13912 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13912 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13912 + 125] = _13978
                                mem[_13912 + 157] = stor4[cd[68]].field_512
                                mem[_13912 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13912 + 221] = address(_13590)
                                    mem[_13912 + 241] = address(_13594)
                                    mem[_13912 + 189] = 40
                                    mem[_13912 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13912 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13912 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13912 + 346] = stor4[cd[68]].field_512
                                    mem[_13912 + 261] = 85
                                    mem[_13912 + 378] = 0
                                    mem[64] = _13912 + 410
                                    mem[_13912 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13912 + 414] = 0
                                    mem[_13912 + 446] = _13800
                                    mem[_13912 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13978, stor4[cd[68]].field_512))
                                    mem[_13912 + 510] = 128
                                    mem[_13912 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13912 + 574] = mem[s + _13912 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13800, address(sha3(0, stor4[cd[68]].field_0, _13978, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13912 + 221] = address(_13594)
                                    mem[_13912 + 241] = address(_13590)
                                    mem[_13912 + 189] = 40
                                    mem[_13912 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13912 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13912 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13912 + 346] = stor4[cd[68]].field_512
                                    mem[_13912 + 261] = 85
                                    mem[_13912 + 378] = 0
                                    mem[64] = _13912 + 410
                                    mem[_13912 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13912 + 414] = 0
                                    mem[_13912 + 446] = _13800
                                    mem[_13912 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13978, stor4[cd[68]].field_512))
                                    mem[_13912 + 510] = 128
                                    mem[_13912 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13912 + 574] = mem[s + _13912 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13800, address(sha3(0, stor4[cd[68]].field_0, _13978, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13913 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _13980 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _13982 = sha3(mem[_13980 + 32 len mem[_13980]])
                                mem[_13913 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13913 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13913 + 125] = _13982
                                mem[_13913 + 157] = stor4[cd[68]].field_512
                                mem[_13913 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13913 + 221] = address(_13590)
                                    mem[_13913 + 241] = address(_13594)
                                    mem[_13913 + 189] = 40
                                    mem[_13913 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13913 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13913 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13913 + 346] = stor4[cd[68]].field_512
                                    mem[_13913 + 261] = 85
                                    mem[_13913 + 378] = 0
                                    mem[64] = _13913 + 410
                                    mem[_13913 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13913 + 414] = 0
                                    mem[_13913 + 446] = _13800
                                    mem[_13913 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13982, stor4[cd[68]].field_512))
                                    mem[_13913 + 510] = 128
                                    mem[_13913 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13913 + 574] = mem[s + _13913 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13800, address(sha3(0, stor4[cd[68]].field_0, _13982, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13913 + 221] = address(_13594)
                                    mem[_13913 + 241] = address(_13590)
                                    mem[_13913 + 189] = 40
                                    mem[_13913 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13913 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13913 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13913 + 346] = stor4[cd[68]].field_512
                                    mem[_13913 + 261] = 85
                                    mem[_13913 + 378] = 0
                                    mem[64] = _13913 + 410
                                    mem[_13913 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13913 + 414] = 0
                                    mem[_13913 + 446] = _13800
                                    mem[_13913 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13982, stor4[cd[68]].field_512))
                                    mem[_13913 + 510] = 128
                                    mem[_13913 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13913 + 574] = mem[s + _13913 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13800, address(sha3(0, stor4[cd[68]].field_0, _13982, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13918 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _14000 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14002 = sha3(mem[_14000 + 32 len mem[_14000]])
                                mem[_13918 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13918 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13918 + 125] = _14002
                                mem[_13918 + 157] = stor4[cd[68]].field_512
                                mem[_13918 + 72] = 85
                                mem[_13918 + 189] = 0
                                mem[64] = _13918 + 221
                                mem[_13918 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13918 + 225] = _13800
                                mem[_13918 + 257] = 0
                                mem[_13918 + 289] = msg.sender
                                mem[_13918 + 321] = 128
                                mem[_13918 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13918 + 385] = mem[s + _13918 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14002, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14002, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13800, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13919 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13590)
                                _14004 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14006 = sha3(mem[_14004 + 32 len mem[_14004]])
                                mem[_13919 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13919 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13919 + 125] = _14006
                                mem[_13919 + 157] = stor4[cd[68]].field_512
                                mem[_13919 + 72] = 85
                                mem[_13919 + 189] = 0
                                mem[64] = _13919 + 221
                                mem[_13919 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13919 + 225] = _13800
                                mem[_13919 + 257] = 0
                                mem[_13919 + 289] = msg.sender
                                mem[_13919 + 321] = 128
                                mem[_13919 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13919 + 385] = mem[s + _13919 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14006, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14006, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13800, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13825 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13916 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13825)
                                _13992 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _13994 = sha3(mem[_13992 + 32 len mem[_13992]])
                                mem[_13916 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13916 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13916 + 125] = _13994
                                mem[_13916 + 157] = stor4[cd[68]].field_512
                                mem[_13916 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13916 + 221] = address(_13590)
                                    mem[_13916 + 241] = address(_13594)
                                    mem[_13916 + 189] = 40
                                    mem[_13916 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13916 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13916 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13916 + 346] = stor4[cd[68]].field_512
                                    mem[_13916 + 261] = 85
                                    mem[_13916 + 378] = 0
                                    mem[64] = _13916 + 410
                                    mem[_13916 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13916 + 414] = _13800
                                    mem[_13916 + 446] = 0
                                    mem[_13916 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13994, stor4[cd[68]].field_512))
                                    mem[_13916 + 510] = 128
                                    mem[_13916 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13916 + 574] = mem[s + _13916 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13800, 0, address(sha3(0, stor4[cd[68]].field_0, _13994, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13916 + 221] = address(_13594)
                                    mem[_13916 + 241] = address(_13590)
                                    mem[_13916 + 189] = 40
                                    mem[_13916 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13916 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13916 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13916 + 346] = stor4[cd[68]].field_512
                                    mem[_13916 + 261] = 85
                                    mem[_13916 + 378] = 0
                                    mem[64] = _13916 + 410
                                    mem[_13916 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13916 + 414] = _13800
                                    mem[_13916 + 446] = 0
                                    mem[_13916 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13994, stor4[cd[68]].field_512))
                                    mem[_13916 + 510] = 128
                                    mem[_13916 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13916 + 574] = mem[s + _13916 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13800, 0, address(sha3(0, stor4[cd[68]].field_0, _13994, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13917 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _13996 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _13998 = sha3(mem[_13996 + 32 len mem[_13996]])
                                mem[_13917 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13917 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13917 + 125] = _13998
                                mem[_13917 + 157] = stor4[cd[68]].field_512
                                mem[_13917 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13917 + 221] = address(_13590)
                                    mem[_13917 + 241] = address(_13594)
                                    mem[_13917 + 189] = 40
                                    mem[_13917 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13917 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13917 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13917 + 346] = stor4[cd[68]].field_512
                                    mem[_13917 + 261] = 85
                                    mem[_13917 + 378] = 0
                                    mem[64] = _13917 + 410
                                    mem[_13917 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13917 + 414] = _13800
                                    mem[_13917 + 446] = 0
                                    mem[_13917 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13998, stor4[cd[68]].field_512))
                                    mem[_13917 + 510] = 128
                                    mem[_13917 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13917 + 574] = mem[s + _13917 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13800, 0, address(sha3(0, stor4[cd[68]].field_0, _13998, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13917 + 221] = address(_13594)
                                    mem[_13917 + 241] = address(_13590)
                                    mem[_13917 + 189] = 40
                                    mem[_13917 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13917 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13917 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13917 + 346] = stor4[cd[68]].field_512
                                    mem[_13917 + 261] = 85
                                    mem[_13917 + 378] = 0
                                    mem[64] = _13917 + 410
                                    mem[_13917 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13917 + 414] = _13800
                                    mem[_13917 + 446] = 0
                                    mem[_13917 + 478] = address(sha3(0, stor4[cd[68]].field_0, _13998, stor4[cd[68]].field_512))
                                    mem[_13917 + 510] = 128
                                    mem[_13917 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13917 + 574] = mem[s + _13917 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13800, 0, address(sha3(0, stor4[cd[68]].field_0, _13998, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 128]
                    _13802 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 160]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13922 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _14016 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14018 = sha3(mem[_14016 + 32 len mem[_14016]])
                                mem[_13922 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13922 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13922 + 125] = _14018
                                mem[_13922 + 157] = stor4[cd[68]].field_512
                                mem[_13922 + 72] = 85
                                mem[_13922 + 189] = 0
                                mem[64] = _13922 + 221
                                mem[_13922 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13922 + 225] = 0
                                mem[_13922 + 257] = _13802
                                mem[_13922 + 289] = msg.sender
                                mem[_13922 + 321] = 128
                                mem[_13922 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13922 + 385] = mem[s + _13922 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14018, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14018, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13802, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13923 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13590)
                                _14020 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14022 = sha3(mem[_14020 + 32 len mem[_14020]])
                                mem[_13923 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13923 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13923 + 125] = _14022
                                mem[_13923 + 157] = stor4[cd[68]].field_512
                                mem[_13923 + 72] = 85
                                mem[_13923 + 189] = 0
                                mem[64] = _13923 + 221
                                mem[_13923 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13923 + 225] = 0
                                mem[_13923 + 257] = _13802
                                mem[_13923 + 289] = msg.sender
                                mem[_13923 + 321] = 128
                                mem[_13923 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13923 + 385] = mem[s + _13923 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14022, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14022, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13802, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13826 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13920 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13826)
                                _14008 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14010 = sha3(mem[_14008 + 32 len mem[_14008]])
                                mem[_13920 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13920 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13920 + 125] = _14010
                                mem[_13920 + 157] = stor4[cd[68]].field_512
                                mem[_13920 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13920 + 221] = address(_13590)
                                    mem[_13920 + 241] = address(_13594)
                                    mem[_13920 + 189] = 40
                                    mem[_13920 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13920 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13920 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13920 + 346] = stor4[cd[68]].field_512
                                    mem[_13920 + 261] = 85
                                    mem[_13920 + 378] = 0
                                    mem[64] = _13920 + 410
                                    mem[_13920 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13920 + 414] = 0
                                    mem[_13920 + 446] = _13802
                                    mem[_13920 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14010, stor4[cd[68]].field_512))
                                    mem[_13920 + 510] = 128
                                    mem[_13920 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13920 + 574] = mem[s + _13920 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13802, address(sha3(0, stor4[cd[68]].field_0, _14010, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13920 + 221] = address(_13594)
                                    mem[_13920 + 241] = address(_13590)
                                    mem[_13920 + 189] = 40
                                    mem[_13920 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13920 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13920 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13920 + 346] = stor4[cd[68]].field_512
                                    mem[_13920 + 261] = 85
                                    mem[_13920 + 378] = 0
                                    mem[64] = _13920 + 410
                                    mem[_13920 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13920 + 414] = 0
                                    mem[_13920 + 446] = _13802
                                    mem[_13920 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14010, stor4[cd[68]].field_512))
                                    mem[_13920 + 510] = 128
                                    mem[_13920 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13920 + 574] = mem[s + _13920 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13802, address(sha3(0, stor4[cd[68]].field_0, _14010, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13921 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _14012 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14014 = sha3(mem[_14012 + 32 len mem[_14012]])
                                mem[_13921 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13921 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13921 + 125] = _14014
                                mem[_13921 + 157] = stor4[cd[68]].field_512
                                mem[_13921 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13921 + 221] = address(_13590)
                                    mem[_13921 + 241] = address(_13594)
                                    mem[_13921 + 189] = 40
                                    mem[_13921 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13921 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13921 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13921 + 346] = stor4[cd[68]].field_512
                                    mem[_13921 + 261] = 85
                                    mem[_13921 + 378] = 0
                                    mem[64] = _13921 + 410
                                    mem[_13921 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13921 + 414] = 0
                                    mem[_13921 + 446] = _13802
                                    mem[_13921 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14014, stor4[cd[68]].field_512))
                                    mem[_13921 + 510] = 128
                                    mem[_13921 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13921 + 574] = mem[s + _13921 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13802, address(sha3(0, stor4[cd[68]].field_0, _14014, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13921 + 221] = address(_13594)
                                    mem[_13921 + 241] = address(_13590)
                                    mem[_13921 + 189] = 40
                                    mem[_13921 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13921 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13921 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13921 + 346] = stor4[cd[68]].field_512
                                    mem[_13921 + 261] = 85
                                    mem[_13921 + 378] = 0
                                    mem[64] = _13921 + 410
                                    mem[_13921 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13921 + 414] = 0
                                    mem[_13921 + 446] = _13802
                                    mem[_13921 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14014, stor4[cd[68]].field_512))
                                    mem[_13921 + 510] = 128
                                    mem[_13921 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13921 + 574] = mem[s + _13921 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13802, address(sha3(0, stor4[cd[68]].field_0, _14014, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13926 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _14032 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14034 = sha3(mem[_14032 + 32 len mem[_14032]])
                                mem[_13926 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13926 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13926 + 125] = _14034
                                mem[_13926 + 157] = stor4[cd[68]].field_512
                                mem[_13926 + 72] = 85
                                mem[_13926 + 189] = 0
                                mem[64] = _13926 + 221
                                mem[_13926 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13926 + 225] = _13802
                                mem[_13926 + 257] = 0
                                mem[_13926 + 289] = msg.sender
                                mem[_13926 + 321] = 128
                                mem[_13926 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13926 + 385] = mem[s + _13926 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14034, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14034, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13802, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13927 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13590)
                                _14036 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14038 = sha3(mem[_14036 + 32 len mem[_14036]])
                                mem[_13927 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13927 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13927 + 125] = _14038
                                mem[_13927 + 157] = stor4[cd[68]].field_512
                                mem[_13927 + 72] = 85
                                mem[_13927 + 189] = 0
                                mem[64] = _13927 + 221
                                mem[_13927 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13927 + 225] = _13802
                                mem[_13927 + 257] = 0
                                mem[_13927 + 289] = msg.sender
                                mem[_13927 + 321] = 128
                                mem[_13927 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13927 + 385] = mem[s + _13927 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14038, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14038, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13802, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13827 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13924 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13827)
                                _14024 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14026 = sha3(mem[_14024 + 32 len mem[_14024]])
                                mem[_13924 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13924 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13924 + 125] = _14026
                                mem[_13924 + 157] = stor4[cd[68]].field_512
                                mem[_13924 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13924 + 221] = address(_13590)
                                    mem[_13924 + 241] = address(_13594)
                                    mem[_13924 + 189] = 40
                                    mem[_13924 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13924 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13924 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13924 + 346] = stor4[cd[68]].field_512
                                    mem[_13924 + 261] = 85
                                    mem[_13924 + 378] = 0
                                    mem[64] = _13924 + 410
                                    mem[_13924 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13924 + 414] = _13802
                                    mem[_13924 + 446] = 0
                                    mem[_13924 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14026, stor4[cd[68]].field_512))
                                    mem[_13924 + 510] = 128
                                    mem[_13924 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13924 + 574] = mem[s + _13924 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13802, 0, address(sha3(0, stor4[cd[68]].field_0, _14026, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13924 + 221] = address(_13594)
                                    mem[_13924 + 241] = address(_13590)
                                    mem[_13924 + 189] = 40
                                    mem[_13924 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13924 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13924 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13924 + 346] = stor4[cd[68]].field_512
                                    mem[_13924 + 261] = 85
                                    mem[_13924 + 378] = 0
                                    mem[64] = _13924 + 410
                                    mem[_13924 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13924 + 414] = _13802
                                    mem[_13924 + 446] = 0
                                    mem[_13924 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14026, stor4[cd[68]].field_512))
                                    mem[_13924 + 510] = 128
                                    mem[_13924 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13924 + 574] = mem[s + _13924 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13802, 0, address(sha3(0, stor4[cd[68]].field_0, _14026, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13925 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13594)
                                _14028 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14030 = sha3(mem[_14028 + 32 len mem[_14028]])
                                mem[_13925 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13925 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13925 + 125] = _14030
                                mem[_13925 + 157] = stor4[cd[68]].field_512
                                mem[_13925 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13590) == address(_13594):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13590) < address(_13594):
                                    if not address(_13590):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13925 + 221] = address(_13590)
                                    mem[_13925 + 241] = address(_13594)
                                    mem[_13925 + 189] = 40
                                    mem[_13925 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13925 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13925 + 314] = sha3(address(_13590), address(_13594))
                                    mem[_13925 + 346] = stor4[cd[68]].field_512
                                    mem[_13925 + 261] = 85
                                    mem[_13925 + 378] = 0
                                    mem[64] = _13925 + 410
                                    mem[_13925 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13925 + 414] = _13802
                                    mem[_13925 + 446] = 0
                                    mem[_13925 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14030, stor4[cd[68]].field_512))
                                    mem[_13925 + 510] = 128
                                    mem[_13925 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13925 + 574] = mem[s + _13925 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13590), address(_13594)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13802, 0, address(sha3(0, stor4[cd[68]].field_0, _14030, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13594):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13925 + 221] = address(_13594)
                                    mem[_13925 + 241] = address(_13590)
                                    mem[_13925 + 189] = 40
                                    mem[_13925 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13925 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13925 + 314] = sha3(address(_13594), address(_13590))
                                    mem[_13925 + 346] = stor4[cd[68]].field_512
                                    mem[_13925 + 261] = 85
                                    mem[_13925 + 378] = 0
                                    mem[64] = _13925 + 410
                                    mem[_13925 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13925 + 414] = _13802
                                    mem[_13925 + 446] = 0
                                    mem[_13925 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14030, stor4[cd[68]].field_512))
                                    mem[_13925 + 510] = 128
                                    mem[_13925 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13925 + 574] = mem[s + _13925 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13594), address(_13590)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13802, 0, address(sha3(0, stor4[cd[68]].field_0, _14030, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
        else:
            if not mem[172 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            _10879 = mem[64]
            mem[mem[64] + 32] = address(mem[160])
            mem[mem[64] + 52] = address(_10358)
            _11078 = mem[64]
            mem[mem[64]] = 40
            mem[64] = mem[64] + 72
            _11080 = sha3(mem[_11078 + 32 len mem[_11078]])
            mem[_10879 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
            mem[_10879 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
            mem[_10879 + 125] = _11080
            mem[_10879 + 157] = stor4[cd[68]].field_512
            mem[_10879 + 72] = 85
            require 0 < _6810
            _11220 = mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 160]
            mem[_10879 + 193] = address(sha3(0, stor4[cd[68]].field_0, _11080, stor4[cd[68]].field_512))
            mem[_10879 + 225] = _11220
            require ext_code.size(address(WETHAddress))
            call address(WETHAddress).0xa9059cbb with:
                 gas gas_remaining wei
                args address(sha3(0, stor4[cd[68]].field_0, _11080, stor4[cd[68]].field_512)), _11220
            mem[_10879 + 189] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = _10879 + ceil32(return_data.size) + 189
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            require ext_call.return_data[0]
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[96]
                _13592 = mem[(32 * idx) + 128]
                require idx + 1 < mem[96]
                _13595 = mem[(32 * idx + 1) + 128]
                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                    if not mem[(32 * idx) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 128]
                    _13804 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 160]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx) + 140 len 20]:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13930 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14048 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14050 = sha3(mem[_14048 + 32 len mem[_14048]])
                                mem[_13930 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13930 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13930 + 125] = _14050
                                mem[_13930 + 157] = stor4[cd[68]].field_512
                                mem[_13930 + 72] = 85
                                mem[_13930 + 189] = 0
                                mem[64] = _13930 + 221
                                mem[_13930 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13930 + 225] = 0
                                mem[_13930 + 257] = _13804
                                mem[_13930 + 289] = msg.sender
                                mem[_13930 + 321] = 128
                                mem[_13930 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13930 + 385] = mem[s + _13930 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14050, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14050, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13804, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13931 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13592)
                                _14052 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14054 = sha3(mem[_14052 + 32 len mem[_14052]])
                                mem[_13931 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13931 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13931 + 125] = _14054
                                mem[_13931 + 157] = stor4[cd[68]].field_512
                                mem[_13931 + 72] = 85
                                mem[_13931 + 189] = 0
                                mem[64] = _13931 + 221
                                mem[_13931 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13931 + 225] = 0
                                mem[_13931 + 257] = _13804
                                mem[_13931 + 289] = msg.sender
                                mem[_13931 + 321] = 128
                                mem[_13931 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13931 + 385] = mem[s + _13931 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14054, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14054, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13804, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13828 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13928 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13828)
                                _14040 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14042 = sha3(mem[_14040 + 32 len mem[_14040]])
                                mem[_13928 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13928 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13928 + 125] = _14042
                                mem[_13928 + 157] = stor4[cd[68]].field_512
                                mem[_13928 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13928 + 221] = address(_13592)
                                    mem[_13928 + 241] = address(_13595)
                                    mem[_13928 + 189] = 40
                                    mem[_13928 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13928 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13928 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13928 + 346] = stor4[cd[68]].field_512
                                    mem[_13928 + 261] = 85
                                    mem[_13928 + 378] = 0
                                    mem[64] = _13928 + 410
                                    mem[_13928 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13928 + 414] = 0
                                    mem[_13928 + 446] = _13804
                                    mem[_13928 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14042, stor4[cd[68]].field_512))
                                    mem[_13928 + 510] = 128
                                    mem[_13928 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13928 + 574] = mem[s + _13928 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13804, address(sha3(0, stor4[cd[68]].field_0, _14042, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13928 + 221] = address(_13595)
                                    mem[_13928 + 241] = address(_13592)
                                    mem[_13928 + 189] = 40
                                    mem[_13928 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13928 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13928 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13928 + 346] = stor4[cd[68]].field_512
                                    mem[_13928 + 261] = 85
                                    mem[_13928 + 378] = 0
                                    mem[64] = _13928 + 410
                                    mem[_13928 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13928 + 414] = 0
                                    mem[_13928 + 446] = _13804
                                    mem[_13928 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14042, stor4[cd[68]].field_512))
                                    mem[_13928 + 510] = 128
                                    mem[_13928 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13928 + 574] = mem[s + _13928 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13804, address(sha3(0, stor4[cd[68]].field_0, _14042, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13929 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14044 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14046 = sha3(mem[_14044 + 32 len mem[_14044]])
                                mem[_13929 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13929 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13929 + 125] = _14046
                                mem[_13929 + 157] = stor4[cd[68]].field_512
                                mem[_13929 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13929 + 221] = address(_13592)
                                    mem[_13929 + 241] = address(_13595)
                                    mem[_13929 + 189] = 40
                                    mem[_13929 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13929 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13929 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13929 + 346] = stor4[cd[68]].field_512
                                    mem[_13929 + 261] = 85
                                    mem[_13929 + 378] = 0
                                    mem[64] = _13929 + 410
                                    mem[_13929 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13929 + 414] = 0
                                    mem[_13929 + 446] = _13804
                                    mem[_13929 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14046, stor4[cd[68]].field_512))
                                    mem[_13929 + 510] = 128
                                    mem[_13929 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13929 + 574] = mem[s + _13929 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13804, address(sha3(0, stor4[cd[68]].field_0, _14046, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13929 + 221] = address(_13595)
                                    mem[_13929 + 241] = address(_13592)
                                    mem[_13929 + 189] = 40
                                    mem[_13929 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13929 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13929 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13929 + 346] = stor4[cd[68]].field_512
                                    mem[_13929 + 261] = 85
                                    mem[_13929 + 378] = 0
                                    mem[64] = _13929 + 410
                                    mem[_13929 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13929 + 414] = 0
                                    mem[_13929 + 446] = _13804
                                    mem[_13929 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14046, stor4[cd[68]].field_512))
                                    mem[_13929 + 510] = 128
                                    mem[_13929 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13929 + 574] = mem[s + _13929 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13804, address(sha3(0, stor4[cd[68]].field_0, _14046, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13934 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14064 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14066 = sha3(mem[_14064 + 32 len mem[_14064]])
                                mem[_13934 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13934 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13934 + 125] = _14066
                                mem[_13934 + 157] = stor4[cd[68]].field_512
                                mem[_13934 + 72] = 85
                                mem[_13934 + 189] = 0
                                mem[64] = _13934 + 221
                                mem[_13934 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13934 + 225] = _13804
                                mem[_13934 + 257] = 0
                                mem[_13934 + 289] = msg.sender
                                mem[_13934 + 321] = 128
                                mem[_13934 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13934 + 385] = mem[s + _13934 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14066, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14066, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13804, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13935 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13592)
                                _14068 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14070 = sha3(mem[_14068 + 32 len mem[_14068]])
                                mem[_13935 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13935 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13935 + 125] = _14070
                                mem[_13935 + 157] = stor4[cd[68]].field_512
                                mem[_13935 + 72] = 85
                                mem[_13935 + 189] = 0
                                mem[64] = _13935 + 221
                                mem[_13935 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13935 + 225] = _13804
                                mem[_13935 + 257] = 0
                                mem[_13935 + 289] = msg.sender
                                mem[_13935 + 321] = 128
                                mem[_13935 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13935 + 385] = mem[s + _13935 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14070, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14070, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13804, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13829 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13932 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13829)
                                _14056 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14058 = sha3(mem[_14056 + 32 len mem[_14056]])
                                mem[_13932 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13932 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13932 + 125] = _14058
                                mem[_13932 + 157] = stor4[cd[68]].field_512
                                mem[_13932 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13932 + 221] = address(_13592)
                                    mem[_13932 + 241] = address(_13595)
                                    mem[_13932 + 189] = 40
                                    mem[_13932 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13932 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13932 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13932 + 346] = stor4[cd[68]].field_512
                                    mem[_13932 + 261] = 85
                                    mem[_13932 + 378] = 0
                                    mem[64] = _13932 + 410
                                    mem[_13932 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13932 + 414] = _13804
                                    mem[_13932 + 446] = 0
                                    mem[_13932 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14058, stor4[cd[68]].field_512))
                                    mem[_13932 + 510] = 128
                                    mem[_13932 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13932 + 574] = mem[s + _13932 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13804, 0, address(sha3(0, stor4[cd[68]].field_0, _14058, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13932 + 221] = address(_13595)
                                    mem[_13932 + 241] = address(_13592)
                                    mem[_13932 + 189] = 40
                                    mem[_13932 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13932 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13932 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13932 + 346] = stor4[cd[68]].field_512
                                    mem[_13932 + 261] = 85
                                    mem[_13932 + 378] = 0
                                    mem[64] = _13932 + 410
                                    mem[_13932 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13932 + 414] = _13804
                                    mem[_13932 + 446] = 0
                                    mem[_13932 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14058, stor4[cd[68]].field_512))
                                    mem[_13932 + 510] = 128
                                    mem[_13932 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13932 + 574] = mem[s + _13932 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13804, 0, address(sha3(0, stor4[cd[68]].field_0, _14058, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13933 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14060 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14062 = sha3(mem[_14060 + 32 len mem[_14060]])
                                mem[_13933 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13933 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13933 + 125] = _14062
                                mem[_13933 + 157] = stor4[cd[68]].field_512
                                mem[_13933 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13933 + 221] = address(_13592)
                                    mem[_13933 + 241] = address(_13595)
                                    mem[_13933 + 189] = 40
                                    mem[_13933 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13933 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13933 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13933 + 346] = stor4[cd[68]].field_512
                                    mem[_13933 + 261] = 85
                                    mem[_13933 + 378] = 0
                                    mem[64] = _13933 + 410
                                    mem[_13933 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13933 + 414] = _13804
                                    mem[_13933 + 446] = 0
                                    mem[_13933 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14062, stor4[cd[68]].field_512))
                                    mem[_13933 + 510] = 128
                                    mem[_13933 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13933 + 574] = mem[s + _13933 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13804, 0, address(sha3(0, stor4[cd[68]].field_0, _14062, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13933 + 221] = address(_13595)
                                    mem[_13933 + 241] = address(_13592)
                                    mem[_13933 + 189] = 40
                                    mem[_13933 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13933 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13933 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13933 + 346] = stor4[cd[68]].field_512
                                    mem[_13933 + 261] = 85
                                    mem[_13933 + 378] = 0
                                    mem[64] = _13933 + 410
                                    mem[_13933 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13933 + 414] = _13804
                                    mem[_13933 + 446] = 0
                                    mem[_13933 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14062, stor4[cd[68]].field_512))
                                    mem[_13933 + 510] = 128
                                    mem[_13933 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13933 + 574] = mem[s + _13933 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13804, 0, address(sha3(0, stor4[cd[68]].field_0, _14062, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + ceil32(return_data.size) + 128]
                    _13806 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 160]
                    if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13938 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14080 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14082 = sha3(mem[_14080 + 32 len mem[_14080]])
                                mem[_13938 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13938 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13938 + 125] = _14082
                                mem[_13938 + 157] = stor4[cd[68]].field_512
                                mem[_13938 + 72] = 85
                                mem[_13938 + 189] = 0
                                mem[64] = _13938 + 221
                                mem[_13938 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13938 + 225] = 0
                                mem[_13938 + 257] = _13806
                                mem[_13938 + 289] = msg.sender
                                mem[_13938 + 321] = 128
                                mem[_13938 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13938 + 385] = mem[s + _13938 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14082, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14082, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13806, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13939 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13592)
                                _14084 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14086 = sha3(mem[_14084 + 32 len mem[_14084]])
                                mem[_13939 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13939 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13939 + 125] = _14086
                                mem[_13939 + 157] = stor4[cd[68]].field_512
                                mem[_13939 + 72] = 85
                                mem[_13939 + 189] = 0
                                mem[64] = _13939 + 221
                                mem[_13939 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13939 + 225] = 0
                                mem[_13939 + 257] = _13806
                                mem[_13939 + 289] = msg.sender
                                mem[_13939 + 321] = 128
                                mem[_13939 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13939 + 385] = mem[s + _13939 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14086, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14086, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _13806, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13830 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13936 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13830)
                                _14072 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14074 = sha3(mem[_14072 + 32 len mem[_14072]])
                                mem[_13936 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13936 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13936 + 125] = _14074
                                mem[_13936 + 157] = stor4[cd[68]].field_512
                                mem[_13936 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13936 + 221] = address(_13592)
                                    mem[_13936 + 241] = address(_13595)
                                    mem[_13936 + 189] = 40
                                    mem[_13936 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13936 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13936 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13936 + 346] = stor4[cd[68]].field_512
                                    mem[_13936 + 261] = 85
                                    mem[_13936 + 378] = 0
                                    mem[64] = _13936 + 410
                                    mem[_13936 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13936 + 414] = 0
                                    mem[_13936 + 446] = _13806
                                    mem[_13936 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14074, stor4[cd[68]].field_512))
                                    mem[_13936 + 510] = 128
                                    mem[_13936 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13936 + 574] = mem[s + _13936 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13806, address(sha3(0, stor4[cd[68]].field_0, _14074, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13936 + 221] = address(_13595)
                                    mem[_13936 + 241] = address(_13592)
                                    mem[_13936 + 189] = 40
                                    mem[_13936 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13936 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13936 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13936 + 346] = stor4[cd[68]].field_512
                                    mem[_13936 + 261] = 85
                                    mem[_13936 + 378] = 0
                                    mem[64] = _13936 + 410
                                    mem[_13936 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13936 + 414] = 0
                                    mem[_13936 + 446] = _13806
                                    mem[_13936 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14074, stor4[cd[68]].field_512))
                                    mem[_13936 + 510] = 128
                                    mem[_13936 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13936 + 574] = mem[s + _13936 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13806, address(sha3(0, stor4[cd[68]].field_0, _14074, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13937 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14076 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14078 = sha3(mem[_14076 + 32 len mem[_14076]])
                                mem[_13937 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13937 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13937 + 125] = _14078
                                mem[_13937 + 157] = stor4[cd[68]].field_512
                                mem[_13937 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13937 + 221] = address(_13592)
                                    mem[_13937 + 241] = address(_13595)
                                    mem[_13937 + 189] = 40
                                    mem[_13937 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13937 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13937 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13937 + 346] = stor4[cd[68]].field_512
                                    mem[_13937 + 261] = 85
                                    mem[_13937 + 378] = 0
                                    mem[64] = _13937 + 410
                                    mem[_13937 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13937 + 414] = 0
                                    mem[_13937 + 446] = _13806
                                    mem[_13937 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14078, stor4[cd[68]].field_512))
                                    mem[_13937 + 510] = 128
                                    mem[_13937 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13937 + 574] = mem[s + _13937 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13806, address(sha3(0, stor4[cd[68]].field_0, _14078, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13937 + 221] = address(_13595)
                                    mem[_13937 + 241] = address(_13592)
                                    mem[_13937 + 189] = 40
                                    mem[_13937 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13937 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13937 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13937 + 346] = stor4[cd[68]].field_512
                                    mem[_13937 + 261] = 85
                                    mem[_13937 + 378] = 0
                                    mem[64] = _13937 + 410
                                    mem[_13937 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13937 + 414] = 0
                                    mem[_13937 + 446] = _13806
                                    mem[_13937 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14078, stor4[cd[68]].field_512))
                                    mem[_13937 + 510] = 128
                                    mem[_13937 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13937 + 574] = mem[s + _13937 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _13806, address(sha3(0, stor4[cd[68]].field_0, _14078, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[96] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                                if not mem[(32 * idx) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13942 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14096 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14098 = sha3(mem[_14096 + 32 len mem[_14096]])
                                mem[_13942 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13942 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13942 + 125] = _14098
                                mem[_13942 + 157] = stor4[cd[68]].field_512
                                mem[_13942 + 72] = 85
                                mem[_13942 + 189] = 0
                                mem[64] = _13942 + 221
                                mem[_13942 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13942 + 225] = _13806
                                mem[_13942 + 257] = 0
                                mem[_13942 + 289] = msg.sender
                                mem[_13942 + 321] = 128
                                mem[_13942 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13942 + 385] = mem[s + _13942 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14098, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14098, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13806, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13943 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13592)
                                _14100 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14102 = sha3(mem[_14100 + 32 len mem[_14100]])
                                mem[_13943 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13943 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13943 + 125] = _14102
                                mem[_13943 + 157] = stor4[cd[68]].field_512
                                mem[_13943 + 72] = 85
                                mem[_13943 + 189] = 0
                                mem[64] = _13943 + 221
                                mem[_13943 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_13943 + 225] = _13806
                                mem[_13943 + 257] = 0
                                mem[_13943 + 289] = msg.sender
                                mem[_13943 + 321] = 128
                                mem[_13943 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _13943 + 385] = mem[s + _13943 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _14102, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _14102, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _13806, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[96]
                            _13831 = mem[(32 * idx + 2) + 128]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + 140 len 20] == mem[(32 * idx + 2) + 140 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + 140 len 20] < mem[(32 * idx + 2) + 140 len 20]:
                                if not mem[(32 * idx + 1) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13940 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                                mem[mem[64] + 52] = address(_13831)
                                _14088 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14090 = sha3(mem[_14088 + 32 len mem[_14088]])
                                mem[_13940 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13940 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13940 + 125] = _14090
                                mem[_13940 + 157] = stor4[cd[68]].field_512
                                mem[_13940 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13940 + 221] = address(_13592)
                                    mem[_13940 + 241] = address(_13595)
                                    mem[_13940 + 189] = 40
                                    mem[_13940 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13940 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13940 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13940 + 346] = stor4[cd[68]].field_512
                                    mem[_13940 + 261] = 85
                                    mem[_13940 + 378] = 0
                                    mem[64] = _13940 + 410
                                    mem[_13940 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13940 + 414] = _13806
                                    mem[_13940 + 446] = 0
                                    mem[_13940 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14090, stor4[cd[68]].field_512))
                                    mem[_13940 + 510] = 128
                                    mem[_13940 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13940 + 574] = mem[s + _13940 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13806, 0, address(sha3(0, stor4[cd[68]].field_0, _14090, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13940 + 221] = address(_13595)
                                    mem[_13940 + 241] = address(_13592)
                                    mem[_13940 + 189] = 40
                                    mem[_13940 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13940 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13940 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13940 + 346] = stor4[cd[68]].field_512
                                    mem[_13940 + 261] = 85
                                    mem[_13940 + 378] = 0
                                    mem[64] = _13940 + 410
                                    mem[_13940 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13940 + 414] = _13806
                                    mem[_13940 + 446] = 0
                                    mem[_13940 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14090, stor4[cd[68]].field_512))
                                    mem[_13940 + 510] = 128
                                    mem[_13940 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13940 + 574] = mem[s + _13940 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13806, 0, address(sha3(0, stor4[cd[68]].field_0, _14090, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + 140 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _13941 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + 128])
                                mem[mem[64] + 52] = address(_13595)
                                _14092 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _14094 = sha3(mem[_14092 + 32 len mem[_14092]])
                                mem[_13941 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_13941 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_13941 + 125] = _14094
                                mem[_13941 + 157] = stor4[cd[68]].field_512
                                mem[_13941 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_13592) == address(_13595):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_13592) < address(_13595):
                                    if not address(_13592):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13941 + 221] = address(_13592)
                                    mem[_13941 + 241] = address(_13595)
                                    mem[_13941 + 189] = 40
                                    mem[_13941 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13941 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13941 + 314] = sha3(address(_13592), address(_13595))
                                    mem[_13941 + 346] = stor4[cd[68]].field_512
                                    mem[_13941 + 261] = 85
                                    mem[_13941 + 378] = 0
                                    mem[64] = _13941 + 410
                                    mem[_13941 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13941 + 414] = _13806
                                    mem[_13941 + 446] = 0
                                    mem[_13941 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14094, stor4[cd[68]].field_512))
                                    mem[_13941 + 510] = 128
                                    mem[_13941 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13941 + 574] = mem[s + _13941 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13592), address(_13595)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13806, 0, address(sha3(0, stor4[cd[68]].field_0, _14094, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_13595):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_13941 + 221] = address(_13595)
                                    mem[_13941 + 241] = address(_13592)
                                    mem[_13941 + 189] = 40
                                    mem[_13941 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_13941 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_13941 + 314] = sha3(address(_13595), address(_13592))
                                    mem[_13941 + 346] = stor4[cd[68]].field_512
                                    mem[_13941 + 261] = 85
                                    mem[_13941 + 378] = 0
                                    mem[64] = _13941 + 410
                                    mem[_13941 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_13941 + 414] = _13806
                                    mem[_13941 + 446] = 0
                                    mem[_13941 + 478] = address(sha3(0, stor4[cd[68]].field_0, _14094, stor4[cd[68]].field_512))
                                    mem[_13941 + 510] = 128
                                    mem[_13941 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _13941 + 574] = mem[s + _13941 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_13595), address(_13592)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _13806, 0, address(sha3(0, stor4[cd[68]].field_0, _14094, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
}

function sub_bc881679(?) {
    require calldata.size - 4 >= 96
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    require ('cd', 36).length <= test266151307()
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    if not uint8(stor2[msg.sender]):
        revert with 0, 'Ownable: caller is not the Admin'
    mem[96] = ('cd', 36).length
    mem[128 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
    mem[0] = cd[68]
    mem[32] = 4
    if ('cd', 36).length < 2:
        revert with 0, 'PancakeLibrary: INVALID_PATH'
    require ('cd', 36).length <= test266151307()
    mem[(32 * ('cd', 36).length) + 128] = ('cd', 36).length
    mem[64] = (64 * ('cd', 36).length) + 160
    if not ('cd', 36).length:
        require 0 < ('cd', 36).length
        mem[(32 * ('cd', 36).length) + 160] = cd[4]
        idx = 0
        while idx < ('cd', 36).length - 1:
            require idx < mem[96]
            _19101 = mem[(32 * idx) + 128]
            require idx + 1 < mem[96]
            _19105 = mem[(32 * idx + 1) + 128]
            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                if not mem[(32 * idx) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                    if not mem[(32 * idx) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _19135 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                    mem[mem[64] + 52] = address(_19105)
                    _19151 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _19153 = sha3(mem[_19151 + 32 len mem[_19151]])
                    mem[_19135 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19135 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19135 + 125] = _19153
                    mem[_19135 + 157] = stor4[cd[68]].field_512
                    mem[_19135 + 72] = 85
                    if address(_19101) == address(_19105):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_19101) < address(_19105):
                        if not address(_19101):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19135 + 221] = address(_19101)
                        mem[_19135 + 241] = address(_19105)
                        mem[_19135 + 189] = 40
                        mem[_19135 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19135 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19135 + 314] = sha3(address(_19101), address(_19105))
                        mem[_19135 + 346] = stor4[cd[68]].field_512
                        mem[_19135 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_19105):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19135 + 221] = address(_19105)
                        mem[_19135 + 241] = address(_19101)
                        mem[_19135 + 189] = 40
                        mem[_19135 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19135 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19135 + 314] = sha3(address(_19105), address(_19101))
                        mem[_19135 + 346] = stor4[cd[68]].field_512
                        mem[_19135 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_19135 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _19135 + ceil32(return_data.size) + 378
                else:
                    if not mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _19136 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                    mem[mem[64] + 52] = address(_19101)
                    _19155 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _19157 = sha3(mem[_19155 + 32 len mem[_19155]])
                    mem[_19136 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19136 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19136 + 125] = _19157
                    mem[_19136 + 157] = stor4[cd[68]].field_512
                    mem[_19136 + 72] = 85
                    if address(_19101) == address(_19105):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_19101) < address(_19105):
                        if not address(_19101):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19136 + 221] = address(_19101)
                        mem[_19136 + 241] = address(_19105)
                        mem[_19136 + 189] = 40
                        mem[_19136 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19136 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19136 + 314] = sha3(address(_19101), address(_19105))
                        mem[_19136 + 346] = stor4[cd[68]].field_512
                        mem[_19136 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_19105):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19136 + 221] = address(_19105)
                        mem[_19136 + 241] = address(_19101)
                        mem[_19136 + 189] = 40
                        mem[_19136 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19136 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19136 + 314] = sha3(address(_19105), address(_19101))
                        mem[_19136 + 346] = stor4[cd[68]].field_512
                        mem[_19136 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_19136 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _19136 + ceil32(return_data.size) + 378
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require idx < mem[(32 * ('cd', 36).length) + 128]
                if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
                if address(_19101) == address(_19101):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[cd[68]].field_256:
                        if ext_call.return_data[50 len 14]:
                            require ext_call.return_data[50 len 14]
                            if 0 / ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[18 len 14]
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                    else:
                        require stor4[cd[68]].field_256
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[50 len 14]:
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        else:
                            require ext_call.return_data[50 len 14]
                            if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                else:
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[cd[68]].field_256:
                        if ext_call.return_data[18 len 14]:
                            require ext_call.return_data[18 len 14]
                            if 0 / ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[50 len 14]
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                    else:
                        require stor4[cd[68]].field_256
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[18 len 14]:
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        else:
                            require ext_call.return_data[18 len 14]
                            if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
            else:
                if not mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                    if not mem[(32 * idx) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _19137 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                    mem[mem[64] + 52] = address(_19105)
                    _19159 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _19161 = sha3(mem[_19159 + 32 len mem[_19159]])
                    mem[_19137 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19137 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19137 + 125] = _19161
                    mem[_19137 + 157] = stor4[cd[68]].field_512
                    mem[_19137 + 72] = 85
                    if address(_19101) == address(_19105):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_19101) < address(_19105):
                        if not address(_19101):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19137 + 221] = address(_19101)
                        mem[_19137 + 241] = address(_19105)
                        mem[_19137 + 189] = 40
                        mem[_19137 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19137 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19137 + 314] = sha3(address(_19101), address(_19105))
                        mem[_19137 + 346] = stor4[cd[68]].field_512
                        mem[_19137 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_19105):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19137 + 221] = address(_19105)
                        mem[_19137 + 241] = address(_19101)
                        mem[_19137 + 189] = 40
                        mem[_19137 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19137 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19137 + 314] = sha3(address(_19105), address(_19101))
                        mem[_19137 + 346] = stor4[cd[68]].field_512
                        mem[_19137 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_19137 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _19137 + ceil32(return_data.size) + 378
                else:
                    if not mem[(32 * idx + 1) + 140 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    _19138 = mem[64]
                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                    mem[mem[64] + 52] = address(_19101)
                    _19163 = mem[64]
                    mem[mem[64]] = 40
                    mem[64] = mem[64] + 72
                    _19165 = sha3(mem[_19163 + 32 len mem[_19163]])
                    mem[_19138 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19138 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19138 + 125] = _19165
                    mem[_19138 + 157] = stor4[cd[68]].field_512
                    mem[_19138 + 72] = 85
                    if address(_19101) == address(_19105):
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if address(_19101) < address(_19105):
                        if not address(_19101):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19138 + 221] = address(_19101)
                        mem[_19138 + 241] = address(_19105)
                        mem[_19138 + 189] = 40
                        mem[_19138 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19138 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19138 + 314] = sha3(address(_19101), address(_19105))
                        mem[_19138 + 346] = stor4[cd[68]].field_512
                        mem[_19138 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19101), address(_19105)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    else:
                        if not address(_19105):
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        mem[_19138 + 221] = address(_19105)
                        mem[_19138 + 241] = address(_19101)
                        mem[_19138 + 189] = 40
                        mem[_19138 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_19138 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_19138 + 314] = sha3(address(_19105), address(_19101))
                        mem[_19138 + 346] = stor4[cd[68]].field_512
                        mem[_19138 + 261] = 85
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)))
                        staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19105), address(_19101)), stor4[cd[68]].field_512)).getReserves() with:
                                gas gas_remaining wei
                    mem[_19138 + 378 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _19138 + ceil32(return_data.size) + 378
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require idx < mem[(32 * ('cd', 36).length) + 128]
                if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
                if address(_19101) == address(_19105):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[cd[68]].field_256:
                        if ext_call.return_data[50 len 14]:
                            require ext_call.return_data[50 len 14]
                            if 0 / ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[18 len 14]
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                    else:
                        require stor4[cd[68]].field_256
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[50 len 14]:
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        else:
                            require ext_call.return_data[50 len 14]
                            if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                else:
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                    if not stor4[cd[68]].field_256:
                        if ext_call.return_data[18 len 14]:
                            require ext_call.return_data[18 len 14]
                            if 0 / ext_call.return_data[18 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require 10000 * ext_call.return_data[50 len 14]
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                    else:
                        require stor4[cd[68]].field_256
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                            revert with 0, 'ds-math-mul-overflow'
                        if not ext_call.return_data[18 len 14]:
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        else:
                            require ext_call.return_data[18 len 14]
                            if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                                revert with 0, 'ds-math-mul-overflow'
                            if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-mul-overflow'
                            if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                                revert with 0, 'ds-math-add-overflow'
                            require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
            idx = idx + 1
            continue 
        require 0 < ('cd', 36).length
        require ('cd', 36)[0] == address(('cd', 36)[0])
        require 0 < ('cd', 36).length
        require ('cd', 36)[0] == address(('cd', 36)[0])
        require 1 < ('cd', 36).length
        require ('cd', 36)[1] == address(('cd', 36)[1])
        mem[0] = cd[68]
        mem[32] = 4
        if address(('cd', 36)[0]) == address(('cd', 36)[1]):
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if address(('cd', 36)[0]) < address(('cd', 36)[1]):
            if not address(('cd', 36)[0]):
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            _19345 = mem[64]
            mem[mem[64] + 32] = address(('cd', 36)[0])
            mem[mem[64] + 52] = address(('cd', 36)[1])
            _19401 = mem[64]
            mem[mem[64]] = 40
            mem[64] = mem[64] + 72
            _19403 = sha3(mem[_19401 + 32 len mem[_19401]])
            mem[_19345 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
            mem[_19345 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
            mem[_19345 + 125] = _19403
            mem[_19345 + 157] = stor4[cd[68]].field_512
            mem[_19345 + 72] = 85
            require 0 < mem[(32 * ('cd', 36).length) + 128]
            _19497 = mem[(32 * ('cd', 36).length) + 160]
            mem[_19345 + 225] = address(sha3(0, stor4[cd[68]].field_0, _19403, stor4[cd[68]].field_512))
            mem[_19345 + 257] = _19497
            mem[_19345 + 189] = 68
            mem[_19345 + 221 len 4] = unknown_0xa9059cbb(?????)
            mem[_19345 + 289 len 96] = 0, address(sha3(0, stor4[cd[68]].field_0, _19403, stor4[cd[68]].field_512)), _19497, mem[_19345 + 289 len 28]
            mem[_19345 + 357] = 0
            call address(('cd', 36)[0]) with:
                 gas gas_remaining wei
                args mem[_19345 + 293 len 64]
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'TransferHelper: TRANSFER_FAILED'
                if not mem[96]:
                    mem[64] = _19345 + (32 * ('cd', 36).length) + 321
                    mem[_19345 + 289] = ('cd', 36).length
                    mem[_19345 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
                    mem[_19345 + (32 * ('cd', 36).length) + 321] = 0
                    idx = 0
                    while idx < ('cd', 36).length - 1:
                        require idx < mem[_19345 + 289]
                        _55793 = mem[(32 * idx) + _19345 + 321]
                        require idx + 1 < mem[_19345 + 289]
                        _55858 = mem[(32 * idx + 1) + _19345 + 321]
                        if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                            if not mem[(32 * idx) + _19345 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            _56217 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                            if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx) + _19345 + 333 len 20]:
                                if idx >= mem[_19345 + 289] - 2:
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58059 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59281 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59283 = sha3(mem[_59281 + 32 len mem[_59281]])
                                        mem[_58059 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58059 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58059 + 125] = _59283
                                        mem[_58059 + 157] = stor4[cd[68]].field_512
                                        mem[_58059 + 72] = 85
                                        mem[_58059 + 189] = 0
                                        mem[64] = _58059 + 221
                                        mem[_58059 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58059 + 225] = 0
                                        mem[_58059 + 257] = _56217
                                        mem[_58059 + 289] = msg.sender
                                        mem[_58059 + 321] = 128
                                        mem[_58059 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58059 + 385] = mem[s + _58059 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59283, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59283, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56217, msg.sender, 128, 0
                                    else:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58060 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55793)
                                        _59285 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59287 = sha3(mem[_59285 + 32 len mem[_59285]])
                                        mem[_58060 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58060 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58060 + 125] = _59287
                                        mem[_58060 + 157] = stor4[cd[68]].field_512
                                        mem[_58060 + 72] = 85
                                        mem[_58060 + 189] = 0
                                        mem[64] = _58060 + 221
                                        mem[_58060 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58060 + 225] = 0
                                        mem[_58060 + 257] = _56217
                                        mem[_58060 + 289] = msg.sender
                                        mem[_58060 + 321] = 128
                                        mem[_58060 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58060 + 385] = mem[s + _58060 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59287, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59287, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56217, msg.sender, 128, 0
                                else:
                                    require idx + 2 < mem[_19345 + 289]
                                    _56601 = mem[(32 * idx + 2) + _19345 + 321]
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58057 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_56601)
                                        _59273 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59275 = sha3(mem[_59273 + 32 len mem[_59273]])
                                        mem[_58057 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58057 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58057 + 125] = _59275
                                        mem[_58057 + 157] = stor4[cd[68]].field_512
                                        mem[_58057 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58057 + 221] = address(_55793)
                                            mem[_58057 + 241] = address(_55858)
                                            mem[_58057 + 189] = 40
                                            mem[_58057 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58057 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58057 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58057 + 346] = stor4[cd[68]].field_512
                                            mem[_58057 + 261] = 85
                                            mem[_58057 + 378] = 0
                                            mem[64] = _58057 + 410
                                            mem[_58057 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58057 + 414] = 0
                                            mem[_58057 + 446] = _56217
                                            mem[_58057 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59275, stor4[cd[68]].field_512))
                                            mem[_58057 + 510] = 128
                                            mem[_58057 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58057 + 574] = mem[s + _58057 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56217, address(sha3(0, stor4[cd[68]].field_0, _59275, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58057 + 221] = address(_55858)
                                            mem[_58057 + 241] = address(_55793)
                                            mem[_58057 + 189] = 40
                                            mem[_58057 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58057 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58057 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58057 + 346] = stor4[cd[68]].field_512
                                            mem[_58057 + 261] = 85
                                            mem[_58057 + 378] = 0
                                            mem[64] = _58057 + 410
                                            mem[_58057 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58057 + 414] = 0
                                            mem[_58057 + 446] = _56217
                                            mem[_58057 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59275, stor4[cd[68]].field_512))
                                            mem[_58057 + 510] = 128
                                            mem[_58057 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58057 + 574] = mem[s + _58057 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56217, address(sha3(0, stor4[cd[68]].field_0, _59275, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58058 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59277 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59279 = sha3(mem[_59277 + 32 len mem[_59277]])
                                        mem[_58058 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58058 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58058 + 125] = _59279
                                        mem[_58058 + 157] = stor4[cd[68]].field_512
                                        mem[_58058 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58058 + 221] = address(_55793)
                                            mem[_58058 + 241] = address(_55858)
                                            mem[_58058 + 189] = 40
                                            mem[_58058 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58058 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58058 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58058 + 346] = stor4[cd[68]].field_512
                                            mem[_58058 + 261] = 85
                                            mem[_58058 + 378] = 0
                                            mem[64] = _58058 + 410
                                            mem[_58058 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58058 + 414] = 0
                                            mem[_58058 + 446] = _56217
                                            mem[_58058 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59279, stor4[cd[68]].field_512))
                                            mem[_58058 + 510] = 128
                                            mem[_58058 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58058 + 574] = mem[s + _58058 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56217, address(sha3(0, stor4[cd[68]].field_0, _59279, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58058 + 221] = address(_55858)
                                            mem[_58058 + 241] = address(_55793)
                                            mem[_58058 + 189] = 40
                                            mem[_58058 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58058 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58058 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58058 + 346] = stor4[cd[68]].field_512
                                            mem[_58058 + 261] = 85
                                            mem[_58058 + 378] = 0
                                            mem[64] = _58058 + 410
                                            mem[_58058 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58058 + 414] = 0
                                            mem[_58058 + 446] = _56217
                                            mem[_58058 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59279, stor4[cd[68]].field_512))
                                            mem[_58058 + 510] = 128
                                            mem[_58058 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58058 + 574] = mem[s + _58058 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56217, address(sha3(0, stor4[cd[68]].field_0, _59279, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if idx >= mem[_19345 + 289] - 2:
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58063 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59297 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59299 = sha3(mem[_59297 + 32 len mem[_59297]])
                                        mem[_58063 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58063 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58063 + 125] = _59299
                                        mem[_58063 + 157] = stor4[cd[68]].field_512
                                        mem[_58063 + 72] = 85
                                        mem[_58063 + 189] = 0
                                        mem[64] = _58063 + 221
                                        mem[_58063 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58063 + 225] = _56217
                                        mem[_58063 + 257] = 0
                                        mem[_58063 + 289] = msg.sender
                                        mem[_58063 + 321] = 128
                                        mem[_58063 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58063 + 385] = mem[s + _58063 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59299, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59299, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56217, 0, msg.sender, 128, 0
                                    else:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58064 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55793)
                                        _59301 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59303 = sha3(mem[_59301 + 32 len mem[_59301]])
                                        mem[_58064 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58064 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58064 + 125] = _59303
                                        mem[_58064 + 157] = stor4[cd[68]].field_512
                                        mem[_58064 + 72] = 85
                                        mem[_58064 + 189] = 0
                                        mem[64] = _58064 + 221
                                        mem[_58064 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58064 + 225] = _56217
                                        mem[_58064 + 257] = 0
                                        mem[_58064 + 289] = msg.sender
                                        mem[_58064 + 321] = 128
                                        mem[_58064 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58064 + 385] = mem[s + _58064 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59303, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59303, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56217, 0, msg.sender, 128, 0
                                else:
                                    require idx + 2 < mem[_19345 + 289]
                                    _56602 = mem[(32 * idx + 2) + _19345 + 321]
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58061 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_56602)
                                        _59289 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59291 = sha3(mem[_59289 + 32 len mem[_59289]])
                                        mem[_58061 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58061 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58061 + 125] = _59291
                                        mem[_58061 + 157] = stor4[cd[68]].field_512
                                        mem[_58061 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58061 + 221] = address(_55793)
                                            mem[_58061 + 241] = address(_55858)
                                            mem[_58061 + 189] = 40
                                            mem[_58061 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58061 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58061 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58061 + 346] = stor4[cd[68]].field_512
                                            mem[_58061 + 261] = 85
                                            mem[_58061 + 378] = 0
                                            mem[64] = _58061 + 410
                                            mem[_58061 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58061 + 414] = _56217
                                            mem[_58061 + 446] = 0
                                            mem[_58061 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59291, stor4[cd[68]].field_512))
                                            mem[_58061 + 510] = 128
                                            mem[_58061 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58061 + 574] = mem[s + _58061 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56217, 0, address(sha3(0, stor4[cd[68]].field_0, _59291, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58061 + 221] = address(_55858)
                                            mem[_58061 + 241] = address(_55793)
                                            mem[_58061 + 189] = 40
                                            mem[_58061 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58061 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58061 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58061 + 346] = stor4[cd[68]].field_512
                                            mem[_58061 + 261] = 85
                                            mem[_58061 + 378] = 0
                                            mem[64] = _58061 + 410
                                            mem[_58061 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58061 + 414] = _56217
                                            mem[_58061 + 446] = 0
                                            mem[_58061 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59291, stor4[cd[68]].field_512))
                                            mem[_58061 + 510] = 128
                                            mem[_58061 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58061 + 574] = mem[s + _58061 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56217, 0, address(sha3(0, stor4[cd[68]].field_0, _59291, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58062 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59293 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59295 = sha3(mem[_59293 + 32 len mem[_59293]])
                                        mem[_58062 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58062 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58062 + 125] = _59295
                                        mem[_58062 + 157] = stor4[cd[68]].field_512
                                        mem[_58062 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58062 + 221] = address(_55793)
                                            mem[_58062 + 241] = address(_55858)
                                            mem[_58062 + 189] = 40
                                            mem[_58062 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58062 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58062 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58062 + 346] = stor4[cd[68]].field_512
                                            mem[_58062 + 261] = 85
                                            mem[_58062 + 378] = 0
                                            mem[64] = _58062 + 410
                                            mem[_58062 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58062 + 414] = _56217
                                            mem[_58062 + 446] = 0
                                            mem[_58062 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59295, stor4[cd[68]].field_512))
                                            mem[_58062 + 510] = 128
                                            mem[_58062 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58062 + 574] = mem[s + _58062 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56217, 0, address(sha3(0, stor4[cd[68]].field_0, _59295, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58062 + 221] = address(_55858)
                                            mem[_58062 + 241] = address(_55793)
                                            mem[_58062 + 189] = 40
                                            mem[_58062 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58062 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58062 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58062 + 346] = stor4[cd[68]].field_512
                                            mem[_58062 + 261] = 85
                                            mem[_58062 + 378] = 0
                                            mem[64] = _58062 + 410
                                            mem[_58062 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58062 + 414] = _56217
                                            mem[_58062 + 446] = 0
                                            mem[_58062 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59295, stor4[cd[68]].field_512))
                                            mem[_58062 + 510] = 128
                                            mem[_58062 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58062 + 574] = mem[s + _58062 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56217, 0, address(sha3(0, stor4[cd[68]].field_0, _59295, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                            _56219 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                            if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                if idx >= mem[_19345 + 289] - 2:
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58067 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59313 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59315 = sha3(mem[_59313 + 32 len mem[_59313]])
                                        mem[_58067 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58067 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58067 + 125] = _59315
                                        mem[_58067 + 157] = stor4[cd[68]].field_512
                                        mem[_58067 + 72] = 85
                                        mem[_58067 + 189] = 0
                                        mem[64] = _58067 + 221
                                        mem[_58067 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58067 + 225] = 0
                                        mem[_58067 + 257] = _56219
                                        mem[_58067 + 289] = msg.sender
                                        mem[_58067 + 321] = 128
                                        mem[_58067 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58067 + 385] = mem[s + _58067 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59315, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59315, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56219, msg.sender, 128, 0
                                    else:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58068 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55793)
                                        _59317 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59319 = sha3(mem[_59317 + 32 len mem[_59317]])
                                        mem[_58068 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58068 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58068 + 125] = _59319
                                        mem[_58068 + 157] = stor4[cd[68]].field_512
                                        mem[_58068 + 72] = 85
                                        mem[_58068 + 189] = 0
                                        mem[64] = _58068 + 221
                                        mem[_58068 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58068 + 225] = 0
                                        mem[_58068 + 257] = _56219
                                        mem[_58068 + 289] = msg.sender
                                        mem[_58068 + 321] = 128
                                        mem[_58068 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58068 + 385] = mem[s + _58068 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59319, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59319, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56219, msg.sender, 128, 0
                                else:
                                    require idx + 2 < mem[_19345 + 289]
                                    _56603 = mem[(32 * idx + 2) + _19345 + 321]
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58065 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_56603)
                                        _59305 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59307 = sha3(mem[_59305 + 32 len mem[_59305]])
                                        mem[_58065 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58065 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58065 + 125] = _59307
                                        mem[_58065 + 157] = stor4[cd[68]].field_512
                                        mem[_58065 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58065 + 221] = address(_55793)
                                            mem[_58065 + 241] = address(_55858)
                                            mem[_58065 + 189] = 40
                                            mem[_58065 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58065 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58065 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58065 + 346] = stor4[cd[68]].field_512
                                            mem[_58065 + 261] = 85
                                            mem[_58065 + 378] = 0
                                            mem[64] = _58065 + 410
                                            mem[_58065 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58065 + 414] = 0
                                            mem[_58065 + 446] = _56219
                                            mem[_58065 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59307, stor4[cd[68]].field_512))
                                            mem[_58065 + 510] = 128
                                            mem[_58065 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58065 + 574] = mem[s + _58065 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56219, address(sha3(0, stor4[cd[68]].field_0, _59307, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58065 + 221] = address(_55858)
                                            mem[_58065 + 241] = address(_55793)
                                            mem[_58065 + 189] = 40
                                            mem[_58065 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58065 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58065 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58065 + 346] = stor4[cd[68]].field_512
                                            mem[_58065 + 261] = 85
                                            mem[_58065 + 378] = 0
                                            mem[64] = _58065 + 410
                                            mem[_58065 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58065 + 414] = 0
                                            mem[_58065 + 446] = _56219
                                            mem[_58065 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59307, stor4[cd[68]].field_512))
                                            mem[_58065 + 510] = 128
                                            mem[_58065 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58065 + 574] = mem[s + _58065 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56219, address(sha3(0, stor4[cd[68]].field_0, _59307, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58066 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59309 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59311 = sha3(mem[_59309 + 32 len mem[_59309]])
                                        mem[_58066 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58066 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58066 + 125] = _59311
                                        mem[_58066 + 157] = stor4[cd[68]].field_512
                                        mem[_58066 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58066 + 221] = address(_55793)
                                            mem[_58066 + 241] = address(_55858)
                                            mem[_58066 + 189] = 40
                                            mem[_58066 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58066 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58066 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58066 + 346] = stor4[cd[68]].field_512
                                            mem[_58066 + 261] = 85
                                            mem[_58066 + 378] = 0
                                            mem[64] = _58066 + 410
                                            mem[_58066 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58066 + 414] = 0
                                            mem[_58066 + 446] = _56219
                                            mem[_58066 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59311, stor4[cd[68]].field_512))
                                            mem[_58066 + 510] = 128
                                            mem[_58066 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58066 + 574] = mem[s + _58066 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56219, address(sha3(0, stor4[cd[68]].field_0, _59311, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58066 + 221] = address(_55858)
                                            mem[_58066 + 241] = address(_55793)
                                            mem[_58066 + 189] = 40
                                            mem[_58066 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58066 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58066 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58066 + 346] = stor4[cd[68]].field_512
                                            mem[_58066 + 261] = 85
                                            mem[_58066 + 378] = 0
                                            mem[64] = _58066 + 410
                                            mem[_58066 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58066 + 414] = 0
                                            mem[_58066 + 446] = _56219
                                            mem[_58066 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59311, stor4[cd[68]].field_512))
                                            mem[_58066 + 510] = 128
                                            mem[_58066 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58066 + 574] = mem[s + _58066 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, _56219, address(sha3(0, stor4[cd[68]].field_0, _59311, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if idx >= mem[_19345 + 289] - 2:
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58071 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59329 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59331 = sha3(mem[_59329 + 32 len mem[_59329]])
                                        mem[_58071 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58071 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58071 + 125] = _59331
                                        mem[_58071 + 157] = stor4[cd[68]].field_512
                                        mem[_58071 + 72] = 85
                                        mem[_58071 + 189] = 0
                                        mem[64] = _58071 + 221
                                        mem[_58071 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58071 + 225] = _56219
                                        mem[_58071 + 257] = 0
                                        mem[_58071 + 289] = msg.sender
                                        mem[_58071 + 321] = 128
                                        mem[_58071 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58071 + 385] = mem[s + _58071 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59331, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59331, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56219, 0, msg.sender, 128, 0
                                    else:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58072 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55793)
                                        _59333 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59335 = sha3(mem[_59333 + 32 len mem[_59333]])
                                        mem[_58072 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58072 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58072 + 125] = _59335
                                        mem[_58072 + 157] = stor4[cd[68]].field_512
                                        mem[_58072 + 72] = 85
                                        mem[_58072 + 189] = 0
                                        mem[64] = _58072 + 221
                                        mem[_58072 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58072 + 225] = _56219
                                        mem[_58072 + 257] = 0
                                        mem[_58072 + 289] = msg.sender
                                        mem[_58072 + 321] = 128
                                        mem[_58072 + 353] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58072 + 385] = mem[s + _58072 + 221]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59335, stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, _59335, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56219, 0, msg.sender, 128, 0
                                else:
                                    require idx + 2 < mem[_19345 + 289]
                                    _56604 = mem[(32 * idx + 2) + _19345 + 321]
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58069 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_56604)
                                        _59321 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59323 = sha3(mem[_59321 + 32 len mem[_59321]])
                                        mem[_58069 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58069 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58069 + 125] = _59323
                                        mem[_58069 + 157] = stor4[cd[68]].field_512
                                        mem[_58069 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58069 + 221] = address(_55793)
                                            mem[_58069 + 241] = address(_55858)
                                            mem[_58069 + 189] = 40
                                            mem[_58069 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58069 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58069 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58069 + 346] = stor4[cd[68]].field_512
                                            mem[_58069 + 261] = 85
                                            mem[_58069 + 378] = 0
                                            mem[64] = _58069 + 410
                                            mem[_58069 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58069 + 414] = _56219
                                            mem[_58069 + 446] = 0
                                            mem[_58069 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59323, stor4[cd[68]].field_512))
                                            mem[_58069 + 510] = 128
                                            mem[_58069 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58069 + 574] = mem[s + _58069 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56219, 0, address(sha3(0, stor4[cd[68]].field_0, _59323, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58069 + 221] = address(_55858)
                                            mem[_58069 + 241] = address(_55793)
                                            mem[_58069 + 189] = 40
                                            mem[_58069 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58069 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58069 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58069 + 346] = stor4[cd[68]].field_512
                                            mem[_58069 + 261] = 85
                                            mem[_58069 + 378] = 0
                                            mem[64] = _58069 + 410
                                            mem[_58069 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58069 + 414] = _56219
                                            mem[_58069 + 446] = 0
                                            mem[_58069 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59323, stor4[cd[68]].field_512))
                                            mem[_58069 + 510] = 128
                                            mem[_58069 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58069 + 574] = mem[s + _58069 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56219, 0, address(sha3(0, stor4[cd[68]].field_0, _59323, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        _58070 = mem[64]
                                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                        mem[mem[64] + 52] = address(_55858)
                                        _59325 = mem[64]
                                        mem[mem[64]] = 40
                                        mem[64] = mem[64] + 72
                                        _59327 = sha3(mem[_59325 + 32 len mem[_59325]])
                                        mem[_58070 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58070 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58070 + 125] = _59327
                                        mem[_58070 + 157] = stor4[cd[68]].field_512
                                        mem[_58070 + 72] = 85
                                        mem[0] = cd[68]
                                        mem[32] = 4
                                        if address(_55793) == address(_55858):
                                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                        if address(_55793) < address(_55858):
                                            if not address(_55793):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58070 + 221] = address(_55793)
                                            mem[_58070 + 241] = address(_55858)
                                            mem[_58070 + 189] = 40
                                            mem[_58070 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58070 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58070 + 314] = sha3(address(_55793), address(_55858))
                                            mem[_58070 + 346] = stor4[cd[68]].field_512
                                            mem[_58070 + 261] = 85
                                            mem[_58070 + 378] = 0
                                            mem[64] = _58070 + 410
                                            mem[_58070 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58070 + 414] = _56219
                                            mem[_58070 + 446] = 0
                                            mem[_58070 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59327, stor4[cd[68]].field_512))
                                            mem[_58070 + 510] = 128
                                            mem[_58070 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58070 + 574] = mem[s + _58070 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55793), address(_55858)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56219, 0, address(sha3(0, stor4[cd[68]].field_0, _59327, stor4[cd[68]].field_512)), 128, 0
                                        else:
                                            if not address(_55858):
                                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                            mem[_58070 + 221] = address(_55858)
                                            mem[_58070 + 241] = address(_55793)
                                            mem[_58070 + 189] = 40
                                            mem[_58070 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                            mem[_58070 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                            mem[_58070 + 314] = sha3(address(_55858), address(_55793))
                                            mem[_58070 + 346] = stor4[cd[68]].field_512
                                            mem[_58070 + 261] = 85
                                            mem[_58070 + 378] = 0
                                            mem[64] = _58070 + 410
                                            mem[_58070 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                            mem[_58070 + 414] = _56219
                                            mem[_58070 + 446] = 0
                                            mem[_58070 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59327, stor4[cd[68]].field_512))
                                            mem[_58070 + 510] = 128
                                            mem[_58070 + 542] = 0
                                            s = 0
                                            while s < 0:
                                                mem[s + _58070 + 574] = mem[s + _58070 + 410]
                                                s = s + 32
                                                continue 
                                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)))
                                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55858), address(_55793)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args _56219, 0, address(sha3(0, stor4[cd[68]].field_0, _59327, stor4[cd[68]].field_512)), 128, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        idx = idx + 1
                        continue 
                    mem[mem[64]] = 32
                    _55921 = mem[(32 * ('cd', 36).length) + 128]
                    mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
                    mem[mem[64] + 64 len 32 * _55921] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55921]
                    return 32, mem[mem[64] + 32 len (32 * _55921) + 32]
                require mem[96] >= 32
                require mem[128] == bool(mem[128])
                if not mem[128]:
                    revert with 0, 'TransferHelper: TRANSFER_FAILED'
                mem[64] = _19345 + (32 * ('cd', 36).length) + 321
                mem[_19345 + 289] = ('cd', 36).length
                mem[_19345 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
                mem[_19345 + (32 * ('cd', 36).length) + 321] = 0
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[_19345 + 289]
                    _55795 = mem[(32 * idx) + _19345 + 321]
                    require idx + 1 < mem[_19345 + 289]
                    _55860 = mem[(32 * idx + 1) + _19345 + 321]
                    if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                        if not mem[(32 * idx) + _19345 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56221 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx) + _19345 + 333 len 20]:
                            if idx >= mem[_19345 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58075 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59345 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59347 = sha3(mem[_59345 + 32 len mem[_59345]])
                                    mem[_58075 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58075 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58075 + 125] = _59347
                                    mem[_58075 + 157] = stor4[cd[68]].field_512
                                    mem[_58075 + 72] = 85
                                    mem[_58075 + 189] = 0
                                    mem[64] = _58075 + 221
                                    mem[_58075 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58075 + 225] = 0
                                    mem[_58075 + 257] = _56221
                                    mem[_58075 + 289] = msg.sender
                                    mem[_58075 + 321] = 128
                                    mem[_58075 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58075 + 385] = mem[s + _58075 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59347, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59347, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56221, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58076 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55795)
                                    _59349 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59351 = sha3(mem[_59349 + 32 len mem[_59349]])
                                    mem[_58076 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58076 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58076 + 125] = _59351
                                    mem[_58076 + 157] = stor4[cd[68]].field_512
                                    mem[_58076 + 72] = 85
                                    mem[_58076 + 189] = 0
                                    mem[64] = _58076 + 221
                                    mem[_58076 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58076 + 225] = 0
                                    mem[_58076 + 257] = _56221
                                    mem[_58076 + 289] = msg.sender
                                    mem[_58076 + 321] = 128
                                    mem[_58076 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58076 + 385] = mem[s + _58076 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59351, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59351, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56221, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + 289]
                                _56605 = mem[(32 * idx + 2) + _19345 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58073 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_56605)
                                    _59337 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59339 = sha3(mem[_59337 + 32 len mem[_59337]])
                                    mem[_58073 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58073 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58073 + 125] = _59339
                                    mem[_58073 + 157] = stor4[cd[68]].field_512
                                    mem[_58073 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58073 + 221] = address(_55795)
                                        mem[_58073 + 241] = address(_55860)
                                        mem[_58073 + 189] = 40
                                        mem[_58073 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58073 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58073 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58073 + 346] = stor4[cd[68]].field_512
                                        mem[_58073 + 261] = 85
                                        mem[_58073 + 378] = 0
                                        mem[64] = _58073 + 410
                                        mem[_58073 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58073 + 414] = 0
                                        mem[_58073 + 446] = _56221
                                        mem[_58073 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59339, stor4[cd[68]].field_512))
                                        mem[_58073 + 510] = 128
                                        mem[_58073 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58073 + 574] = mem[s + _58073 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56221, address(sha3(0, stor4[cd[68]].field_0, _59339, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58073 + 221] = address(_55860)
                                        mem[_58073 + 241] = address(_55795)
                                        mem[_58073 + 189] = 40
                                        mem[_58073 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58073 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58073 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58073 + 346] = stor4[cd[68]].field_512
                                        mem[_58073 + 261] = 85
                                        mem[_58073 + 378] = 0
                                        mem[64] = _58073 + 410
                                        mem[_58073 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58073 + 414] = 0
                                        mem[_58073 + 446] = _56221
                                        mem[_58073 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59339, stor4[cd[68]].field_512))
                                        mem[_58073 + 510] = 128
                                        mem[_58073 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58073 + 574] = mem[s + _58073 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56221, address(sha3(0, stor4[cd[68]].field_0, _59339, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58074 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59341 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59343 = sha3(mem[_59341 + 32 len mem[_59341]])
                                    mem[_58074 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58074 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58074 + 125] = _59343
                                    mem[_58074 + 157] = stor4[cd[68]].field_512
                                    mem[_58074 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58074 + 221] = address(_55795)
                                        mem[_58074 + 241] = address(_55860)
                                        mem[_58074 + 189] = 40
                                        mem[_58074 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58074 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58074 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58074 + 346] = stor4[cd[68]].field_512
                                        mem[_58074 + 261] = 85
                                        mem[_58074 + 378] = 0
                                        mem[64] = _58074 + 410
                                        mem[_58074 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58074 + 414] = 0
                                        mem[_58074 + 446] = _56221
                                        mem[_58074 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59343, stor4[cd[68]].field_512))
                                        mem[_58074 + 510] = 128
                                        mem[_58074 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58074 + 574] = mem[s + _58074 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56221, address(sha3(0, stor4[cd[68]].field_0, _59343, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58074 + 221] = address(_55860)
                                        mem[_58074 + 241] = address(_55795)
                                        mem[_58074 + 189] = 40
                                        mem[_58074 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58074 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58074 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58074 + 346] = stor4[cd[68]].field_512
                                        mem[_58074 + 261] = 85
                                        mem[_58074 + 378] = 0
                                        mem[64] = _58074 + 410
                                        mem[_58074 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58074 + 414] = 0
                                        mem[_58074 + 446] = _56221
                                        mem[_58074 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59343, stor4[cd[68]].field_512))
                                        mem[_58074 + 510] = 128
                                        mem[_58074 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58074 + 574] = mem[s + _58074 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56221, address(sha3(0, stor4[cd[68]].field_0, _59343, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19345 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58079 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59361 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59363 = sha3(mem[_59361 + 32 len mem[_59361]])
                                    mem[_58079 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58079 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58079 + 125] = _59363
                                    mem[_58079 + 157] = stor4[cd[68]].field_512
                                    mem[_58079 + 72] = 85
                                    mem[_58079 + 189] = 0
                                    mem[64] = _58079 + 221
                                    mem[_58079 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58079 + 225] = _56221
                                    mem[_58079 + 257] = 0
                                    mem[_58079 + 289] = msg.sender
                                    mem[_58079 + 321] = 128
                                    mem[_58079 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58079 + 385] = mem[s + _58079 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59363, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59363, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56221, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58080 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55795)
                                    _59365 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59367 = sha3(mem[_59365 + 32 len mem[_59365]])
                                    mem[_58080 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58080 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58080 + 125] = _59367
                                    mem[_58080 + 157] = stor4[cd[68]].field_512
                                    mem[_58080 + 72] = 85
                                    mem[_58080 + 189] = 0
                                    mem[64] = _58080 + 221
                                    mem[_58080 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58080 + 225] = _56221
                                    mem[_58080 + 257] = 0
                                    mem[_58080 + 289] = msg.sender
                                    mem[_58080 + 321] = 128
                                    mem[_58080 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58080 + 385] = mem[s + _58080 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59367, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59367, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56221, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + 289]
                                _56606 = mem[(32 * idx + 2) + _19345 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58077 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_56606)
                                    _59353 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59355 = sha3(mem[_59353 + 32 len mem[_59353]])
                                    mem[_58077 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58077 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58077 + 125] = _59355
                                    mem[_58077 + 157] = stor4[cd[68]].field_512
                                    mem[_58077 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58077 + 221] = address(_55795)
                                        mem[_58077 + 241] = address(_55860)
                                        mem[_58077 + 189] = 40
                                        mem[_58077 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58077 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58077 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58077 + 346] = stor4[cd[68]].field_512
                                        mem[_58077 + 261] = 85
                                        mem[_58077 + 378] = 0
                                        mem[64] = _58077 + 410
                                        mem[_58077 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58077 + 414] = _56221
                                        mem[_58077 + 446] = 0
                                        mem[_58077 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59355, stor4[cd[68]].field_512))
                                        mem[_58077 + 510] = 128
                                        mem[_58077 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58077 + 574] = mem[s + _58077 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56221, 0, address(sha3(0, stor4[cd[68]].field_0, _59355, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58077 + 221] = address(_55860)
                                        mem[_58077 + 241] = address(_55795)
                                        mem[_58077 + 189] = 40
                                        mem[_58077 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58077 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58077 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58077 + 346] = stor4[cd[68]].field_512
                                        mem[_58077 + 261] = 85
                                        mem[_58077 + 378] = 0
                                        mem[64] = _58077 + 410
                                        mem[_58077 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58077 + 414] = _56221
                                        mem[_58077 + 446] = 0
                                        mem[_58077 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59355, stor4[cd[68]].field_512))
                                        mem[_58077 + 510] = 128
                                        mem[_58077 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58077 + 574] = mem[s + _58077 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56221, 0, address(sha3(0, stor4[cd[68]].field_0, _59355, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58078 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59357 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59359 = sha3(mem[_59357 + 32 len mem[_59357]])
                                    mem[_58078 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58078 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58078 + 125] = _59359
                                    mem[_58078 + 157] = stor4[cd[68]].field_512
                                    mem[_58078 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58078 + 221] = address(_55795)
                                        mem[_58078 + 241] = address(_55860)
                                        mem[_58078 + 189] = 40
                                        mem[_58078 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58078 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58078 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58078 + 346] = stor4[cd[68]].field_512
                                        mem[_58078 + 261] = 85
                                        mem[_58078 + 378] = 0
                                        mem[64] = _58078 + 410
                                        mem[_58078 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58078 + 414] = _56221
                                        mem[_58078 + 446] = 0
                                        mem[_58078 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59359, stor4[cd[68]].field_512))
                                        mem[_58078 + 510] = 128
                                        mem[_58078 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58078 + 574] = mem[s + _58078 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56221, 0, address(sha3(0, stor4[cd[68]].field_0, _59359, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58078 + 221] = address(_55860)
                                        mem[_58078 + 241] = address(_55795)
                                        mem[_58078 + 189] = 40
                                        mem[_58078 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58078 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58078 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58078 + 346] = stor4[cd[68]].field_512
                                        mem[_58078 + 261] = 85
                                        mem[_58078 + 378] = 0
                                        mem[64] = _58078 + 410
                                        mem[_58078 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58078 + 414] = _56221
                                        mem[_58078 + 446] = 0
                                        mem[_58078 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59359, stor4[cd[68]].field_512))
                                        mem[_58078 + 510] = 128
                                        mem[_58078 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58078 + 574] = mem[s + _58078 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56221, 0, address(sha3(0, stor4[cd[68]].field_0, _59359, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56223 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                            if idx >= mem[_19345 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58083 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59377 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59379 = sha3(mem[_59377 + 32 len mem[_59377]])
                                    mem[_58083 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58083 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58083 + 125] = _59379
                                    mem[_58083 + 157] = stor4[cd[68]].field_512
                                    mem[_58083 + 72] = 85
                                    mem[_58083 + 189] = 0
                                    mem[64] = _58083 + 221
                                    mem[_58083 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58083 + 225] = 0
                                    mem[_58083 + 257] = _56223
                                    mem[_58083 + 289] = msg.sender
                                    mem[_58083 + 321] = 128
                                    mem[_58083 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58083 + 385] = mem[s + _58083 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59379, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59379, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56223, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58084 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55795)
                                    _59381 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59383 = sha3(mem[_59381 + 32 len mem[_59381]])
                                    mem[_58084 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58084 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58084 + 125] = _59383
                                    mem[_58084 + 157] = stor4[cd[68]].field_512
                                    mem[_58084 + 72] = 85
                                    mem[_58084 + 189] = 0
                                    mem[64] = _58084 + 221
                                    mem[_58084 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58084 + 225] = 0
                                    mem[_58084 + 257] = _56223
                                    mem[_58084 + 289] = msg.sender
                                    mem[_58084 + 321] = 128
                                    mem[_58084 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58084 + 385] = mem[s + _58084 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59383, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59383, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56223, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + 289]
                                _56607 = mem[(32 * idx + 2) + _19345 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58081 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_56607)
                                    _59369 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59371 = sha3(mem[_59369 + 32 len mem[_59369]])
                                    mem[_58081 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58081 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58081 + 125] = _59371
                                    mem[_58081 + 157] = stor4[cd[68]].field_512
                                    mem[_58081 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58081 + 221] = address(_55795)
                                        mem[_58081 + 241] = address(_55860)
                                        mem[_58081 + 189] = 40
                                        mem[_58081 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58081 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58081 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58081 + 346] = stor4[cd[68]].field_512
                                        mem[_58081 + 261] = 85
                                        mem[_58081 + 378] = 0
                                        mem[64] = _58081 + 410
                                        mem[_58081 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58081 + 414] = 0
                                        mem[_58081 + 446] = _56223
                                        mem[_58081 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59371, stor4[cd[68]].field_512))
                                        mem[_58081 + 510] = 128
                                        mem[_58081 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58081 + 574] = mem[s + _58081 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56223, address(sha3(0, stor4[cd[68]].field_0, _59371, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58081 + 221] = address(_55860)
                                        mem[_58081 + 241] = address(_55795)
                                        mem[_58081 + 189] = 40
                                        mem[_58081 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58081 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58081 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58081 + 346] = stor4[cd[68]].field_512
                                        mem[_58081 + 261] = 85
                                        mem[_58081 + 378] = 0
                                        mem[64] = _58081 + 410
                                        mem[_58081 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58081 + 414] = 0
                                        mem[_58081 + 446] = _56223
                                        mem[_58081 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59371, stor4[cd[68]].field_512))
                                        mem[_58081 + 510] = 128
                                        mem[_58081 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58081 + 574] = mem[s + _58081 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56223, address(sha3(0, stor4[cd[68]].field_0, _59371, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58082 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59373 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59375 = sha3(mem[_59373 + 32 len mem[_59373]])
                                    mem[_58082 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58082 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58082 + 125] = _59375
                                    mem[_58082 + 157] = stor4[cd[68]].field_512
                                    mem[_58082 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58082 + 221] = address(_55795)
                                        mem[_58082 + 241] = address(_55860)
                                        mem[_58082 + 189] = 40
                                        mem[_58082 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58082 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58082 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58082 + 346] = stor4[cd[68]].field_512
                                        mem[_58082 + 261] = 85
                                        mem[_58082 + 378] = 0
                                        mem[64] = _58082 + 410
                                        mem[_58082 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58082 + 414] = 0
                                        mem[_58082 + 446] = _56223
                                        mem[_58082 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59375, stor4[cd[68]].field_512))
                                        mem[_58082 + 510] = 128
                                        mem[_58082 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58082 + 574] = mem[s + _58082 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56223, address(sha3(0, stor4[cd[68]].field_0, _59375, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58082 + 221] = address(_55860)
                                        mem[_58082 + 241] = address(_55795)
                                        mem[_58082 + 189] = 40
                                        mem[_58082 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58082 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58082 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58082 + 346] = stor4[cd[68]].field_512
                                        mem[_58082 + 261] = 85
                                        mem[_58082 + 378] = 0
                                        mem[64] = _58082 + 410
                                        mem[_58082 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58082 + 414] = 0
                                        mem[_58082 + 446] = _56223
                                        mem[_58082 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59375, stor4[cd[68]].field_512))
                                        mem[_58082 + 510] = 128
                                        mem[_58082 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58082 + 574] = mem[s + _58082 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56223, address(sha3(0, stor4[cd[68]].field_0, _59375, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19345 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + 333 len 20] == mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + 333 len 20] < mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58087 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59393 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59395 = sha3(mem[_59393 + 32 len mem[_59393]])
                                    mem[_58087 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58087 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58087 + 125] = _59395
                                    mem[_58087 + 157] = stor4[cd[68]].field_512
                                    mem[_58087 + 72] = 85
                                    mem[_58087 + 189] = 0
                                    mem[64] = _58087 + 221
                                    mem[_58087 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58087 + 225] = _56223
                                    mem[_58087 + 257] = 0
                                    mem[_58087 + 289] = msg.sender
                                    mem[_58087 + 321] = 128
                                    mem[_58087 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58087 + 385] = mem[s + _58087 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59395, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59395, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56223, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58088 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55795)
                                    _59397 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59399 = sha3(mem[_59397 + 32 len mem[_59397]])
                                    mem[_58088 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58088 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58088 + 125] = _59399
                                    mem[_58088 + 157] = stor4[cd[68]].field_512
                                    mem[_58088 + 72] = 85
                                    mem[_58088 + 189] = 0
                                    mem[64] = _58088 + 221
                                    mem[_58088 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58088 + 225] = _56223
                                    mem[_58088 + 257] = 0
                                    mem[_58088 + 289] = msg.sender
                                    mem[_58088 + 321] = 128
                                    mem[_58088 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58088 + 385] = mem[s + _58088 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59399, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59399, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56223, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + 289]
                                _56608 = mem[(32 * idx + 2) + _19345 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] == mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + 333 len 20] < mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58085 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_56608)
                                    _59385 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59387 = sha3(mem[_59385 + 32 len mem[_59385]])
                                    mem[_58085 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58085 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58085 + 125] = _59387
                                    mem[_58085 + 157] = stor4[cd[68]].field_512
                                    mem[_58085 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58085 + 221] = address(_55795)
                                        mem[_58085 + 241] = address(_55860)
                                        mem[_58085 + 189] = 40
                                        mem[_58085 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58085 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58085 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58085 + 346] = stor4[cd[68]].field_512
                                        mem[_58085 + 261] = 85
                                        mem[_58085 + 378] = 0
                                        mem[64] = _58085 + 410
                                        mem[_58085 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58085 + 414] = _56223
                                        mem[_58085 + 446] = 0
                                        mem[_58085 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59387, stor4[cd[68]].field_512))
                                        mem[_58085 + 510] = 128
                                        mem[_58085 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58085 + 574] = mem[s + _58085 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56223, 0, address(sha3(0, stor4[cd[68]].field_0, _59387, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58085 + 221] = address(_55860)
                                        mem[_58085 + 241] = address(_55795)
                                        mem[_58085 + 189] = 40
                                        mem[_58085 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58085 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58085 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58085 + 346] = stor4[cd[68]].field_512
                                        mem[_58085 + 261] = 85
                                        mem[_58085 + 378] = 0
                                        mem[64] = _58085 + 410
                                        mem[_58085 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58085 + 414] = _56223
                                        mem[_58085 + 446] = 0
                                        mem[_58085 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59387, stor4[cd[68]].field_512))
                                        mem[_58085 + 510] = 128
                                        mem[_58085 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58085 + 574] = mem[s + _58085 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56223, 0, address(sha3(0, stor4[cd[68]].field_0, _59387, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58086 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + 321])
                                    mem[mem[64] + 52] = address(_55860)
                                    _59389 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59391 = sha3(mem[_59389 + 32 len mem[_59389]])
                                    mem[_58086 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58086 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58086 + 125] = _59391
                                    mem[_58086 + 157] = stor4[cd[68]].field_512
                                    mem[_58086 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55795) == address(_55860):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55795) < address(_55860):
                                        if not address(_55795):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58086 + 221] = address(_55795)
                                        mem[_58086 + 241] = address(_55860)
                                        mem[_58086 + 189] = 40
                                        mem[_58086 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58086 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58086 + 314] = sha3(address(_55795), address(_55860))
                                        mem[_58086 + 346] = stor4[cd[68]].field_512
                                        mem[_58086 + 261] = 85
                                        mem[_58086 + 378] = 0
                                        mem[64] = _58086 + 410
                                        mem[_58086 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58086 + 414] = _56223
                                        mem[_58086 + 446] = 0
                                        mem[_58086 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59391, stor4[cd[68]].field_512))
                                        mem[_58086 + 510] = 128
                                        mem[_58086 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58086 + 574] = mem[s + _58086 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55795), address(_55860)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56223, 0, address(sha3(0, stor4[cd[68]].field_0, _59391, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55860):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58086 + 221] = address(_55860)
                                        mem[_58086 + 241] = address(_55795)
                                        mem[_58086 + 189] = 40
                                        mem[_58086 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58086 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58086 + 314] = sha3(address(_55860), address(_55795))
                                        mem[_58086 + 346] = stor4[cd[68]].field_512
                                        mem[_58086 + 261] = 85
                                        mem[_58086 + 378] = 0
                                        mem[64] = _58086 + 410
                                        mem[_58086 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58086 + 414] = _56223
                                        mem[_58086 + 446] = 0
                                        mem[_58086 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59391, stor4[cd[68]].field_512))
                                        mem[_58086 + 510] = 128
                                        mem[_58086 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58086 + 574] = mem[s + _58086 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55860), address(_55795)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56223, 0, address(sha3(0, stor4[cd[68]].field_0, _59391, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 32
                _55923 = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 64 len 32 * _55923] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55923]
                return 32, mem[mem[64] + 32 len (32 * _55923) + 32]
            mem[_19345 + 289] = return_data.size
            mem[_19345 + 321 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            if not return_data.size:
                mem[64] = _19345 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
                mem[_19345 + ceil32(return_data.size) + 290] = ('cd', 36).length
                mem[_19345 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
                mem[_19345 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[_19345 + ceil32(return_data.size) + 290]
                    _55797 = mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322]
                    require idx + 1 < mem[_19345 + ceil32(return_data.size) + 290]
                    _55862 = mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322]
                    if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56225 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                            if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58091 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59409 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59411 = sha3(mem[_59409 + 32 len mem[_59409]])
                                    mem[_58091 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58091 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58091 + 125] = _59411
                                    mem[_58091 + 157] = stor4[cd[68]].field_512
                                    mem[_58091 + 72] = 85
                                    mem[_58091 + 189] = 0
                                    mem[64] = _58091 + 221
                                    mem[_58091 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58091 + 225] = 0
                                    mem[_58091 + 257] = _56225
                                    mem[_58091 + 289] = msg.sender
                                    mem[_58091 + 321] = 128
                                    mem[_58091 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58091 + 385] = mem[s + _58091 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59411, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59411, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56225, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58092 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55797)
                                    _59413 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59415 = sha3(mem[_59413 + 32 len mem[_59413]])
                                    mem[_58092 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58092 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58092 + 125] = _59415
                                    mem[_58092 + 157] = stor4[cd[68]].field_512
                                    mem[_58092 + 72] = 85
                                    mem[_58092 + 189] = 0
                                    mem[64] = _58092 + 221
                                    mem[_58092 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58092 + 225] = 0
                                    mem[_58092 + 257] = _56225
                                    mem[_58092 + 289] = msg.sender
                                    mem[_58092 + 321] = 128
                                    mem[_58092 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58092 + 385] = mem[s + _58092 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59415, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59415, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56225, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                                _56609 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58089 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_56609)
                                    _59401 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59403 = sha3(mem[_59401 + 32 len mem[_59401]])
                                    mem[_58089 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58089 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58089 + 125] = _59403
                                    mem[_58089 + 157] = stor4[cd[68]].field_512
                                    mem[_58089 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58089 + 221] = address(_55797)
                                        mem[_58089 + 241] = address(_55862)
                                        mem[_58089 + 189] = 40
                                        mem[_58089 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58089 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58089 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58089 + 346] = stor4[cd[68]].field_512
                                        mem[_58089 + 261] = 85
                                        mem[_58089 + 378] = 0
                                        mem[64] = _58089 + 410
                                        mem[_58089 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58089 + 414] = 0
                                        mem[_58089 + 446] = _56225
                                        mem[_58089 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59403, stor4[cd[68]].field_512))
                                        mem[_58089 + 510] = 128
                                        mem[_58089 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58089 + 574] = mem[s + _58089 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56225, address(sha3(0, stor4[cd[68]].field_0, _59403, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58089 + 221] = address(_55862)
                                        mem[_58089 + 241] = address(_55797)
                                        mem[_58089 + 189] = 40
                                        mem[_58089 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58089 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58089 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58089 + 346] = stor4[cd[68]].field_512
                                        mem[_58089 + 261] = 85
                                        mem[_58089 + 378] = 0
                                        mem[64] = _58089 + 410
                                        mem[_58089 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58089 + 414] = 0
                                        mem[_58089 + 446] = _56225
                                        mem[_58089 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59403, stor4[cd[68]].field_512))
                                        mem[_58089 + 510] = 128
                                        mem[_58089 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58089 + 574] = mem[s + _58089 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56225, address(sha3(0, stor4[cd[68]].field_0, _59403, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58090 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59405 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59407 = sha3(mem[_59405 + 32 len mem[_59405]])
                                    mem[_58090 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58090 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58090 + 125] = _59407
                                    mem[_58090 + 157] = stor4[cd[68]].field_512
                                    mem[_58090 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58090 + 221] = address(_55797)
                                        mem[_58090 + 241] = address(_55862)
                                        mem[_58090 + 189] = 40
                                        mem[_58090 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58090 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58090 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58090 + 346] = stor4[cd[68]].field_512
                                        mem[_58090 + 261] = 85
                                        mem[_58090 + 378] = 0
                                        mem[64] = _58090 + 410
                                        mem[_58090 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58090 + 414] = 0
                                        mem[_58090 + 446] = _56225
                                        mem[_58090 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59407, stor4[cd[68]].field_512))
                                        mem[_58090 + 510] = 128
                                        mem[_58090 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58090 + 574] = mem[s + _58090 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56225, address(sha3(0, stor4[cd[68]].field_0, _59407, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58090 + 221] = address(_55862)
                                        mem[_58090 + 241] = address(_55797)
                                        mem[_58090 + 189] = 40
                                        mem[_58090 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58090 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58090 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58090 + 346] = stor4[cd[68]].field_512
                                        mem[_58090 + 261] = 85
                                        mem[_58090 + 378] = 0
                                        mem[64] = _58090 + 410
                                        mem[_58090 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58090 + 414] = 0
                                        mem[_58090 + 446] = _56225
                                        mem[_58090 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59407, stor4[cd[68]].field_512))
                                        mem[_58090 + 510] = 128
                                        mem[_58090 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58090 + 574] = mem[s + _58090 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56225, address(sha3(0, stor4[cd[68]].field_0, _59407, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58095 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59425 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59427 = sha3(mem[_59425 + 32 len mem[_59425]])
                                    mem[_58095 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58095 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58095 + 125] = _59427
                                    mem[_58095 + 157] = stor4[cd[68]].field_512
                                    mem[_58095 + 72] = 85
                                    mem[_58095 + 189] = 0
                                    mem[64] = _58095 + 221
                                    mem[_58095 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58095 + 225] = _56225
                                    mem[_58095 + 257] = 0
                                    mem[_58095 + 289] = msg.sender
                                    mem[_58095 + 321] = 128
                                    mem[_58095 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58095 + 385] = mem[s + _58095 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59427, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59427, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56225, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58096 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55797)
                                    _59429 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59431 = sha3(mem[_59429 + 32 len mem[_59429]])
                                    mem[_58096 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58096 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58096 + 125] = _59431
                                    mem[_58096 + 157] = stor4[cd[68]].field_512
                                    mem[_58096 + 72] = 85
                                    mem[_58096 + 189] = 0
                                    mem[64] = _58096 + 221
                                    mem[_58096 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58096 + 225] = _56225
                                    mem[_58096 + 257] = 0
                                    mem[_58096 + 289] = msg.sender
                                    mem[_58096 + 321] = 128
                                    mem[_58096 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58096 + 385] = mem[s + _58096 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59431, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59431, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56225, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                                _56610 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58093 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_56610)
                                    _59417 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59419 = sha3(mem[_59417 + 32 len mem[_59417]])
                                    mem[_58093 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58093 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58093 + 125] = _59419
                                    mem[_58093 + 157] = stor4[cd[68]].field_512
                                    mem[_58093 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58093 + 221] = address(_55797)
                                        mem[_58093 + 241] = address(_55862)
                                        mem[_58093 + 189] = 40
                                        mem[_58093 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58093 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58093 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58093 + 346] = stor4[cd[68]].field_512
                                        mem[_58093 + 261] = 85
                                        mem[_58093 + 378] = 0
                                        mem[64] = _58093 + 410
                                        mem[_58093 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58093 + 414] = _56225
                                        mem[_58093 + 446] = 0
                                        mem[_58093 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59419, stor4[cd[68]].field_512))
                                        mem[_58093 + 510] = 128
                                        mem[_58093 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58093 + 574] = mem[s + _58093 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56225, 0, address(sha3(0, stor4[cd[68]].field_0, _59419, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58093 + 221] = address(_55862)
                                        mem[_58093 + 241] = address(_55797)
                                        mem[_58093 + 189] = 40
                                        mem[_58093 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58093 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58093 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58093 + 346] = stor4[cd[68]].field_512
                                        mem[_58093 + 261] = 85
                                        mem[_58093 + 378] = 0
                                        mem[64] = _58093 + 410
                                        mem[_58093 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58093 + 414] = _56225
                                        mem[_58093 + 446] = 0
                                        mem[_58093 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59419, stor4[cd[68]].field_512))
                                        mem[_58093 + 510] = 128
                                        mem[_58093 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58093 + 574] = mem[s + _58093 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56225, 0, address(sha3(0, stor4[cd[68]].field_0, _59419, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58094 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59421 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59423 = sha3(mem[_59421 + 32 len mem[_59421]])
                                    mem[_58094 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58094 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58094 + 125] = _59423
                                    mem[_58094 + 157] = stor4[cd[68]].field_512
                                    mem[_58094 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58094 + 221] = address(_55797)
                                        mem[_58094 + 241] = address(_55862)
                                        mem[_58094 + 189] = 40
                                        mem[_58094 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58094 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58094 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58094 + 346] = stor4[cd[68]].field_512
                                        mem[_58094 + 261] = 85
                                        mem[_58094 + 378] = 0
                                        mem[64] = _58094 + 410
                                        mem[_58094 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58094 + 414] = _56225
                                        mem[_58094 + 446] = 0
                                        mem[_58094 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59423, stor4[cd[68]].field_512))
                                        mem[_58094 + 510] = 128
                                        mem[_58094 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58094 + 574] = mem[s + _58094 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56225, 0, address(sha3(0, stor4[cd[68]].field_0, _59423, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58094 + 221] = address(_55862)
                                        mem[_58094 + 241] = address(_55797)
                                        mem[_58094 + 189] = 40
                                        mem[_58094 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58094 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58094 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58094 + 346] = stor4[cd[68]].field_512
                                        mem[_58094 + 261] = 85
                                        mem[_58094 + 378] = 0
                                        mem[64] = _58094 + 410
                                        mem[_58094 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58094 + 414] = _56225
                                        mem[_58094 + 446] = 0
                                        mem[_58094 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59423, stor4[cd[68]].field_512))
                                        mem[_58094 + 510] = 128
                                        mem[_58094 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58094 + 574] = mem[s + _58094 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56225, 0, address(sha3(0, stor4[cd[68]].field_0, _59423, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56227 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                            if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58099 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59441 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59443 = sha3(mem[_59441 + 32 len mem[_59441]])
                                    mem[_58099 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58099 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58099 + 125] = _59443
                                    mem[_58099 + 157] = stor4[cd[68]].field_512
                                    mem[_58099 + 72] = 85
                                    mem[_58099 + 189] = 0
                                    mem[64] = _58099 + 221
                                    mem[_58099 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58099 + 225] = 0
                                    mem[_58099 + 257] = _56227
                                    mem[_58099 + 289] = msg.sender
                                    mem[_58099 + 321] = 128
                                    mem[_58099 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58099 + 385] = mem[s + _58099 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59443, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59443, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56227, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58100 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55797)
                                    _59445 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59447 = sha3(mem[_59445 + 32 len mem[_59445]])
                                    mem[_58100 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58100 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58100 + 125] = _59447
                                    mem[_58100 + 157] = stor4[cd[68]].field_512
                                    mem[_58100 + 72] = 85
                                    mem[_58100 + 189] = 0
                                    mem[64] = _58100 + 221
                                    mem[_58100 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58100 + 225] = 0
                                    mem[_58100 + 257] = _56227
                                    mem[_58100 + 289] = msg.sender
                                    mem[_58100 + 321] = 128
                                    mem[_58100 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58100 + 385] = mem[s + _58100 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59447, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59447, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56227, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                                _56611 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58097 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_56611)
                                    _59433 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59435 = sha3(mem[_59433 + 32 len mem[_59433]])
                                    mem[_58097 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58097 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58097 + 125] = _59435
                                    mem[_58097 + 157] = stor4[cd[68]].field_512
                                    mem[_58097 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58097 + 221] = address(_55797)
                                        mem[_58097 + 241] = address(_55862)
                                        mem[_58097 + 189] = 40
                                        mem[_58097 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58097 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58097 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58097 + 346] = stor4[cd[68]].field_512
                                        mem[_58097 + 261] = 85
                                        mem[_58097 + 378] = 0
                                        mem[64] = _58097 + 410
                                        mem[_58097 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58097 + 414] = 0
                                        mem[_58097 + 446] = _56227
                                        mem[_58097 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59435, stor4[cd[68]].field_512))
                                        mem[_58097 + 510] = 128
                                        mem[_58097 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58097 + 574] = mem[s + _58097 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56227, address(sha3(0, stor4[cd[68]].field_0, _59435, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58097 + 221] = address(_55862)
                                        mem[_58097 + 241] = address(_55797)
                                        mem[_58097 + 189] = 40
                                        mem[_58097 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58097 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58097 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58097 + 346] = stor4[cd[68]].field_512
                                        mem[_58097 + 261] = 85
                                        mem[_58097 + 378] = 0
                                        mem[64] = _58097 + 410
                                        mem[_58097 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58097 + 414] = 0
                                        mem[_58097 + 446] = _56227
                                        mem[_58097 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59435, stor4[cd[68]].field_512))
                                        mem[_58097 + 510] = 128
                                        mem[_58097 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58097 + 574] = mem[s + _58097 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56227, address(sha3(0, stor4[cd[68]].field_0, _59435, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58098 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59437 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59439 = sha3(mem[_59437 + 32 len mem[_59437]])
                                    mem[_58098 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58098 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58098 + 125] = _59439
                                    mem[_58098 + 157] = stor4[cd[68]].field_512
                                    mem[_58098 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58098 + 221] = address(_55797)
                                        mem[_58098 + 241] = address(_55862)
                                        mem[_58098 + 189] = 40
                                        mem[_58098 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58098 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58098 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58098 + 346] = stor4[cd[68]].field_512
                                        mem[_58098 + 261] = 85
                                        mem[_58098 + 378] = 0
                                        mem[64] = _58098 + 410
                                        mem[_58098 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58098 + 414] = 0
                                        mem[_58098 + 446] = _56227
                                        mem[_58098 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59439, stor4[cd[68]].field_512))
                                        mem[_58098 + 510] = 128
                                        mem[_58098 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58098 + 574] = mem[s + _58098 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56227, address(sha3(0, stor4[cd[68]].field_0, _59439, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58098 + 221] = address(_55862)
                                        mem[_58098 + 241] = address(_55797)
                                        mem[_58098 + 189] = 40
                                        mem[_58098 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58098 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58098 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58098 + 346] = stor4[cd[68]].field_512
                                        mem[_58098 + 261] = 85
                                        mem[_58098 + 378] = 0
                                        mem[64] = _58098 + 410
                                        mem[_58098 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58098 + 414] = 0
                                        mem[_58098 + 446] = _56227
                                        mem[_58098 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59439, stor4[cd[68]].field_512))
                                        mem[_58098 + 510] = 128
                                        mem[_58098 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58098 + 574] = mem[s + _58098 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56227, address(sha3(0, stor4[cd[68]].field_0, _59439, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58103 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59457 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59459 = sha3(mem[_59457 + 32 len mem[_59457]])
                                    mem[_58103 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58103 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58103 + 125] = _59459
                                    mem[_58103 + 157] = stor4[cd[68]].field_512
                                    mem[_58103 + 72] = 85
                                    mem[_58103 + 189] = 0
                                    mem[64] = _58103 + 221
                                    mem[_58103 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58103 + 225] = _56227
                                    mem[_58103 + 257] = 0
                                    mem[_58103 + 289] = msg.sender
                                    mem[_58103 + 321] = 128
                                    mem[_58103 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58103 + 385] = mem[s + _58103 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59459, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59459, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56227, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58104 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55797)
                                    _59461 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59463 = sha3(mem[_59461 + 32 len mem[_59461]])
                                    mem[_58104 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58104 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58104 + 125] = _59463
                                    mem[_58104 + 157] = stor4[cd[68]].field_512
                                    mem[_58104 + 72] = 85
                                    mem[_58104 + 189] = 0
                                    mem[64] = _58104 + 221
                                    mem[_58104 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58104 + 225] = _56227
                                    mem[_58104 + 257] = 0
                                    mem[_58104 + 289] = msg.sender
                                    mem[_58104 + 321] = 128
                                    mem[_58104 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58104 + 385] = mem[s + _58104 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59463, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59463, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56227, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                                _56612 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58101 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_56612)
                                    _59449 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59451 = sha3(mem[_59449 + 32 len mem[_59449]])
                                    mem[_58101 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58101 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58101 + 125] = _59451
                                    mem[_58101 + 157] = stor4[cd[68]].field_512
                                    mem[_58101 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58101 + 221] = address(_55797)
                                        mem[_58101 + 241] = address(_55862)
                                        mem[_58101 + 189] = 40
                                        mem[_58101 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58101 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58101 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58101 + 346] = stor4[cd[68]].field_512
                                        mem[_58101 + 261] = 85
                                        mem[_58101 + 378] = 0
                                        mem[64] = _58101 + 410
                                        mem[_58101 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58101 + 414] = _56227
                                        mem[_58101 + 446] = 0
                                        mem[_58101 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59451, stor4[cd[68]].field_512))
                                        mem[_58101 + 510] = 128
                                        mem[_58101 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58101 + 574] = mem[s + _58101 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56227, 0, address(sha3(0, stor4[cd[68]].field_0, _59451, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58101 + 221] = address(_55862)
                                        mem[_58101 + 241] = address(_55797)
                                        mem[_58101 + 189] = 40
                                        mem[_58101 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58101 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58101 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58101 + 346] = stor4[cd[68]].field_512
                                        mem[_58101 + 261] = 85
                                        mem[_58101 + 378] = 0
                                        mem[64] = _58101 + 410
                                        mem[_58101 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58101 + 414] = _56227
                                        mem[_58101 + 446] = 0
                                        mem[_58101 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59451, stor4[cd[68]].field_512))
                                        mem[_58101 + 510] = 128
                                        mem[_58101 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58101 + 574] = mem[s + _58101 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56227, 0, address(sha3(0, stor4[cd[68]].field_0, _59451, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58102 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                    mem[mem[64] + 52] = address(_55862)
                                    _59453 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59455 = sha3(mem[_59453 + 32 len mem[_59453]])
                                    mem[_58102 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58102 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58102 + 125] = _59455
                                    mem[_58102 + 157] = stor4[cd[68]].field_512
                                    mem[_58102 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55797) == address(_55862):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55797) < address(_55862):
                                        if not address(_55797):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58102 + 221] = address(_55797)
                                        mem[_58102 + 241] = address(_55862)
                                        mem[_58102 + 189] = 40
                                        mem[_58102 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58102 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58102 + 314] = sha3(address(_55797), address(_55862))
                                        mem[_58102 + 346] = stor4[cd[68]].field_512
                                        mem[_58102 + 261] = 85
                                        mem[_58102 + 378] = 0
                                        mem[64] = _58102 + 410
                                        mem[_58102 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58102 + 414] = _56227
                                        mem[_58102 + 446] = 0
                                        mem[_58102 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59455, stor4[cd[68]].field_512))
                                        mem[_58102 + 510] = 128
                                        mem[_58102 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58102 + 574] = mem[s + _58102 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55797), address(_55862)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56227, 0, address(sha3(0, stor4[cd[68]].field_0, _59455, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55862):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58102 + 221] = address(_55862)
                                        mem[_58102 + 241] = address(_55797)
                                        mem[_58102 + 189] = 40
                                        mem[_58102 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58102 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58102 + 314] = sha3(address(_55862), address(_55797))
                                        mem[_58102 + 346] = stor4[cd[68]].field_512
                                        mem[_58102 + 261] = 85
                                        mem[_58102 + 378] = 0
                                        mem[64] = _58102 + 410
                                        mem[_58102 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58102 + 414] = _56227
                                        mem[_58102 + 446] = 0
                                        mem[_58102 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59455, stor4[cd[68]].field_512))
                                        mem[_58102 + 510] = 128
                                        mem[_58102 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58102 + 574] = mem[s + _58102 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55862), address(_55797)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56227, 0, address(sha3(0, stor4[cd[68]].field_0, _59455, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 32
                _55925 = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 64 len 32 * _55925] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55925]
                return 32, mem[mem[64] + 32 len (32 * _55925) + 32]
            require return_data.size >= 32
            require mem[_19345 + 321] == bool(mem[_19345 + 321])
            if not mem[_19345 + 321]:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            mem[64] = _19345 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
            mem[_19345 + ceil32(return_data.size) + 290] = ('cd', 36).length
            mem[_19345 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
            mem[_19345 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[_19345 + ceil32(return_data.size) + 290]
                _55799 = mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322]
                require idx + 1 < mem[_19345 + ceil32(return_data.size) + 290]
                _55864 = mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322]
                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                    if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56229 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                        if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58107 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59473 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59475 = sha3(mem[_59473 + 32 len mem[_59473]])
                                mem[_58107 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58107 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58107 + 125] = _59475
                                mem[_58107 + 157] = stor4[cd[68]].field_512
                                mem[_58107 + 72] = 85
                                mem[_58107 + 189] = 0
                                mem[64] = _58107 + 221
                                mem[_58107 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58107 + 225] = 0
                                mem[_58107 + 257] = _56229
                                mem[_58107 + 289] = msg.sender
                                mem[_58107 + 321] = 128
                                mem[_58107 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58107 + 385] = mem[s + _58107 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59475, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59475, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56229, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58108 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55799)
                                _59477 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59479 = sha3(mem[_59477 + 32 len mem[_59477]])
                                mem[_58108 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58108 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58108 + 125] = _59479
                                mem[_58108 + 157] = stor4[cd[68]].field_512
                                mem[_58108 + 72] = 85
                                mem[_58108 + 189] = 0
                                mem[64] = _58108 + 221
                                mem[_58108 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58108 + 225] = 0
                                mem[_58108 + 257] = _56229
                                mem[_58108 + 289] = msg.sender
                                mem[_58108 + 321] = 128
                                mem[_58108 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58108 + 385] = mem[s + _58108 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59479, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59479, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56229, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                            _56613 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58105 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56613)
                                _59465 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59467 = sha3(mem[_59465 + 32 len mem[_59465]])
                                mem[_58105 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58105 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58105 + 125] = _59467
                                mem[_58105 + 157] = stor4[cd[68]].field_512
                                mem[_58105 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58105 + 221] = address(_55799)
                                    mem[_58105 + 241] = address(_55864)
                                    mem[_58105 + 189] = 40
                                    mem[_58105 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58105 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58105 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58105 + 346] = stor4[cd[68]].field_512
                                    mem[_58105 + 261] = 85
                                    mem[_58105 + 378] = 0
                                    mem[64] = _58105 + 410
                                    mem[_58105 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58105 + 414] = 0
                                    mem[_58105 + 446] = _56229
                                    mem[_58105 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59467, stor4[cd[68]].field_512))
                                    mem[_58105 + 510] = 128
                                    mem[_58105 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58105 + 574] = mem[s + _58105 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56229, address(sha3(0, stor4[cd[68]].field_0, _59467, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58105 + 221] = address(_55864)
                                    mem[_58105 + 241] = address(_55799)
                                    mem[_58105 + 189] = 40
                                    mem[_58105 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58105 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58105 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58105 + 346] = stor4[cd[68]].field_512
                                    mem[_58105 + 261] = 85
                                    mem[_58105 + 378] = 0
                                    mem[64] = _58105 + 410
                                    mem[_58105 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58105 + 414] = 0
                                    mem[_58105 + 446] = _56229
                                    mem[_58105 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59467, stor4[cd[68]].field_512))
                                    mem[_58105 + 510] = 128
                                    mem[_58105 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58105 + 574] = mem[s + _58105 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56229, address(sha3(0, stor4[cd[68]].field_0, _59467, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58106 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59469 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59471 = sha3(mem[_59469 + 32 len mem[_59469]])
                                mem[_58106 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58106 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58106 + 125] = _59471
                                mem[_58106 + 157] = stor4[cd[68]].field_512
                                mem[_58106 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58106 + 221] = address(_55799)
                                    mem[_58106 + 241] = address(_55864)
                                    mem[_58106 + 189] = 40
                                    mem[_58106 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58106 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58106 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58106 + 346] = stor4[cd[68]].field_512
                                    mem[_58106 + 261] = 85
                                    mem[_58106 + 378] = 0
                                    mem[64] = _58106 + 410
                                    mem[_58106 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58106 + 414] = 0
                                    mem[_58106 + 446] = _56229
                                    mem[_58106 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59471, stor4[cd[68]].field_512))
                                    mem[_58106 + 510] = 128
                                    mem[_58106 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58106 + 574] = mem[s + _58106 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56229, address(sha3(0, stor4[cd[68]].field_0, _59471, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58106 + 221] = address(_55864)
                                    mem[_58106 + 241] = address(_55799)
                                    mem[_58106 + 189] = 40
                                    mem[_58106 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58106 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58106 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58106 + 346] = stor4[cd[68]].field_512
                                    mem[_58106 + 261] = 85
                                    mem[_58106 + 378] = 0
                                    mem[64] = _58106 + 410
                                    mem[_58106 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58106 + 414] = 0
                                    mem[_58106 + 446] = _56229
                                    mem[_58106 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59471, stor4[cd[68]].field_512))
                                    mem[_58106 + 510] = 128
                                    mem[_58106 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58106 + 574] = mem[s + _58106 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56229, address(sha3(0, stor4[cd[68]].field_0, _59471, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58111 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59489 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59491 = sha3(mem[_59489 + 32 len mem[_59489]])
                                mem[_58111 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58111 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58111 + 125] = _59491
                                mem[_58111 + 157] = stor4[cd[68]].field_512
                                mem[_58111 + 72] = 85
                                mem[_58111 + 189] = 0
                                mem[64] = _58111 + 221
                                mem[_58111 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58111 + 225] = _56229
                                mem[_58111 + 257] = 0
                                mem[_58111 + 289] = msg.sender
                                mem[_58111 + 321] = 128
                                mem[_58111 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58111 + 385] = mem[s + _58111 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59491, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59491, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56229, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58112 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55799)
                                _59493 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59495 = sha3(mem[_59493 + 32 len mem[_59493]])
                                mem[_58112 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58112 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58112 + 125] = _59495
                                mem[_58112 + 157] = stor4[cd[68]].field_512
                                mem[_58112 + 72] = 85
                                mem[_58112 + 189] = 0
                                mem[64] = _58112 + 221
                                mem[_58112 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58112 + 225] = _56229
                                mem[_58112 + 257] = 0
                                mem[_58112 + 289] = msg.sender
                                mem[_58112 + 321] = 128
                                mem[_58112 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58112 + 385] = mem[s + _58112 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59495, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59495, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56229, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                            _56614 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58109 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56614)
                                _59481 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59483 = sha3(mem[_59481 + 32 len mem[_59481]])
                                mem[_58109 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58109 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58109 + 125] = _59483
                                mem[_58109 + 157] = stor4[cd[68]].field_512
                                mem[_58109 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58109 + 221] = address(_55799)
                                    mem[_58109 + 241] = address(_55864)
                                    mem[_58109 + 189] = 40
                                    mem[_58109 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58109 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58109 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58109 + 346] = stor4[cd[68]].field_512
                                    mem[_58109 + 261] = 85
                                    mem[_58109 + 378] = 0
                                    mem[64] = _58109 + 410
                                    mem[_58109 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58109 + 414] = _56229
                                    mem[_58109 + 446] = 0
                                    mem[_58109 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59483, stor4[cd[68]].field_512))
                                    mem[_58109 + 510] = 128
                                    mem[_58109 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58109 + 574] = mem[s + _58109 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56229, 0, address(sha3(0, stor4[cd[68]].field_0, _59483, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58109 + 221] = address(_55864)
                                    mem[_58109 + 241] = address(_55799)
                                    mem[_58109 + 189] = 40
                                    mem[_58109 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58109 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58109 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58109 + 346] = stor4[cd[68]].field_512
                                    mem[_58109 + 261] = 85
                                    mem[_58109 + 378] = 0
                                    mem[64] = _58109 + 410
                                    mem[_58109 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58109 + 414] = _56229
                                    mem[_58109 + 446] = 0
                                    mem[_58109 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59483, stor4[cd[68]].field_512))
                                    mem[_58109 + 510] = 128
                                    mem[_58109 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58109 + 574] = mem[s + _58109 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56229, 0, address(sha3(0, stor4[cd[68]].field_0, _59483, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58110 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59485 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59487 = sha3(mem[_59485 + 32 len mem[_59485]])
                                mem[_58110 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58110 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58110 + 125] = _59487
                                mem[_58110 + 157] = stor4[cd[68]].field_512
                                mem[_58110 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58110 + 221] = address(_55799)
                                    mem[_58110 + 241] = address(_55864)
                                    mem[_58110 + 189] = 40
                                    mem[_58110 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58110 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58110 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58110 + 346] = stor4[cd[68]].field_512
                                    mem[_58110 + 261] = 85
                                    mem[_58110 + 378] = 0
                                    mem[64] = _58110 + 410
                                    mem[_58110 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58110 + 414] = _56229
                                    mem[_58110 + 446] = 0
                                    mem[_58110 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59487, stor4[cd[68]].field_512))
                                    mem[_58110 + 510] = 128
                                    mem[_58110 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58110 + 574] = mem[s + _58110 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56229, 0, address(sha3(0, stor4[cd[68]].field_0, _59487, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58110 + 221] = address(_55864)
                                    mem[_58110 + 241] = address(_55799)
                                    mem[_58110 + 189] = 40
                                    mem[_58110 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58110 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58110 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58110 + 346] = stor4[cd[68]].field_512
                                    mem[_58110 + 261] = 85
                                    mem[_58110 + 378] = 0
                                    mem[64] = _58110 + 410
                                    mem[_58110 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58110 + 414] = _56229
                                    mem[_58110 + 446] = 0
                                    mem[_58110 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59487, stor4[cd[68]].field_512))
                                    mem[_58110 + 510] = 128
                                    mem[_58110 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58110 + 574] = mem[s + _58110 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56229, 0, address(sha3(0, stor4[cd[68]].field_0, _59487, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56231 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                        if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58115 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59505 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59507 = sha3(mem[_59505 + 32 len mem[_59505]])
                                mem[_58115 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58115 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58115 + 125] = _59507
                                mem[_58115 + 157] = stor4[cd[68]].field_512
                                mem[_58115 + 72] = 85
                                mem[_58115 + 189] = 0
                                mem[64] = _58115 + 221
                                mem[_58115 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58115 + 225] = 0
                                mem[_58115 + 257] = _56231
                                mem[_58115 + 289] = msg.sender
                                mem[_58115 + 321] = 128
                                mem[_58115 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58115 + 385] = mem[s + _58115 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59507, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59507, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56231, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58116 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55799)
                                _59509 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59511 = sha3(mem[_59509 + 32 len mem[_59509]])
                                mem[_58116 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58116 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58116 + 125] = _59511
                                mem[_58116 + 157] = stor4[cd[68]].field_512
                                mem[_58116 + 72] = 85
                                mem[_58116 + 189] = 0
                                mem[64] = _58116 + 221
                                mem[_58116 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58116 + 225] = 0
                                mem[_58116 + 257] = _56231
                                mem[_58116 + 289] = msg.sender
                                mem[_58116 + 321] = 128
                                mem[_58116 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58116 + 385] = mem[s + _58116 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59511, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59511, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56231, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                            _56615 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58113 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56615)
                                _59497 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59499 = sha3(mem[_59497 + 32 len mem[_59497]])
                                mem[_58113 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58113 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58113 + 125] = _59499
                                mem[_58113 + 157] = stor4[cd[68]].field_512
                                mem[_58113 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58113 + 221] = address(_55799)
                                    mem[_58113 + 241] = address(_55864)
                                    mem[_58113 + 189] = 40
                                    mem[_58113 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58113 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58113 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58113 + 346] = stor4[cd[68]].field_512
                                    mem[_58113 + 261] = 85
                                    mem[_58113 + 378] = 0
                                    mem[64] = _58113 + 410
                                    mem[_58113 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58113 + 414] = 0
                                    mem[_58113 + 446] = _56231
                                    mem[_58113 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59499, stor4[cd[68]].field_512))
                                    mem[_58113 + 510] = 128
                                    mem[_58113 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58113 + 574] = mem[s + _58113 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56231, address(sha3(0, stor4[cd[68]].field_0, _59499, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58113 + 221] = address(_55864)
                                    mem[_58113 + 241] = address(_55799)
                                    mem[_58113 + 189] = 40
                                    mem[_58113 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58113 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58113 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58113 + 346] = stor4[cd[68]].field_512
                                    mem[_58113 + 261] = 85
                                    mem[_58113 + 378] = 0
                                    mem[64] = _58113 + 410
                                    mem[_58113 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58113 + 414] = 0
                                    mem[_58113 + 446] = _56231
                                    mem[_58113 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59499, stor4[cd[68]].field_512))
                                    mem[_58113 + 510] = 128
                                    mem[_58113 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58113 + 574] = mem[s + _58113 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56231, address(sha3(0, stor4[cd[68]].field_0, _59499, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58114 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59501 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59503 = sha3(mem[_59501 + 32 len mem[_59501]])
                                mem[_58114 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58114 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58114 + 125] = _59503
                                mem[_58114 + 157] = stor4[cd[68]].field_512
                                mem[_58114 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58114 + 221] = address(_55799)
                                    mem[_58114 + 241] = address(_55864)
                                    mem[_58114 + 189] = 40
                                    mem[_58114 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58114 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58114 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58114 + 346] = stor4[cd[68]].field_512
                                    mem[_58114 + 261] = 85
                                    mem[_58114 + 378] = 0
                                    mem[64] = _58114 + 410
                                    mem[_58114 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58114 + 414] = 0
                                    mem[_58114 + 446] = _56231
                                    mem[_58114 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59503, stor4[cd[68]].field_512))
                                    mem[_58114 + 510] = 128
                                    mem[_58114 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58114 + 574] = mem[s + _58114 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56231, address(sha3(0, stor4[cd[68]].field_0, _59503, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58114 + 221] = address(_55864)
                                    mem[_58114 + 241] = address(_55799)
                                    mem[_58114 + 189] = 40
                                    mem[_58114 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58114 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58114 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58114 + 346] = stor4[cd[68]].field_512
                                    mem[_58114 + 261] = 85
                                    mem[_58114 + 378] = 0
                                    mem[64] = _58114 + 410
                                    mem[_58114 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58114 + 414] = 0
                                    mem[_58114 + 446] = _56231
                                    mem[_58114 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59503, stor4[cd[68]].field_512))
                                    mem[_58114 + 510] = 128
                                    mem[_58114 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58114 + 574] = mem[s + _58114 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56231, address(sha3(0, stor4[cd[68]].field_0, _59503, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19345 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58119 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59521 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59523 = sha3(mem[_59521 + 32 len mem[_59521]])
                                mem[_58119 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58119 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58119 + 125] = _59523
                                mem[_58119 + 157] = stor4[cd[68]].field_512
                                mem[_58119 + 72] = 85
                                mem[_58119 + 189] = 0
                                mem[64] = _58119 + 221
                                mem[_58119 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58119 + 225] = _56231
                                mem[_58119 + 257] = 0
                                mem[_58119 + 289] = msg.sender
                                mem[_58119 + 321] = 128
                                mem[_58119 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58119 + 385] = mem[s + _58119 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59523, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59523, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56231, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58120 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55799)
                                _59525 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59527 = sha3(mem[_59525 + 32 len mem[_59525]])
                                mem[_58120 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58120 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58120 + 125] = _59527
                                mem[_58120 + 157] = stor4[cd[68]].field_512
                                mem[_58120 + 72] = 85
                                mem[_58120 + 189] = 0
                                mem[64] = _58120 + 221
                                mem[_58120 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58120 + 225] = _56231
                                mem[_58120 + 257] = 0
                                mem[_58120 + 289] = msg.sender
                                mem[_58120 + 321] = 128
                                mem[_58120 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58120 + 385] = mem[s + _58120 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59527, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59527, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56231, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19345 + ceil32(return_data.size) + 290]
                            _56616 = mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58117 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56616)
                                _59513 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59515 = sha3(mem[_59513 + 32 len mem[_59513]])
                                mem[_58117 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58117 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58117 + 125] = _59515
                                mem[_58117 + 157] = stor4[cd[68]].field_512
                                mem[_58117 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58117 + 221] = address(_55799)
                                    mem[_58117 + 241] = address(_55864)
                                    mem[_58117 + 189] = 40
                                    mem[_58117 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58117 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58117 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58117 + 346] = stor4[cd[68]].field_512
                                    mem[_58117 + 261] = 85
                                    mem[_58117 + 378] = 0
                                    mem[64] = _58117 + 410
                                    mem[_58117 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58117 + 414] = _56231
                                    mem[_58117 + 446] = 0
                                    mem[_58117 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59515, stor4[cd[68]].field_512))
                                    mem[_58117 + 510] = 128
                                    mem[_58117 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58117 + 574] = mem[s + _58117 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56231, 0, address(sha3(0, stor4[cd[68]].field_0, _59515, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58117 + 221] = address(_55864)
                                    mem[_58117 + 241] = address(_55799)
                                    mem[_58117 + 189] = 40
                                    mem[_58117 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58117 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58117 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58117 + 346] = stor4[cd[68]].field_512
                                    mem[_58117 + 261] = 85
                                    mem[_58117 + 378] = 0
                                    mem[64] = _58117 + 410
                                    mem[_58117 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58117 + 414] = _56231
                                    mem[_58117 + 446] = 0
                                    mem[_58117 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59515, stor4[cd[68]].field_512))
                                    mem[_58117 + 510] = 128
                                    mem[_58117 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58117 + 574] = mem[s + _58117 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56231, 0, address(sha3(0, stor4[cd[68]].field_0, _59515, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58118 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19345 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55864)
                                _59517 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59519 = sha3(mem[_59517 + 32 len mem[_59517]])
                                mem[_58118 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58118 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58118 + 125] = _59519
                                mem[_58118 + 157] = stor4[cd[68]].field_512
                                mem[_58118 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55799) == address(_55864):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55799) < address(_55864):
                                    if not address(_55799):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58118 + 221] = address(_55799)
                                    mem[_58118 + 241] = address(_55864)
                                    mem[_58118 + 189] = 40
                                    mem[_58118 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58118 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58118 + 314] = sha3(address(_55799), address(_55864))
                                    mem[_58118 + 346] = stor4[cd[68]].field_512
                                    mem[_58118 + 261] = 85
                                    mem[_58118 + 378] = 0
                                    mem[64] = _58118 + 410
                                    mem[_58118 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58118 + 414] = _56231
                                    mem[_58118 + 446] = 0
                                    mem[_58118 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59519, stor4[cd[68]].field_512))
                                    mem[_58118 + 510] = 128
                                    mem[_58118 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58118 + 574] = mem[s + _58118 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55799), address(_55864)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56231, 0, address(sha3(0, stor4[cd[68]].field_0, _59519, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55864):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58118 + 221] = address(_55864)
                                    mem[_58118 + 241] = address(_55799)
                                    mem[_58118 + 189] = 40
                                    mem[_58118 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58118 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58118 + 314] = sha3(address(_55864), address(_55799))
                                    mem[_58118 + 346] = stor4[cd[68]].field_512
                                    mem[_58118 + 261] = 85
                                    mem[_58118 + 378] = 0
                                    mem[64] = _58118 + 410
                                    mem[_58118 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58118 + 414] = _56231
                                    mem[_58118 + 446] = 0
                                    mem[_58118 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59519, stor4[cd[68]].field_512))
                                    mem[_58118 + 510] = 128
                                    mem[_58118 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58118 + 574] = mem[s + _58118 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55864), address(_55799)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56231, 0, address(sha3(0, stor4[cd[68]].field_0, _59519, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
            mem[mem[64]] = 32
            _55927 = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 64 len 32 * _55927] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55927]
            return 32, mem[mem[64] + 32 len (32 * _55927) + 32]
        if not address(('cd', 36)[1]):
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        _19346 = mem[64]
        mem[mem[64] + 32] = address(('cd', 36)[1])
        mem[mem[64] + 52] = address(('cd', 36)[0])
        _19405 = mem[64]
        mem[mem[64]] = 40
        mem[64] = mem[64] + 72
        _19407 = sha3(mem[_19405 + 32 len mem[_19405]])
        mem[_19346 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
        mem[_19346 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
        mem[_19346 + 125] = _19407
        mem[_19346 + 157] = stor4[cd[68]].field_512
        mem[_19346 + 72] = 85
        require 0 < mem[(32 * ('cd', 36).length) + 128]
        _19498 = mem[(32 * ('cd', 36).length) + 160]
        mem[_19346 + 225] = address(sha3(0, stor4[cd[68]].field_0, _19407, stor4[cd[68]].field_512))
        mem[_19346 + 257] = _19498
        mem[_19346 + 189] = 68
        mem[_19346 + 221 len 4] = unknown_0xa9059cbb(?????)
        mem[_19346 + 289 len 96] = 0, address(sha3(0, stor4[cd[68]].field_0, _19407, stor4[cd[68]].field_512)), _19498, mem[_19346 + 289 len 28]
        mem[_19346 + 357] = 0
        call address(('cd', 36)[0]) with:
             gas gas_remaining wei
            args mem[_19346 + 293 len 64]
        if not return_data.size:
            if not ext_call.success:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            if not mem[96]:
                mem[64] = _19346 + (32 * ('cd', 36).length) + 321
                mem[_19346 + 289] = ('cd', 36).length
                mem[_19346 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
                mem[_19346 + (32 * ('cd', 36).length) + 321] = 0
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[_19346 + 289]
                    _55809 = mem[(32 * idx) + _19346 + 321]
                    require idx + 1 < mem[_19346 + 289]
                    _55874 = mem[(32 * idx + 1) + _19346 + 321]
                    if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                        if not mem[(32 * idx) + _19346 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56249 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx) + _19346 + 333 len 20]:
                            if idx >= mem[_19346 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58187 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59793 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59795 = sha3(mem[_59793 + 32 len mem[_59793]])
                                    mem[_58187 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58187 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58187 + 125] = _59795
                                    mem[_58187 + 157] = stor4[cd[68]].field_512
                                    mem[_58187 + 72] = 85
                                    mem[_58187 + 189] = 0
                                    mem[64] = _58187 + 221
                                    mem[_58187 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58187 + 225] = 0
                                    mem[_58187 + 257] = _56249
                                    mem[_58187 + 289] = msg.sender
                                    mem[_58187 + 321] = 128
                                    mem[_58187 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58187 + 385] = mem[s + _58187 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59795, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59795, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56249, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58188 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55809)
                                    _59797 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59799 = sha3(mem[_59797 + 32 len mem[_59797]])
                                    mem[_58188 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58188 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58188 + 125] = _59799
                                    mem[_58188 + 157] = stor4[cd[68]].field_512
                                    mem[_58188 + 72] = 85
                                    mem[_58188 + 189] = 0
                                    mem[64] = _58188 + 221
                                    mem[_58188 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58188 + 225] = 0
                                    mem[_58188 + 257] = _56249
                                    mem[_58188 + 289] = msg.sender
                                    mem[_58188 + 321] = 128
                                    mem[_58188 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58188 + 385] = mem[s + _58188 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59799, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59799, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56249, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19346 + 289]
                                _56633 = mem[(32 * idx + 2) + _19346 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58185 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_56633)
                                    _59785 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59787 = sha3(mem[_59785 + 32 len mem[_59785]])
                                    mem[_58185 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58185 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58185 + 125] = _59787
                                    mem[_58185 + 157] = stor4[cd[68]].field_512
                                    mem[_58185 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58185 + 221] = address(_55809)
                                        mem[_58185 + 241] = address(_55874)
                                        mem[_58185 + 189] = 40
                                        mem[_58185 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58185 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58185 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58185 + 346] = stor4[cd[68]].field_512
                                        mem[_58185 + 261] = 85
                                        mem[_58185 + 378] = 0
                                        mem[64] = _58185 + 410
                                        mem[_58185 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58185 + 414] = 0
                                        mem[_58185 + 446] = _56249
                                        mem[_58185 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59787, stor4[cd[68]].field_512))
                                        mem[_58185 + 510] = 128
                                        mem[_58185 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58185 + 574] = mem[s + _58185 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56249, address(sha3(0, stor4[cd[68]].field_0, _59787, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58185 + 221] = address(_55874)
                                        mem[_58185 + 241] = address(_55809)
                                        mem[_58185 + 189] = 40
                                        mem[_58185 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58185 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58185 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58185 + 346] = stor4[cd[68]].field_512
                                        mem[_58185 + 261] = 85
                                        mem[_58185 + 378] = 0
                                        mem[64] = _58185 + 410
                                        mem[_58185 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58185 + 414] = 0
                                        mem[_58185 + 446] = _56249
                                        mem[_58185 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59787, stor4[cd[68]].field_512))
                                        mem[_58185 + 510] = 128
                                        mem[_58185 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58185 + 574] = mem[s + _58185 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56249, address(sha3(0, stor4[cd[68]].field_0, _59787, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58186 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59789 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59791 = sha3(mem[_59789 + 32 len mem[_59789]])
                                    mem[_58186 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58186 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58186 + 125] = _59791
                                    mem[_58186 + 157] = stor4[cd[68]].field_512
                                    mem[_58186 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58186 + 221] = address(_55809)
                                        mem[_58186 + 241] = address(_55874)
                                        mem[_58186 + 189] = 40
                                        mem[_58186 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58186 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58186 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58186 + 346] = stor4[cd[68]].field_512
                                        mem[_58186 + 261] = 85
                                        mem[_58186 + 378] = 0
                                        mem[64] = _58186 + 410
                                        mem[_58186 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58186 + 414] = 0
                                        mem[_58186 + 446] = _56249
                                        mem[_58186 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59791, stor4[cd[68]].field_512))
                                        mem[_58186 + 510] = 128
                                        mem[_58186 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58186 + 574] = mem[s + _58186 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56249, address(sha3(0, stor4[cd[68]].field_0, _59791, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58186 + 221] = address(_55874)
                                        mem[_58186 + 241] = address(_55809)
                                        mem[_58186 + 189] = 40
                                        mem[_58186 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58186 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58186 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58186 + 346] = stor4[cd[68]].field_512
                                        mem[_58186 + 261] = 85
                                        mem[_58186 + 378] = 0
                                        mem[64] = _58186 + 410
                                        mem[_58186 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58186 + 414] = 0
                                        mem[_58186 + 446] = _56249
                                        mem[_58186 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59791, stor4[cd[68]].field_512))
                                        mem[_58186 + 510] = 128
                                        mem[_58186 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58186 + 574] = mem[s + _58186 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56249, address(sha3(0, stor4[cd[68]].field_0, _59791, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19346 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58191 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59809 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59811 = sha3(mem[_59809 + 32 len mem[_59809]])
                                    mem[_58191 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58191 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58191 + 125] = _59811
                                    mem[_58191 + 157] = stor4[cd[68]].field_512
                                    mem[_58191 + 72] = 85
                                    mem[_58191 + 189] = 0
                                    mem[64] = _58191 + 221
                                    mem[_58191 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58191 + 225] = _56249
                                    mem[_58191 + 257] = 0
                                    mem[_58191 + 289] = msg.sender
                                    mem[_58191 + 321] = 128
                                    mem[_58191 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58191 + 385] = mem[s + _58191 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59811, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59811, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56249, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58192 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55809)
                                    _59813 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59815 = sha3(mem[_59813 + 32 len mem[_59813]])
                                    mem[_58192 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58192 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58192 + 125] = _59815
                                    mem[_58192 + 157] = stor4[cd[68]].field_512
                                    mem[_58192 + 72] = 85
                                    mem[_58192 + 189] = 0
                                    mem[64] = _58192 + 221
                                    mem[_58192 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58192 + 225] = _56249
                                    mem[_58192 + 257] = 0
                                    mem[_58192 + 289] = msg.sender
                                    mem[_58192 + 321] = 128
                                    mem[_58192 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58192 + 385] = mem[s + _58192 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59815, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59815, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56249, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19346 + 289]
                                _56634 = mem[(32 * idx + 2) + _19346 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58189 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_56634)
                                    _59801 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59803 = sha3(mem[_59801 + 32 len mem[_59801]])
                                    mem[_58189 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58189 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58189 + 125] = _59803
                                    mem[_58189 + 157] = stor4[cd[68]].field_512
                                    mem[_58189 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58189 + 221] = address(_55809)
                                        mem[_58189 + 241] = address(_55874)
                                        mem[_58189 + 189] = 40
                                        mem[_58189 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58189 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58189 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58189 + 346] = stor4[cd[68]].field_512
                                        mem[_58189 + 261] = 85
                                        mem[_58189 + 378] = 0
                                        mem[64] = _58189 + 410
                                        mem[_58189 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58189 + 414] = _56249
                                        mem[_58189 + 446] = 0
                                        mem[_58189 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59803, stor4[cd[68]].field_512))
                                        mem[_58189 + 510] = 128
                                        mem[_58189 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58189 + 574] = mem[s + _58189 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56249, 0, address(sha3(0, stor4[cd[68]].field_0, _59803, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58189 + 221] = address(_55874)
                                        mem[_58189 + 241] = address(_55809)
                                        mem[_58189 + 189] = 40
                                        mem[_58189 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58189 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58189 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58189 + 346] = stor4[cd[68]].field_512
                                        mem[_58189 + 261] = 85
                                        mem[_58189 + 378] = 0
                                        mem[64] = _58189 + 410
                                        mem[_58189 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58189 + 414] = _56249
                                        mem[_58189 + 446] = 0
                                        mem[_58189 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59803, stor4[cd[68]].field_512))
                                        mem[_58189 + 510] = 128
                                        mem[_58189 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58189 + 574] = mem[s + _58189 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56249, 0, address(sha3(0, stor4[cd[68]].field_0, _59803, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58190 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59805 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59807 = sha3(mem[_59805 + 32 len mem[_59805]])
                                    mem[_58190 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58190 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58190 + 125] = _59807
                                    mem[_58190 + 157] = stor4[cd[68]].field_512
                                    mem[_58190 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58190 + 221] = address(_55809)
                                        mem[_58190 + 241] = address(_55874)
                                        mem[_58190 + 189] = 40
                                        mem[_58190 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58190 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58190 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58190 + 346] = stor4[cd[68]].field_512
                                        mem[_58190 + 261] = 85
                                        mem[_58190 + 378] = 0
                                        mem[64] = _58190 + 410
                                        mem[_58190 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58190 + 414] = _56249
                                        mem[_58190 + 446] = 0
                                        mem[_58190 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59807, stor4[cd[68]].field_512))
                                        mem[_58190 + 510] = 128
                                        mem[_58190 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58190 + 574] = mem[s + _58190 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56249, 0, address(sha3(0, stor4[cd[68]].field_0, _59807, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58190 + 221] = address(_55874)
                                        mem[_58190 + 241] = address(_55809)
                                        mem[_58190 + 189] = 40
                                        mem[_58190 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58190 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58190 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58190 + 346] = stor4[cd[68]].field_512
                                        mem[_58190 + 261] = 85
                                        mem[_58190 + 378] = 0
                                        mem[64] = _58190 + 410
                                        mem[_58190 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58190 + 414] = _56249
                                        mem[_58190 + 446] = 0
                                        mem[_58190 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59807, stor4[cd[68]].field_512))
                                        mem[_58190 + 510] = 128
                                        mem[_58190 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58190 + 574] = mem[s + _58190 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56249, 0, address(sha3(0, stor4[cd[68]].field_0, _59807, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56251 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                            if idx >= mem[_19346 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58195 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59825 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59827 = sha3(mem[_59825 + 32 len mem[_59825]])
                                    mem[_58195 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58195 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58195 + 125] = _59827
                                    mem[_58195 + 157] = stor4[cd[68]].field_512
                                    mem[_58195 + 72] = 85
                                    mem[_58195 + 189] = 0
                                    mem[64] = _58195 + 221
                                    mem[_58195 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58195 + 225] = 0
                                    mem[_58195 + 257] = _56251
                                    mem[_58195 + 289] = msg.sender
                                    mem[_58195 + 321] = 128
                                    mem[_58195 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58195 + 385] = mem[s + _58195 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59827, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59827, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56251, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58196 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55809)
                                    _59829 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59831 = sha3(mem[_59829 + 32 len mem[_59829]])
                                    mem[_58196 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58196 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58196 + 125] = _59831
                                    mem[_58196 + 157] = stor4[cd[68]].field_512
                                    mem[_58196 + 72] = 85
                                    mem[_58196 + 189] = 0
                                    mem[64] = _58196 + 221
                                    mem[_58196 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58196 + 225] = 0
                                    mem[_58196 + 257] = _56251
                                    mem[_58196 + 289] = msg.sender
                                    mem[_58196 + 321] = 128
                                    mem[_58196 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58196 + 385] = mem[s + _58196 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59831, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59831, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56251, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19346 + 289]
                                _56635 = mem[(32 * idx + 2) + _19346 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58193 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_56635)
                                    _59817 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59819 = sha3(mem[_59817 + 32 len mem[_59817]])
                                    mem[_58193 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58193 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58193 + 125] = _59819
                                    mem[_58193 + 157] = stor4[cd[68]].field_512
                                    mem[_58193 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58193 + 221] = address(_55809)
                                        mem[_58193 + 241] = address(_55874)
                                        mem[_58193 + 189] = 40
                                        mem[_58193 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58193 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58193 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58193 + 346] = stor4[cd[68]].field_512
                                        mem[_58193 + 261] = 85
                                        mem[_58193 + 378] = 0
                                        mem[64] = _58193 + 410
                                        mem[_58193 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58193 + 414] = 0
                                        mem[_58193 + 446] = _56251
                                        mem[_58193 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59819, stor4[cd[68]].field_512))
                                        mem[_58193 + 510] = 128
                                        mem[_58193 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58193 + 574] = mem[s + _58193 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56251, address(sha3(0, stor4[cd[68]].field_0, _59819, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58193 + 221] = address(_55874)
                                        mem[_58193 + 241] = address(_55809)
                                        mem[_58193 + 189] = 40
                                        mem[_58193 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58193 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58193 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58193 + 346] = stor4[cd[68]].field_512
                                        mem[_58193 + 261] = 85
                                        mem[_58193 + 378] = 0
                                        mem[64] = _58193 + 410
                                        mem[_58193 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58193 + 414] = 0
                                        mem[_58193 + 446] = _56251
                                        mem[_58193 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59819, stor4[cd[68]].field_512))
                                        mem[_58193 + 510] = 128
                                        mem[_58193 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58193 + 574] = mem[s + _58193 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56251, address(sha3(0, stor4[cd[68]].field_0, _59819, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58194 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59821 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59823 = sha3(mem[_59821 + 32 len mem[_59821]])
                                    mem[_58194 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58194 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58194 + 125] = _59823
                                    mem[_58194 + 157] = stor4[cd[68]].field_512
                                    mem[_58194 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58194 + 221] = address(_55809)
                                        mem[_58194 + 241] = address(_55874)
                                        mem[_58194 + 189] = 40
                                        mem[_58194 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58194 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58194 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58194 + 346] = stor4[cd[68]].field_512
                                        mem[_58194 + 261] = 85
                                        mem[_58194 + 378] = 0
                                        mem[64] = _58194 + 410
                                        mem[_58194 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58194 + 414] = 0
                                        mem[_58194 + 446] = _56251
                                        mem[_58194 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59823, stor4[cd[68]].field_512))
                                        mem[_58194 + 510] = 128
                                        mem[_58194 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58194 + 574] = mem[s + _58194 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56251, address(sha3(0, stor4[cd[68]].field_0, _59823, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58194 + 221] = address(_55874)
                                        mem[_58194 + 241] = address(_55809)
                                        mem[_58194 + 189] = 40
                                        mem[_58194 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58194 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58194 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58194 + 346] = stor4[cd[68]].field_512
                                        mem[_58194 + 261] = 85
                                        mem[_58194 + 378] = 0
                                        mem[64] = _58194 + 410
                                        mem[_58194 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58194 + 414] = 0
                                        mem[_58194 + 446] = _56251
                                        mem[_58194 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59823, stor4[cd[68]].field_512))
                                        mem[_58194 + 510] = 128
                                        mem[_58194 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58194 + 574] = mem[s + _58194 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56251, address(sha3(0, stor4[cd[68]].field_0, _59823, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19346 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58199 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59841 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59843 = sha3(mem[_59841 + 32 len mem[_59841]])
                                    mem[_58199 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58199 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58199 + 125] = _59843
                                    mem[_58199 + 157] = stor4[cd[68]].field_512
                                    mem[_58199 + 72] = 85
                                    mem[_58199 + 189] = 0
                                    mem[64] = _58199 + 221
                                    mem[_58199 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58199 + 225] = _56251
                                    mem[_58199 + 257] = 0
                                    mem[_58199 + 289] = msg.sender
                                    mem[_58199 + 321] = 128
                                    mem[_58199 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58199 + 385] = mem[s + _58199 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59843, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59843, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56251, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58200 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55809)
                                    _59845 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59847 = sha3(mem[_59845 + 32 len mem[_59845]])
                                    mem[_58200 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58200 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58200 + 125] = _59847
                                    mem[_58200 + 157] = stor4[cd[68]].field_512
                                    mem[_58200 + 72] = 85
                                    mem[_58200 + 189] = 0
                                    mem[64] = _58200 + 221
                                    mem[_58200 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58200 + 225] = _56251
                                    mem[_58200 + 257] = 0
                                    mem[_58200 + 289] = msg.sender
                                    mem[_58200 + 321] = 128
                                    mem[_58200 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58200 + 385] = mem[s + _58200 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59847, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _59847, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56251, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19346 + 289]
                                _56636 = mem[(32 * idx + 2) + _19346 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58197 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_56636)
                                    _59833 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59835 = sha3(mem[_59833 + 32 len mem[_59833]])
                                    mem[_58197 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58197 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58197 + 125] = _59835
                                    mem[_58197 + 157] = stor4[cd[68]].field_512
                                    mem[_58197 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58197 + 221] = address(_55809)
                                        mem[_58197 + 241] = address(_55874)
                                        mem[_58197 + 189] = 40
                                        mem[_58197 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58197 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58197 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58197 + 346] = stor4[cd[68]].field_512
                                        mem[_58197 + 261] = 85
                                        mem[_58197 + 378] = 0
                                        mem[64] = _58197 + 410
                                        mem[_58197 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58197 + 414] = _56251
                                        mem[_58197 + 446] = 0
                                        mem[_58197 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59835, stor4[cd[68]].field_512))
                                        mem[_58197 + 510] = 128
                                        mem[_58197 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58197 + 574] = mem[s + _58197 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56251, 0, address(sha3(0, stor4[cd[68]].field_0, _59835, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58197 + 221] = address(_55874)
                                        mem[_58197 + 241] = address(_55809)
                                        mem[_58197 + 189] = 40
                                        mem[_58197 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58197 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58197 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58197 + 346] = stor4[cd[68]].field_512
                                        mem[_58197 + 261] = 85
                                        mem[_58197 + 378] = 0
                                        mem[64] = _58197 + 410
                                        mem[_58197 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58197 + 414] = _56251
                                        mem[_58197 + 446] = 0
                                        mem[_58197 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59835, stor4[cd[68]].field_512))
                                        mem[_58197 + 510] = 128
                                        mem[_58197 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58197 + 574] = mem[s + _58197 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56251, 0, address(sha3(0, stor4[cd[68]].field_0, _59835, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58198 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                    mem[mem[64] + 52] = address(_55874)
                                    _59837 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _59839 = sha3(mem[_59837 + 32 len mem[_59837]])
                                    mem[_58198 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58198 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58198 + 125] = _59839
                                    mem[_58198 + 157] = stor4[cd[68]].field_512
                                    mem[_58198 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55809) == address(_55874):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55809) < address(_55874):
                                        if not address(_55809):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58198 + 221] = address(_55809)
                                        mem[_58198 + 241] = address(_55874)
                                        mem[_58198 + 189] = 40
                                        mem[_58198 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58198 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58198 + 314] = sha3(address(_55809), address(_55874))
                                        mem[_58198 + 346] = stor4[cd[68]].field_512
                                        mem[_58198 + 261] = 85
                                        mem[_58198 + 378] = 0
                                        mem[64] = _58198 + 410
                                        mem[_58198 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58198 + 414] = _56251
                                        mem[_58198 + 446] = 0
                                        mem[_58198 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59839, stor4[cd[68]].field_512))
                                        mem[_58198 + 510] = 128
                                        mem[_58198 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58198 + 574] = mem[s + _58198 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55809), address(_55874)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56251, 0, address(sha3(0, stor4[cd[68]].field_0, _59839, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55874):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58198 + 221] = address(_55874)
                                        mem[_58198 + 241] = address(_55809)
                                        mem[_58198 + 189] = 40
                                        mem[_58198 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58198 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58198 + 314] = sha3(address(_55874), address(_55809))
                                        mem[_58198 + 346] = stor4[cd[68]].field_512
                                        mem[_58198 + 261] = 85
                                        mem[_58198 + 378] = 0
                                        mem[64] = _58198 + 410
                                        mem[_58198 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58198 + 414] = _56251
                                        mem[_58198 + 446] = 0
                                        mem[_58198 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59839, stor4[cd[68]].field_512))
                                        mem[_58198 + 510] = 128
                                        mem[_58198 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58198 + 574] = mem[s + _58198 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55874), address(_55809)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56251, 0, address(sha3(0, stor4[cd[68]].field_0, _59839, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 32
                _55937 = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 64 len 32 * _55937] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55937]
                return 32, mem[mem[64] + 32 len (32 * _55937) + 32]
            require mem[96] >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            mem[64] = _19346 + (32 * ('cd', 36).length) + 321
            mem[_19346 + 289] = ('cd', 36).length
            mem[_19346 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
            mem[_19346 + (32 * ('cd', 36).length) + 321] = 0
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[_19346 + 289]
                _55811 = mem[(32 * idx) + _19346 + 321]
                require idx + 1 < mem[_19346 + 289]
                _55876 = mem[(32 * idx + 1) + _19346 + 321]
                if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                    if not mem[(32 * idx) + _19346 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56253 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx) + _19346 + 333 len 20]:
                        if idx >= mem[_19346 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                if not mem[(32 * idx) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58203 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59857 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59859 = sha3(mem[_59857 + 32 len mem[_59857]])
                                mem[_58203 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58203 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58203 + 125] = _59859
                                mem[_58203 + 157] = stor4[cd[68]].field_512
                                mem[_58203 + 72] = 85
                                mem[_58203 + 189] = 0
                                mem[64] = _58203 + 221
                                mem[_58203 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58203 + 225] = 0
                                mem[_58203 + 257] = _56253
                                mem[_58203 + 289] = msg.sender
                                mem[_58203 + 321] = 128
                                mem[_58203 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58203 + 385] = mem[s + _58203 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59859, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59859, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56253, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58204 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55811)
                                _59861 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59863 = sha3(mem[_59861 + 32 len mem[_59861]])
                                mem[_58204 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58204 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58204 + 125] = _59863
                                mem[_58204 + 157] = stor4[cd[68]].field_512
                                mem[_58204 + 72] = 85
                                mem[_58204 + 189] = 0
                                mem[64] = _58204 + 221
                                mem[_58204 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58204 + 225] = 0
                                mem[_58204 + 257] = _56253
                                mem[_58204 + 289] = msg.sender
                                mem[_58204 + 321] = 128
                                mem[_58204 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58204 + 385] = mem[s + _58204 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59863, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59863, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56253, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + 289]
                            _56637 = mem[(32 * idx + 2) + _19346 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58201 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_56637)
                                _59849 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59851 = sha3(mem[_59849 + 32 len mem[_59849]])
                                mem[_58201 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58201 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58201 + 125] = _59851
                                mem[_58201 + 157] = stor4[cd[68]].field_512
                                mem[_58201 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58201 + 221] = address(_55811)
                                    mem[_58201 + 241] = address(_55876)
                                    mem[_58201 + 189] = 40
                                    mem[_58201 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58201 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58201 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58201 + 346] = stor4[cd[68]].field_512
                                    mem[_58201 + 261] = 85
                                    mem[_58201 + 378] = 0
                                    mem[64] = _58201 + 410
                                    mem[_58201 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58201 + 414] = 0
                                    mem[_58201 + 446] = _56253
                                    mem[_58201 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59851, stor4[cd[68]].field_512))
                                    mem[_58201 + 510] = 128
                                    mem[_58201 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58201 + 574] = mem[s + _58201 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56253, address(sha3(0, stor4[cd[68]].field_0, _59851, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58201 + 221] = address(_55876)
                                    mem[_58201 + 241] = address(_55811)
                                    mem[_58201 + 189] = 40
                                    mem[_58201 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58201 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58201 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58201 + 346] = stor4[cd[68]].field_512
                                    mem[_58201 + 261] = 85
                                    mem[_58201 + 378] = 0
                                    mem[64] = _58201 + 410
                                    mem[_58201 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58201 + 414] = 0
                                    mem[_58201 + 446] = _56253
                                    mem[_58201 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59851, stor4[cd[68]].field_512))
                                    mem[_58201 + 510] = 128
                                    mem[_58201 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58201 + 574] = mem[s + _58201 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56253, address(sha3(0, stor4[cd[68]].field_0, _59851, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58202 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59853 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59855 = sha3(mem[_59853 + 32 len mem[_59853]])
                                mem[_58202 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58202 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58202 + 125] = _59855
                                mem[_58202 + 157] = stor4[cd[68]].field_512
                                mem[_58202 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58202 + 221] = address(_55811)
                                    mem[_58202 + 241] = address(_55876)
                                    mem[_58202 + 189] = 40
                                    mem[_58202 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58202 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58202 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58202 + 346] = stor4[cd[68]].field_512
                                    mem[_58202 + 261] = 85
                                    mem[_58202 + 378] = 0
                                    mem[64] = _58202 + 410
                                    mem[_58202 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58202 + 414] = 0
                                    mem[_58202 + 446] = _56253
                                    mem[_58202 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59855, stor4[cd[68]].field_512))
                                    mem[_58202 + 510] = 128
                                    mem[_58202 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58202 + 574] = mem[s + _58202 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56253, address(sha3(0, stor4[cd[68]].field_0, _59855, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58202 + 221] = address(_55876)
                                    mem[_58202 + 241] = address(_55811)
                                    mem[_58202 + 189] = 40
                                    mem[_58202 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58202 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58202 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58202 + 346] = stor4[cd[68]].field_512
                                    mem[_58202 + 261] = 85
                                    mem[_58202 + 378] = 0
                                    mem[64] = _58202 + 410
                                    mem[_58202 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58202 + 414] = 0
                                    mem[_58202 + 446] = _56253
                                    mem[_58202 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59855, stor4[cd[68]].field_512))
                                    mem[_58202 + 510] = 128
                                    mem[_58202 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58202 + 574] = mem[s + _58202 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56253, address(sha3(0, stor4[cd[68]].field_0, _59855, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19346 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                if not mem[(32 * idx) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58207 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59873 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59875 = sha3(mem[_59873 + 32 len mem[_59873]])
                                mem[_58207 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58207 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58207 + 125] = _59875
                                mem[_58207 + 157] = stor4[cd[68]].field_512
                                mem[_58207 + 72] = 85
                                mem[_58207 + 189] = 0
                                mem[64] = _58207 + 221
                                mem[_58207 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58207 + 225] = _56253
                                mem[_58207 + 257] = 0
                                mem[_58207 + 289] = msg.sender
                                mem[_58207 + 321] = 128
                                mem[_58207 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58207 + 385] = mem[s + _58207 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59875, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59875, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56253, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58208 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55811)
                                _59877 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59879 = sha3(mem[_59877 + 32 len mem[_59877]])
                                mem[_58208 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58208 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58208 + 125] = _59879
                                mem[_58208 + 157] = stor4[cd[68]].field_512
                                mem[_58208 + 72] = 85
                                mem[_58208 + 189] = 0
                                mem[64] = _58208 + 221
                                mem[_58208 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58208 + 225] = _56253
                                mem[_58208 + 257] = 0
                                mem[_58208 + 289] = msg.sender
                                mem[_58208 + 321] = 128
                                mem[_58208 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58208 + 385] = mem[s + _58208 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59879, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59879, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56253, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + 289]
                            _56638 = mem[(32 * idx + 2) + _19346 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58205 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_56638)
                                _59865 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59867 = sha3(mem[_59865 + 32 len mem[_59865]])
                                mem[_58205 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58205 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58205 + 125] = _59867
                                mem[_58205 + 157] = stor4[cd[68]].field_512
                                mem[_58205 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58205 + 221] = address(_55811)
                                    mem[_58205 + 241] = address(_55876)
                                    mem[_58205 + 189] = 40
                                    mem[_58205 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58205 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58205 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58205 + 346] = stor4[cd[68]].field_512
                                    mem[_58205 + 261] = 85
                                    mem[_58205 + 378] = 0
                                    mem[64] = _58205 + 410
                                    mem[_58205 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58205 + 414] = _56253
                                    mem[_58205 + 446] = 0
                                    mem[_58205 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59867, stor4[cd[68]].field_512))
                                    mem[_58205 + 510] = 128
                                    mem[_58205 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58205 + 574] = mem[s + _58205 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56253, 0, address(sha3(0, stor4[cd[68]].field_0, _59867, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58205 + 221] = address(_55876)
                                    mem[_58205 + 241] = address(_55811)
                                    mem[_58205 + 189] = 40
                                    mem[_58205 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58205 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58205 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58205 + 346] = stor4[cd[68]].field_512
                                    mem[_58205 + 261] = 85
                                    mem[_58205 + 378] = 0
                                    mem[64] = _58205 + 410
                                    mem[_58205 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58205 + 414] = _56253
                                    mem[_58205 + 446] = 0
                                    mem[_58205 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59867, stor4[cd[68]].field_512))
                                    mem[_58205 + 510] = 128
                                    mem[_58205 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58205 + 574] = mem[s + _58205 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56253, 0, address(sha3(0, stor4[cd[68]].field_0, _59867, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58206 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59869 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59871 = sha3(mem[_59869 + 32 len mem[_59869]])
                                mem[_58206 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58206 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58206 + 125] = _59871
                                mem[_58206 + 157] = stor4[cd[68]].field_512
                                mem[_58206 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58206 + 221] = address(_55811)
                                    mem[_58206 + 241] = address(_55876)
                                    mem[_58206 + 189] = 40
                                    mem[_58206 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58206 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58206 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58206 + 346] = stor4[cd[68]].field_512
                                    mem[_58206 + 261] = 85
                                    mem[_58206 + 378] = 0
                                    mem[64] = _58206 + 410
                                    mem[_58206 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58206 + 414] = _56253
                                    mem[_58206 + 446] = 0
                                    mem[_58206 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59871, stor4[cd[68]].field_512))
                                    mem[_58206 + 510] = 128
                                    mem[_58206 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58206 + 574] = mem[s + _58206 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56253, 0, address(sha3(0, stor4[cd[68]].field_0, _59871, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58206 + 221] = address(_55876)
                                    mem[_58206 + 241] = address(_55811)
                                    mem[_58206 + 189] = 40
                                    mem[_58206 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58206 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58206 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58206 + 346] = stor4[cd[68]].field_512
                                    mem[_58206 + 261] = 85
                                    mem[_58206 + 378] = 0
                                    mem[64] = _58206 + 410
                                    mem[_58206 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58206 + 414] = _56253
                                    mem[_58206 + 446] = 0
                                    mem[_58206 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59871, stor4[cd[68]].field_512))
                                    mem[_58206 + 510] = 128
                                    mem[_58206 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58206 + 574] = mem[s + _58206 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56253, 0, address(sha3(0, stor4[cd[68]].field_0, _59871, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56255 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                        if idx >= mem[_19346 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                if not mem[(32 * idx) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58211 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59889 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59891 = sha3(mem[_59889 + 32 len mem[_59889]])
                                mem[_58211 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58211 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58211 + 125] = _59891
                                mem[_58211 + 157] = stor4[cd[68]].field_512
                                mem[_58211 + 72] = 85
                                mem[_58211 + 189] = 0
                                mem[64] = _58211 + 221
                                mem[_58211 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58211 + 225] = 0
                                mem[_58211 + 257] = _56255
                                mem[_58211 + 289] = msg.sender
                                mem[_58211 + 321] = 128
                                mem[_58211 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58211 + 385] = mem[s + _58211 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59891, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59891, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56255, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58212 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55811)
                                _59893 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59895 = sha3(mem[_59893 + 32 len mem[_59893]])
                                mem[_58212 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58212 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58212 + 125] = _59895
                                mem[_58212 + 157] = stor4[cd[68]].field_512
                                mem[_58212 + 72] = 85
                                mem[_58212 + 189] = 0
                                mem[64] = _58212 + 221
                                mem[_58212 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58212 + 225] = 0
                                mem[_58212 + 257] = _56255
                                mem[_58212 + 289] = msg.sender
                                mem[_58212 + 321] = 128
                                mem[_58212 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58212 + 385] = mem[s + _58212 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59895, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59895, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56255, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + 289]
                            _56639 = mem[(32 * idx + 2) + _19346 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58209 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_56639)
                                _59881 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59883 = sha3(mem[_59881 + 32 len mem[_59881]])
                                mem[_58209 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58209 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58209 + 125] = _59883
                                mem[_58209 + 157] = stor4[cd[68]].field_512
                                mem[_58209 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58209 + 221] = address(_55811)
                                    mem[_58209 + 241] = address(_55876)
                                    mem[_58209 + 189] = 40
                                    mem[_58209 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58209 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58209 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58209 + 346] = stor4[cd[68]].field_512
                                    mem[_58209 + 261] = 85
                                    mem[_58209 + 378] = 0
                                    mem[64] = _58209 + 410
                                    mem[_58209 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58209 + 414] = 0
                                    mem[_58209 + 446] = _56255
                                    mem[_58209 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59883, stor4[cd[68]].field_512))
                                    mem[_58209 + 510] = 128
                                    mem[_58209 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58209 + 574] = mem[s + _58209 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56255, address(sha3(0, stor4[cd[68]].field_0, _59883, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58209 + 221] = address(_55876)
                                    mem[_58209 + 241] = address(_55811)
                                    mem[_58209 + 189] = 40
                                    mem[_58209 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58209 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58209 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58209 + 346] = stor4[cd[68]].field_512
                                    mem[_58209 + 261] = 85
                                    mem[_58209 + 378] = 0
                                    mem[64] = _58209 + 410
                                    mem[_58209 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58209 + 414] = 0
                                    mem[_58209 + 446] = _56255
                                    mem[_58209 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59883, stor4[cd[68]].field_512))
                                    mem[_58209 + 510] = 128
                                    mem[_58209 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58209 + 574] = mem[s + _58209 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56255, address(sha3(0, stor4[cd[68]].field_0, _59883, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58210 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59885 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59887 = sha3(mem[_59885 + 32 len mem[_59885]])
                                mem[_58210 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58210 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58210 + 125] = _59887
                                mem[_58210 + 157] = stor4[cd[68]].field_512
                                mem[_58210 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58210 + 221] = address(_55811)
                                    mem[_58210 + 241] = address(_55876)
                                    mem[_58210 + 189] = 40
                                    mem[_58210 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58210 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58210 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58210 + 346] = stor4[cd[68]].field_512
                                    mem[_58210 + 261] = 85
                                    mem[_58210 + 378] = 0
                                    mem[64] = _58210 + 410
                                    mem[_58210 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58210 + 414] = 0
                                    mem[_58210 + 446] = _56255
                                    mem[_58210 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59887, stor4[cd[68]].field_512))
                                    mem[_58210 + 510] = 128
                                    mem[_58210 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58210 + 574] = mem[s + _58210 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56255, address(sha3(0, stor4[cd[68]].field_0, _59887, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58210 + 221] = address(_55876)
                                    mem[_58210 + 241] = address(_55811)
                                    mem[_58210 + 189] = 40
                                    mem[_58210 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58210 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58210 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58210 + 346] = stor4[cd[68]].field_512
                                    mem[_58210 + 261] = 85
                                    mem[_58210 + 378] = 0
                                    mem[64] = _58210 + 410
                                    mem[_58210 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58210 + 414] = 0
                                    mem[_58210 + 446] = _56255
                                    mem[_58210 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59887, stor4[cd[68]].field_512))
                                    mem[_58210 + 510] = 128
                                    mem[_58210 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58210 + 574] = mem[s + _58210 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56255, address(sha3(0, stor4[cd[68]].field_0, _59887, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19346 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + 333 len 20] == mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + 333 len 20] < mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                if not mem[(32 * idx) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58215 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59905 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59907 = sha3(mem[_59905 + 32 len mem[_59905]])
                                mem[_58215 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58215 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58215 + 125] = _59907
                                mem[_58215 + 157] = stor4[cd[68]].field_512
                                mem[_58215 + 72] = 85
                                mem[_58215 + 189] = 0
                                mem[64] = _58215 + 221
                                mem[_58215 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58215 + 225] = _56255
                                mem[_58215 + 257] = 0
                                mem[_58215 + 289] = msg.sender
                                mem[_58215 + 321] = 128
                                mem[_58215 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58215 + 385] = mem[s + _58215 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59907, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59907, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56255, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58216 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55811)
                                _59909 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59911 = sha3(mem[_59909 + 32 len mem[_59909]])
                                mem[_58216 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58216 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58216 + 125] = _59911
                                mem[_58216 + 157] = stor4[cd[68]].field_512
                                mem[_58216 + 72] = 85
                                mem[_58216 + 189] = 0
                                mem[64] = _58216 + 221
                                mem[_58216 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58216 + 225] = _56255
                                mem[_58216 + 257] = 0
                                mem[_58216 + 289] = msg.sender
                                mem[_58216 + 321] = 128
                                mem[_58216 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58216 + 385] = mem[s + _58216 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59911, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59911, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56255, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + 289]
                            _56640 = mem[(32 * idx + 2) + _19346 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] == mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + 333 len 20] < mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58213 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + 321])
                                mem[mem[64] + 52] = address(_56640)
                                _59897 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59899 = sha3(mem[_59897 + 32 len mem[_59897]])
                                mem[_58213 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58213 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58213 + 125] = _59899
                                mem[_58213 + 157] = stor4[cd[68]].field_512
                                mem[_58213 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58213 + 221] = address(_55811)
                                    mem[_58213 + 241] = address(_55876)
                                    mem[_58213 + 189] = 40
                                    mem[_58213 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58213 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58213 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58213 + 346] = stor4[cd[68]].field_512
                                    mem[_58213 + 261] = 85
                                    mem[_58213 + 378] = 0
                                    mem[64] = _58213 + 410
                                    mem[_58213 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58213 + 414] = _56255
                                    mem[_58213 + 446] = 0
                                    mem[_58213 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59899, stor4[cd[68]].field_512))
                                    mem[_58213 + 510] = 128
                                    mem[_58213 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58213 + 574] = mem[s + _58213 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56255, 0, address(sha3(0, stor4[cd[68]].field_0, _59899, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58213 + 221] = address(_55876)
                                    mem[_58213 + 241] = address(_55811)
                                    mem[_58213 + 189] = 40
                                    mem[_58213 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58213 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58213 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58213 + 346] = stor4[cd[68]].field_512
                                    mem[_58213 + 261] = 85
                                    mem[_58213 + 378] = 0
                                    mem[64] = _58213 + 410
                                    mem[_58213 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58213 + 414] = _56255
                                    mem[_58213 + 446] = 0
                                    mem[_58213 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59899, stor4[cd[68]].field_512))
                                    mem[_58213 + 510] = 128
                                    mem[_58213 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58213 + 574] = mem[s + _58213 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56255, 0, address(sha3(0, stor4[cd[68]].field_0, _59899, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58214 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + 321])
                                mem[mem[64] + 52] = address(_55876)
                                _59901 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59903 = sha3(mem[_59901 + 32 len mem[_59901]])
                                mem[_58214 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58214 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58214 + 125] = _59903
                                mem[_58214 + 157] = stor4[cd[68]].field_512
                                mem[_58214 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55811) == address(_55876):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55811) < address(_55876):
                                    if not address(_55811):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58214 + 221] = address(_55811)
                                    mem[_58214 + 241] = address(_55876)
                                    mem[_58214 + 189] = 40
                                    mem[_58214 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58214 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58214 + 314] = sha3(address(_55811), address(_55876))
                                    mem[_58214 + 346] = stor4[cd[68]].field_512
                                    mem[_58214 + 261] = 85
                                    mem[_58214 + 378] = 0
                                    mem[64] = _58214 + 410
                                    mem[_58214 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58214 + 414] = _56255
                                    mem[_58214 + 446] = 0
                                    mem[_58214 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59903, stor4[cd[68]].field_512))
                                    mem[_58214 + 510] = 128
                                    mem[_58214 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58214 + 574] = mem[s + _58214 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55811), address(_55876)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56255, 0, address(sha3(0, stor4[cd[68]].field_0, _59903, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55876):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58214 + 221] = address(_55876)
                                    mem[_58214 + 241] = address(_55811)
                                    mem[_58214 + 189] = 40
                                    mem[_58214 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58214 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58214 + 314] = sha3(address(_55876), address(_55811))
                                    mem[_58214 + 346] = stor4[cd[68]].field_512
                                    mem[_58214 + 261] = 85
                                    mem[_58214 + 378] = 0
                                    mem[64] = _58214 + 410
                                    mem[_58214 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58214 + 414] = _56255
                                    mem[_58214 + 446] = 0
                                    mem[_58214 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59903, stor4[cd[68]].field_512))
                                    mem[_58214 + 510] = 128
                                    mem[_58214 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58214 + 574] = mem[s + _58214 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55876), address(_55811)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56255, 0, address(sha3(0, stor4[cd[68]].field_0, _59903, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
            mem[mem[64]] = 32
            _55939 = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 64 len 32 * _55939] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55939]
            return 32, mem[mem[64] + 32 len (32 * _55939) + 32]
        mem[_19346 + 289] = return_data.size
        mem[_19346 + 321 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        if not return_data.size:
            mem[64] = _19346 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
            mem[_19346 + ceil32(return_data.size) + 290] = ('cd', 36).length
            mem[_19346 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
            mem[_19346 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[_19346 + ceil32(return_data.size) + 290]
                _55813 = mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322]
                require idx + 1 < mem[_19346 + ceil32(return_data.size) + 290]
                _55878 = mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322]
                if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                    if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56257 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                        if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58219 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59921 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59923 = sha3(mem[_59921 + 32 len mem[_59921]])
                                mem[_58219 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58219 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58219 + 125] = _59923
                                mem[_58219 + 157] = stor4[cd[68]].field_512
                                mem[_58219 + 72] = 85
                                mem[_58219 + 189] = 0
                                mem[64] = _58219 + 221
                                mem[_58219 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58219 + 225] = 0
                                mem[_58219 + 257] = _56257
                                mem[_58219 + 289] = msg.sender
                                mem[_58219 + 321] = 128
                                mem[_58219 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58219 + 385] = mem[s + _58219 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59923, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59923, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56257, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58220 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55813)
                                _59925 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59927 = sha3(mem[_59925 + 32 len mem[_59925]])
                                mem[_58220 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58220 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58220 + 125] = _59927
                                mem[_58220 + 157] = stor4[cd[68]].field_512
                                mem[_58220 + 72] = 85
                                mem[_58220 + 189] = 0
                                mem[64] = _58220 + 221
                                mem[_58220 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58220 + 225] = 0
                                mem[_58220 + 257] = _56257
                                mem[_58220 + 289] = msg.sender
                                mem[_58220 + 321] = 128
                                mem[_58220 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58220 + 385] = mem[s + _58220 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59927, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59927, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56257, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                            _56641 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58217 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56641)
                                _59913 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59915 = sha3(mem[_59913 + 32 len mem[_59913]])
                                mem[_58217 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58217 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58217 + 125] = _59915
                                mem[_58217 + 157] = stor4[cd[68]].field_512
                                mem[_58217 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58217 + 221] = address(_55813)
                                    mem[_58217 + 241] = address(_55878)
                                    mem[_58217 + 189] = 40
                                    mem[_58217 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58217 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58217 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58217 + 346] = stor4[cd[68]].field_512
                                    mem[_58217 + 261] = 85
                                    mem[_58217 + 378] = 0
                                    mem[64] = _58217 + 410
                                    mem[_58217 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58217 + 414] = 0
                                    mem[_58217 + 446] = _56257
                                    mem[_58217 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59915, stor4[cd[68]].field_512))
                                    mem[_58217 + 510] = 128
                                    mem[_58217 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58217 + 574] = mem[s + _58217 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56257, address(sha3(0, stor4[cd[68]].field_0, _59915, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58217 + 221] = address(_55878)
                                    mem[_58217 + 241] = address(_55813)
                                    mem[_58217 + 189] = 40
                                    mem[_58217 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58217 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58217 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58217 + 346] = stor4[cd[68]].field_512
                                    mem[_58217 + 261] = 85
                                    mem[_58217 + 378] = 0
                                    mem[64] = _58217 + 410
                                    mem[_58217 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58217 + 414] = 0
                                    mem[_58217 + 446] = _56257
                                    mem[_58217 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59915, stor4[cd[68]].field_512))
                                    mem[_58217 + 510] = 128
                                    mem[_58217 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58217 + 574] = mem[s + _58217 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56257, address(sha3(0, stor4[cd[68]].field_0, _59915, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58218 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59917 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59919 = sha3(mem[_59917 + 32 len mem[_59917]])
                                mem[_58218 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58218 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58218 + 125] = _59919
                                mem[_58218 + 157] = stor4[cd[68]].field_512
                                mem[_58218 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58218 + 221] = address(_55813)
                                    mem[_58218 + 241] = address(_55878)
                                    mem[_58218 + 189] = 40
                                    mem[_58218 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58218 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58218 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58218 + 346] = stor4[cd[68]].field_512
                                    mem[_58218 + 261] = 85
                                    mem[_58218 + 378] = 0
                                    mem[64] = _58218 + 410
                                    mem[_58218 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58218 + 414] = 0
                                    mem[_58218 + 446] = _56257
                                    mem[_58218 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59919, stor4[cd[68]].field_512))
                                    mem[_58218 + 510] = 128
                                    mem[_58218 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58218 + 574] = mem[s + _58218 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56257, address(sha3(0, stor4[cd[68]].field_0, _59919, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58218 + 221] = address(_55878)
                                    mem[_58218 + 241] = address(_55813)
                                    mem[_58218 + 189] = 40
                                    mem[_58218 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58218 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58218 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58218 + 346] = stor4[cd[68]].field_512
                                    mem[_58218 + 261] = 85
                                    mem[_58218 + 378] = 0
                                    mem[64] = _58218 + 410
                                    mem[_58218 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58218 + 414] = 0
                                    mem[_58218 + 446] = _56257
                                    mem[_58218 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59919, stor4[cd[68]].field_512))
                                    mem[_58218 + 510] = 128
                                    mem[_58218 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58218 + 574] = mem[s + _58218 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56257, address(sha3(0, stor4[cd[68]].field_0, _59919, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58223 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59937 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59939 = sha3(mem[_59937 + 32 len mem[_59937]])
                                mem[_58223 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58223 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58223 + 125] = _59939
                                mem[_58223 + 157] = stor4[cd[68]].field_512
                                mem[_58223 + 72] = 85
                                mem[_58223 + 189] = 0
                                mem[64] = _58223 + 221
                                mem[_58223 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58223 + 225] = _56257
                                mem[_58223 + 257] = 0
                                mem[_58223 + 289] = msg.sender
                                mem[_58223 + 321] = 128
                                mem[_58223 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58223 + 385] = mem[s + _58223 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59939, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59939, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56257, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58224 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55813)
                                _59941 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59943 = sha3(mem[_59941 + 32 len mem[_59941]])
                                mem[_58224 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58224 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58224 + 125] = _59943
                                mem[_58224 + 157] = stor4[cd[68]].field_512
                                mem[_58224 + 72] = 85
                                mem[_58224 + 189] = 0
                                mem[64] = _58224 + 221
                                mem[_58224 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58224 + 225] = _56257
                                mem[_58224 + 257] = 0
                                mem[_58224 + 289] = msg.sender
                                mem[_58224 + 321] = 128
                                mem[_58224 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58224 + 385] = mem[s + _58224 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59943, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59943, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56257, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                            _56642 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58221 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56642)
                                _59929 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59931 = sha3(mem[_59929 + 32 len mem[_59929]])
                                mem[_58221 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58221 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58221 + 125] = _59931
                                mem[_58221 + 157] = stor4[cd[68]].field_512
                                mem[_58221 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58221 + 221] = address(_55813)
                                    mem[_58221 + 241] = address(_55878)
                                    mem[_58221 + 189] = 40
                                    mem[_58221 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58221 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58221 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58221 + 346] = stor4[cd[68]].field_512
                                    mem[_58221 + 261] = 85
                                    mem[_58221 + 378] = 0
                                    mem[64] = _58221 + 410
                                    mem[_58221 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58221 + 414] = _56257
                                    mem[_58221 + 446] = 0
                                    mem[_58221 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59931, stor4[cd[68]].field_512))
                                    mem[_58221 + 510] = 128
                                    mem[_58221 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58221 + 574] = mem[s + _58221 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56257, 0, address(sha3(0, stor4[cd[68]].field_0, _59931, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58221 + 221] = address(_55878)
                                    mem[_58221 + 241] = address(_55813)
                                    mem[_58221 + 189] = 40
                                    mem[_58221 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58221 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58221 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58221 + 346] = stor4[cd[68]].field_512
                                    mem[_58221 + 261] = 85
                                    mem[_58221 + 378] = 0
                                    mem[64] = _58221 + 410
                                    mem[_58221 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58221 + 414] = _56257
                                    mem[_58221 + 446] = 0
                                    mem[_58221 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59931, stor4[cd[68]].field_512))
                                    mem[_58221 + 510] = 128
                                    mem[_58221 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58221 + 574] = mem[s + _58221 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56257, 0, address(sha3(0, stor4[cd[68]].field_0, _59931, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58222 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59933 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59935 = sha3(mem[_59933 + 32 len mem[_59933]])
                                mem[_58222 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58222 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58222 + 125] = _59935
                                mem[_58222 + 157] = stor4[cd[68]].field_512
                                mem[_58222 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58222 + 221] = address(_55813)
                                    mem[_58222 + 241] = address(_55878)
                                    mem[_58222 + 189] = 40
                                    mem[_58222 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58222 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58222 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58222 + 346] = stor4[cd[68]].field_512
                                    mem[_58222 + 261] = 85
                                    mem[_58222 + 378] = 0
                                    mem[64] = _58222 + 410
                                    mem[_58222 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58222 + 414] = _56257
                                    mem[_58222 + 446] = 0
                                    mem[_58222 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59935, stor4[cd[68]].field_512))
                                    mem[_58222 + 510] = 128
                                    mem[_58222 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58222 + 574] = mem[s + _58222 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56257, 0, address(sha3(0, stor4[cd[68]].field_0, _59935, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58222 + 221] = address(_55878)
                                    mem[_58222 + 241] = address(_55813)
                                    mem[_58222 + 189] = 40
                                    mem[_58222 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58222 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58222 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58222 + 346] = stor4[cd[68]].field_512
                                    mem[_58222 + 261] = 85
                                    mem[_58222 + 378] = 0
                                    mem[64] = _58222 + 410
                                    mem[_58222 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58222 + 414] = _56257
                                    mem[_58222 + 446] = 0
                                    mem[_58222 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59935, stor4[cd[68]].field_512))
                                    mem[_58222 + 510] = 128
                                    mem[_58222 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58222 + 574] = mem[s + _58222 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56257, 0, address(sha3(0, stor4[cd[68]].field_0, _59935, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56259 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                        if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58227 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59953 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59955 = sha3(mem[_59953 + 32 len mem[_59953]])
                                mem[_58227 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58227 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58227 + 125] = _59955
                                mem[_58227 + 157] = stor4[cd[68]].field_512
                                mem[_58227 + 72] = 85
                                mem[_58227 + 189] = 0
                                mem[64] = _58227 + 221
                                mem[_58227 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58227 + 225] = 0
                                mem[_58227 + 257] = _56259
                                mem[_58227 + 289] = msg.sender
                                mem[_58227 + 321] = 128
                                mem[_58227 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58227 + 385] = mem[s + _58227 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59955, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59955, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56259, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58228 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55813)
                                _59957 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59959 = sha3(mem[_59957 + 32 len mem[_59957]])
                                mem[_58228 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58228 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58228 + 125] = _59959
                                mem[_58228 + 157] = stor4[cd[68]].field_512
                                mem[_58228 + 72] = 85
                                mem[_58228 + 189] = 0
                                mem[64] = _58228 + 221
                                mem[_58228 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58228 + 225] = 0
                                mem[_58228 + 257] = _56259
                                mem[_58228 + 289] = msg.sender
                                mem[_58228 + 321] = 128
                                mem[_58228 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58228 + 385] = mem[s + _58228 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59959, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59959, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56259, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                            _56643 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58225 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56643)
                                _59945 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59947 = sha3(mem[_59945 + 32 len mem[_59945]])
                                mem[_58225 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58225 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58225 + 125] = _59947
                                mem[_58225 + 157] = stor4[cd[68]].field_512
                                mem[_58225 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58225 + 221] = address(_55813)
                                    mem[_58225 + 241] = address(_55878)
                                    mem[_58225 + 189] = 40
                                    mem[_58225 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58225 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58225 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58225 + 346] = stor4[cd[68]].field_512
                                    mem[_58225 + 261] = 85
                                    mem[_58225 + 378] = 0
                                    mem[64] = _58225 + 410
                                    mem[_58225 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58225 + 414] = 0
                                    mem[_58225 + 446] = _56259
                                    mem[_58225 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59947, stor4[cd[68]].field_512))
                                    mem[_58225 + 510] = 128
                                    mem[_58225 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58225 + 574] = mem[s + _58225 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56259, address(sha3(0, stor4[cd[68]].field_0, _59947, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58225 + 221] = address(_55878)
                                    mem[_58225 + 241] = address(_55813)
                                    mem[_58225 + 189] = 40
                                    mem[_58225 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58225 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58225 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58225 + 346] = stor4[cd[68]].field_512
                                    mem[_58225 + 261] = 85
                                    mem[_58225 + 378] = 0
                                    mem[64] = _58225 + 410
                                    mem[_58225 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58225 + 414] = 0
                                    mem[_58225 + 446] = _56259
                                    mem[_58225 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59947, stor4[cd[68]].field_512))
                                    mem[_58225 + 510] = 128
                                    mem[_58225 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58225 + 574] = mem[s + _58225 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56259, address(sha3(0, stor4[cd[68]].field_0, _59947, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58226 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59949 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59951 = sha3(mem[_59949 + 32 len mem[_59949]])
                                mem[_58226 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58226 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58226 + 125] = _59951
                                mem[_58226 + 157] = stor4[cd[68]].field_512
                                mem[_58226 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58226 + 221] = address(_55813)
                                    mem[_58226 + 241] = address(_55878)
                                    mem[_58226 + 189] = 40
                                    mem[_58226 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58226 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58226 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58226 + 346] = stor4[cd[68]].field_512
                                    mem[_58226 + 261] = 85
                                    mem[_58226 + 378] = 0
                                    mem[64] = _58226 + 410
                                    mem[_58226 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58226 + 414] = 0
                                    mem[_58226 + 446] = _56259
                                    mem[_58226 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59951, stor4[cd[68]].field_512))
                                    mem[_58226 + 510] = 128
                                    mem[_58226 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58226 + 574] = mem[s + _58226 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56259, address(sha3(0, stor4[cd[68]].field_0, _59951, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58226 + 221] = address(_55878)
                                    mem[_58226 + 241] = address(_55813)
                                    mem[_58226 + 189] = 40
                                    mem[_58226 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58226 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58226 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58226 + 346] = stor4[cd[68]].field_512
                                    mem[_58226 + 261] = 85
                                    mem[_58226 + 378] = 0
                                    mem[64] = _58226 + 410
                                    mem[_58226 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58226 + 414] = 0
                                    mem[_58226 + 446] = _56259
                                    mem[_58226 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59951, stor4[cd[68]].field_512))
                                    mem[_58226 + 510] = 128
                                    mem[_58226 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58226 + 574] = mem[s + _58226 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56259, address(sha3(0, stor4[cd[68]].field_0, _59951, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58231 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59969 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59971 = sha3(mem[_59969 + 32 len mem[_59969]])
                                mem[_58231 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58231 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58231 + 125] = _59971
                                mem[_58231 + 157] = stor4[cd[68]].field_512
                                mem[_58231 + 72] = 85
                                mem[_58231 + 189] = 0
                                mem[64] = _58231 + 221
                                mem[_58231 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58231 + 225] = _56259
                                mem[_58231 + 257] = 0
                                mem[_58231 + 289] = msg.sender
                                mem[_58231 + 321] = 128
                                mem[_58231 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58231 + 385] = mem[s + _58231 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59971, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59971, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56259, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58232 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55813)
                                _59973 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59975 = sha3(mem[_59973 + 32 len mem[_59973]])
                                mem[_58232 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58232 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58232 + 125] = _59975
                                mem[_58232 + 157] = stor4[cd[68]].field_512
                                mem[_58232 + 72] = 85
                                mem[_58232 + 189] = 0
                                mem[64] = _58232 + 221
                                mem[_58232 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58232 + 225] = _56259
                                mem[_58232 + 257] = 0
                                mem[_58232 + 289] = msg.sender
                                mem[_58232 + 321] = 128
                                mem[_58232 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58232 + 385] = mem[s + _58232 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59975, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _59975, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56259, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                            _56644 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58229 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56644)
                                _59961 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59963 = sha3(mem[_59961 + 32 len mem[_59961]])
                                mem[_58229 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58229 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58229 + 125] = _59963
                                mem[_58229 + 157] = stor4[cd[68]].field_512
                                mem[_58229 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58229 + 221] = address(_55813)
                                    mem[_58229 + 241] = address(_55878)
                                    mem[_58229 + 189] = 40
                                    mem[_58229 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58229 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58229 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58229 + 346] = stor4[cd[68]].field_512
                                    mem[_58229 + 261] = 85
                                    mem[_58229 + 378] = 0
                                    mem[64] = _58229 + 410
                                    mem[_58229 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58229 + 414] = _56259
                                    mem[_58229 + 446] = 0
                                    mem[_58229 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59963, stor4[cd[68]].field_512))
                                    mem[_58229 + 510] = 128
                                    mem[_58229 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58229 + 574] = mem[s + _58229 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56259, 0, address(sha3(0, stor4[cd[68]].field_0, _59963, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58229 + 221] = address(_55878)
                                    mem[_58229 + 241] = address(_55813)
                                    mem[_58229 + 189] = 40
                                    mem[_58229 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58229 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58229 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58229 + 346] = stor4[cd[68]].field_512
                                    mem[_58229 + 261] = 85
                                    mem[_58229 + 378] = 0
                                    mem[64] = _58229 + 410
                                    mem[_58229 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58229 + 414] = _56259
                                    mem[_58229 + 446] = 0
                                    mem[_58229 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59963, stor4[cd[68]].field_512))
                                    mem[_58229 + 510] = 128
                                    mem[_58229 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58229 + 574] = mem[s + _58229 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56259, 0, address(sha3(0, stor4[cd[68]].field_0, _59963, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58230 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55878)
                                _59965 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _59967 = sha3(mem[_59965 + 32 len mem[_59965]])
                                mem[_58230 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58230 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58230 + 125] = _59967
                                mem[_58230 + 157] = stor4[cd[68]].field_512
                                mem[_58230 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55813) == address(_55878):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55813) < address(_55878):
                                    if not address(_55813):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58230 + 221] = address(_55813)
                                    mem[_58230 + 241] = address(_55878)
                                    mem[_58230 + 189] = 40
                                    mem[_58230 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58230 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58230 + 314] = sha3(address(_55813), address(_55878))
                                    mem[_58230 + 346] = stor4[cd[68]].field_512
                                    mem[_58230 + 261] = 85
                                    mem[_58230 + 378] = 0
                                    mem[64] = _58230 + 410
                                    mem[_58230 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58230 + 414] = _56259
                                    mem[_58230 + 446] = 0
                                    mem[_58230 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59967, stor4[cd[68]].field_512))
                                    mem[_58230 + 510] = 128
                                    mem[_58230 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58230 + 574] = mem[s + _58230 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55813), address(_55878)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56259, 0, address(sha3(0, stor4[cd[68]].field_0, _59967, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55878):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58230 + 221] = address(_55878)
                                    mem[_58230 + 241] = address(_55813)
                                    mem[_58230 + 189] = 40
                                    mem[_58230 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58230 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58230 + 314] = sha3(address(_55878), address(_55813))
                                    mem[_58230 + 346] = stor4[cd[68]].field_512
                                    mem[_58230 + 261] = 85
                                    mem[_58230 + 378] = 0
                                    mem[64] = _58230 + 410
                                    mem[_58230 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58230 + 414] = _56259
                                    mem[_58230 + 446] = 0
                                    mem[_58230 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59967, stor4[cd[68]].field_512))
                                    mem[_58230 + 510] = 128
                                    mem[_58230 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58230 + 574] = mem[s + _58230 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55878), address(_55813)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56259, 0, address(sha3(0, stor4[cd[68]].field_0, _59967, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
            mem[mem[64]] = 32
            _55941 = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 64 len 32 * _55941] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55941]
            return 32, mem[mem[64] + 32 len (32 * _55941) + 32]
        require return_data.size >= 32
        require mem[_19346 + 321] == bool(mem[_19346 + 321])
        if not mem[_19346 + 321]:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        mem[64] = _19346 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
        mem[_19346 + ceil32(return_data.size) + 290] = ('cd', 36).length
        mem[_19346 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
        mem[_19346 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
        idx = 0
        while idx < ('cd', 36).length - 1:
            require idx < mem[_19346 + ceil32(return_data.size) + 290]
            _55815 = mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322]
            require idx + 1 < mem[_19346 + ceil32(return_data.size) + 290]
            _55880 = mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322]
            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56261 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                    if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58235 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _59985 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _59987 = sha3(mem[_59985 + 32 len mem[_59985]])
                            mem[_58235 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58235 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58235 + 125] = _59987
                            mem[_58235 + 157] = stor4[cd[68]].field_512
                            mem[_58235 + 72] = 85
                            mem[_58235 + 189] = 0
                            mem[64] = _58235 + 221
                            mem[_58235 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58235 + 225] = 0
                            mem[_58235 + 257] = _56261
                            mem[_58235 + 289] = msg.sender
                            mem[_58235 + 321] = 128
                            mem[_58235 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58235 + 385] = mem[s + _58235 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59987, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _59987, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56261, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58236 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55815)
                            _59989 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _59991 = sha3(mem[_59989 + 32 len mem[_59989]])
                            mem[_58236 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58236 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58236 + 125] = _59991
                            mem[_58236 + 157] = stor4[cd[68]].field_512
                            mem[_58236 + 72] = 85
                            mem[_58236 + 189] = 0
                            mem[64] = _58236 + 221
                            mem[_58236 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58236 + 225] = 0
                            mem[_58236 + 257] = _56261
                            mem[_58236 + 289] = msg.sender
                            mem[_58236 + 321] = 128
                            mem[_58236 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58236 + 385] = mem[s + _58236 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _59991, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _59991, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56261, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                        _56645 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58233 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56645)
                            _59977 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _59979 = sha3(mem[_59977 + 32 len mem[_59977]])
                            mem[_58233 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58233 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58233 + 125] = _59979
                            mem[_58233 + 157] = stor4[cd[68]].field_512
                            mem[_58233 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58233 + 221] = address(_55815)
                                mem[_58233 + 241] = address(_55880)
                                mem[_58233 + 189] = 40
                                mem[_58233 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58233 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58233 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58233 + 346] = stor4[cd[68]].field_512
                                mem[_58233 + 261] = 85
                                mem[_58233 + 378] = 0
                                mem[64] = _58233 + 410
                                mem[_58233 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58233 + 414] = 0
                                mem[_58233 + 446] = _56261
                                mem[_58233 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59979, stor4[cd[68]].field_512))
                                mem[_58233 + 510] = 128
                                mem[_58233 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58233 + 574] = mem[s + _58233 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56261, address(sha3(0, stor4[cd[68]].field_0, _59979, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58233 + 221] = address(_55880)
                                mem[_58233 + 241] = address(_55815)
                                mem[_58233 + 189] = 40
                                mem[_58233 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58233 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58233 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58233 + 346] = stor4[cd[68]].field_512
                                mem[_58233 + 261] = 85
                                mem[_58233 + 378] = 0
                                mem[64] = _58233 + 410
                                mem[_58233 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58233 + 414] = 0
                                mem[_58233 + 446] = _56261
                                mem[_58233 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59979, stor4[cd[68]].field_512))
                                mem[_58233 + 510] = 128
                                mem[_58233 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58233 + 574] = mem[s + _58233 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56261, address(sha3(0, stor4[cd[68]].field_0, _59979, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58234 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _59981 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _59983 = sha3(mem[_59981 + 32 len mem[_59981]])
                            mem[_58234 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58234 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58234 + 125] = _59983
                            mem[_58234 + 157] = stor4[cd[68]].field_512
                            mem[_58234 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58234 + 221] = address(_55815)
                                mem[_58234 + 241] = address(_55880)
                                mem[_58234 + 189] = 40
                                mem[_58234 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58234 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58234 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58234 + 346] = stor4[cd[68]].field_512
                                mem[_58234 + 261] = 85
                                mem[_58234 + 378] = 0
                                mem[64] = _58234 + 410
                                mem[_58234 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58234 + 414] = 0
                                mem[_58234 + 446] = _56261
                                mem[_58234 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59983, stor4[cd[68]].field_512))
                                mem[_58234 + 510] = 128
                                mem[_58234 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58234 + 574] = mem[s + _58234 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56261, address(sha3(0, stor4[cd[68]].field_0, _59983, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58234 + 221] = address(_55880)
                                mem[_58234 + 241] = address(_55815)
                                mem[_58234 + 189] = 40
                                mem[_58234 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58234 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58234 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58234 + 346] = stor4[cd[68]].field_512
                                mem[_58234 + 261] = 85
                                mem[_58234 + 378] = 0
                                mem[64] = _58234 + 410
                                mem[_58234 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58234 + 414] = 0
                                mem[_58234 + 446] = _56261
                                mem[_58234 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59983, stor4[cd[68]].field_512))
                                mem[_58234 + 510] = 128
                                mem[_58234 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58234 + 574] = mem[s + _58234 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56261, address(sha3(0, stor4[cd[68]].field_0, _59983, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58239 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _60001 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60003 = sha3(mem[_60001 + 32 len mem[_60001]])
                            mem[_58239 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58239 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58239 + 125] = _60003
                            mem[_58239 + 157] = stor4[cd[68]].field_512
                            mem[_58239 + 72] = 85
                            mem[_58239 + 189] = 0
                            mem[64] = _58239 + 221
                            mem[_58239 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58239 + 225] = _56261
                            mem[_58239 + 257] = 0
                            mem[_58239 + 289] = msg.sender
                            mem[_58239 + 321] = 128
                            mem[_58239 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58239 + 385] = mem[s + _58239 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60003, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60003, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56261, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58240 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55815)
                            _60005 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60007 = sha3(mem[_60005 + 32 len mem[_60005]])
                            mem[_58240 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58240 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58240 + 125] = _60007
                            mem[_58240 + 157] = stor4[cd[68]].field_512
                            mem[_58240 + 72] = 85
                            mem[_58240 + 189] = 0
                            mem[64] = _58240 + 221
                            mem[_58240 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58240 + 225] = _56261
                            mem[_58240 + 257] = 0
                            mem[_58240 + 289] = msg.sender
                            mem[_58240 + 321] = 128
                            mem[_58240 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58240 + 385] = mem[s + _58240 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60007, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60007, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56261, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                        _56646 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58237 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56646)
                            _59993 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _59995 = sha3(mem[_59993 + 32 len mem[_59993]])
                            mem[_58237 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58237 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58237 + 125] = _59995
                            mem[_58237 + 157] = stor4[cd[68]].field_512
                            mem[_58237 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58237 + 221] = address(_55815)
                                mem[_58237 + 241] = address(_55880)
                                mem[_58237 + 189] = 40
                                mem[_58237 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58237 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58237 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58237 + 346] = stor4[cd[68]].field_512
                                mem[_58237 + 261] = 85
                                mem[_58237 + 378] = 0
                                mem[64] = _58237 + 410
                                mem[_58237 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58237 + 414] = _56261
                                mem[_58237 + 446] = 0
                                mem[_58237 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59995, stor4[cd[68]].field_512))
                                mem[_58237 + 510] = 128
                                mem[_58237 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58237 + 574] = mem[s + _58237 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56261, 0, address(sha3(0, stor4[cd[68]].field_0, _59995, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58237 + 221] = address(_55880)
                                mem[_58237 + 241] = address(_55815)
                                mem[_58237 + 189] = 40
                                mem[_58237 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58237 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58237 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58237 + 346] = stor4[cd[68]].field_512
                                mem[_58237 + 261] = 85
                                mem[_58237 + 378] = 0
                                mem[64] = _58237 + 410
                                mem[_58237 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58237 + 414] = _56261
                                mem[_58237 + 446] = 0
                                mem[_58237 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59995, stor4[cd[68]].field_512))
                                mem[_58237 + 510] = 128
                                mem[_58237 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58237 + 574] = mem[s + _58237 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56261, 0, address(sha3(0, stor4[cd[68]].field_0, _59995, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58238 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _59997 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _59999 = sha3(mem[_59997 + 32 len mem[_59997]])
                            mem[_58238 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58238 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58238 + 125] = _59999
                            mem[_58238 + 157] = stor4[cd[68]].field_512
                            mem[_58238 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58238 + 221] = address(_55815)
                                mem[_58238 + 241] = address(_55880)
                                mem[_58238 + 189] = 40
                                mem[_58238 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58238 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58238 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58238 + 346] = stor4[cd[68]].field_512
                                mem[_58238 + 261] = 85
                                mem[_58238 + 378] = 0
                                mem[64] = _58238 + 410
                                mem[_58238 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58238 + 414] = _56261
                                mem[_58238 + 446] = 0
                                mem[_58238 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59999, stor4[cd[68]].field_512))
                                mem[_58238 + 510] = 128
                                mem[_58238 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58238 + 574] = mem[s + _58238 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56261, 0, address(sha3(0, stor4[cd[68]].field_0, _59999, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58238 + 221] = address(_55880)
                                mem[_58238 + 241] = address(_55815)
                                mem[_58238 + 189] = 40
                                mem[_58238 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58238 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58238 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58238 + 346] = stor4[cd[68]].field_512
                                mem[_58238 + 261] = 85
                                mem[_58238 + 378] = 0
                                mem[64] = _58238 + 410
                                mem[_58238 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58238 + 414] = _56261
                                mem[_58238 + 446] = 0
                                mem[_58238 + 478] = address(sha3(0, stor4[cd[68]].field_0, _59999, stor4[cd[68]].field_512))
                                mem[_58238 + 510] = 128
                                mem[_58238 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58238 + 574] = mem[s + _58238 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56261, 0, address(sha3(0, stor4[cd[68]].field_0, _59999, stor4[cd[68]].field_512)), 128, 0
            else:
                if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56263 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                    if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58243 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _60017 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60019 = sha3(mem[_60017 + 32 len mem[_60017]])
                            mem[_58243 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58243 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58243 + 125] = _60019
                            mem[_58243 + 157] = stor4[cd[68]].field_512
                            mem[_58243 + 72] = 85
                            mem[_58243 + 189] = 0
                            mem[64] = _58243 + 221
                            mem[_58243 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58243 + 225] = 0
                            mem[_58243 + 257] = _56263
                            mem[_58243 + 289] = msg.sender
                            mem[_58243 + 321] = 128
                            mem[_58243 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58243 + 385] = mem[s + _58243 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60019, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60019, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56263, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58244 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55815)
                            _60021 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60023 = sha3(mem[_60021 + 32 len mem[_60021]])
                            mem[_58244 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58244 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58244 + 125] = _60023
                            mem[_58244 + 157] = stor4[cd[68]].field_512
                            mem[_58244 + 72] = 85
                            mem[_58244 + 189] = 0
                            mem[64] = _58244 + 221
                            mem[_58244 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58244 + 225] = 0
                            mem[_58244 + 257] = _56263
                            mem[_58244 + 289] = msg.sender
                            mem[_58244 + 321] = 128
                            mem[_58244 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58244 + 385] = mem[s + _58244 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60023, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60023, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56263, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                        _56647 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58241 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56647)
                            _60009 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60011 = sha3(mem[_60009 + 32 len mem[_60009]])
                            mem[_58241 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58241 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58241 + 125] = _60011
                            mem[_58241 + 157] = stor4[cd[68]].field_512
                            mem[_58241 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58241 + 221] = address(_55815)
                                mem[_58241 + 241] = address(_55880)
                                mem[_58241 + 189] = 40
                                mem[_58241 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58241 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58241 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58241 + 346] = stor4[cd[68]].field_512
                                mem[_58241 + 261] = 85
                                mem[_58241 + 378] = 0
                                mem[64] = _58241 + 410
                                mem[_58241 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58241 + 414] = 0
                                mem[_58241 + 446] = _56263
                                mem[_58241 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60011, stor4[cd[68]].field_512))
                                mem[_58241 + 510] = 128
                                mem[_58241 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58241 + 574] = mem[s + _58241 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56263, address(sha3(0, stor4[cd[68]].field_0, _60011, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58241 + 221] = address(_55880)
                                mem[_58241 + 241] = address(_55815)
                                mem[_58241 + 189] = 40
                                mem[_58241 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58241 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58241 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58241 + 346] = stor4[cd[68]].field_512
                                mem[_58241 + 261] = 85
                                mem[_58241 + 378] = 0
                                mem[64] = _58241 + 410
                                mem[_58241 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58241 + 414] = 0
                                mem[_58241 + 446] = _56263
                                mem[_58241 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60011, stor4[cd[68]].field_512))
                                mem[_58241 + 510] = 128
                                mem[_58241 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58241 + 574] = mem[s + _58241 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56263, address(sha3(0, stor4[cd[68]].field_0, _60011, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58242 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _60013 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60015 = sha3(mem[_60013 + 32 len mem[_60013]])
                            mem[_58242 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58242 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58242 + 125] = _60015
                            mem[_58242 + 157] = stor4[cd[68]].field_512
                            mem[_58242 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58242 + 221] = address(_55815)
                                mem[_58242 + 241] = address(_55880)
                                mem[_58242 + 189] = 40
                                mem[_58242 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58242 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58242 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58242 + 346] = stor4[cd[68]].field_512
                                mem[_58242 + 261] = 85
                                mem[_58242 + 378] = 0
                                mem[64] = _58242 + 410
                                mem[_58242 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58242 + 414] = 0
                                mem[_58242 + 446] = _56263
                                mem[_58242 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60015, stor4[cd[68]].field_512))
                                mem[_58242 + 510] = 128
                                mem[_58242 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58242 + 574] = mem[s + _58242 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56263, address(sha3(0, stor4[cd[68]].field_0, _60015, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58242 + 221] = address(_55880)
                                mem[_58242 + 241] = address(_55815)
                                mem[_58242 + 189] = 40
                                mem[_58242 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58242 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58242 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58242 + 346] = stor4[cd[68]].field_512
                                mem[_58242 + 261] = 85
                                mem[_58242 + 378] = 0
                                mem[64] = _58242 + 410
                                mem[_58242 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58242 + 414] = 0
                                mem[_58242 + 446] = _56263
                                mem[_58242 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60015, stor4[cd[68]].field_512))
                                mem[_58242 + 510] = 128
                                mem[_58242 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58242 + 574] = mem[s + _58242 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56263, address(sha3(0, stor4[cd[68]].field_0, _60015, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19346 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58247 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _60033 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60035 = sha3(mem[_60033 + 32 len mem[_60033]])
                            mem[_58247 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58247 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58247 + 125] = _60035
                            mem[_58247 + 157] = stor4[cd[68]].field_512
                            mem[_58247 + 72] = 85
                            mem[_58247 + 189] = 0
                            mem[64] = _58247 + 221
                            mem[_58247 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58247 + 225] = _56263
                            mem[_58247 + 257] = 0
                            mem[_58247 + 289] = msg.sender
                            mem[_58247 + 321] = 128
                            mem[_58247 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58247 + 385] = mem[s + _58247 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60035, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60035, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56263, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58248 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55815)
                            _60037 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60039 = sha3(mem[_60037 + 32 len mem[_60037]])
                            mem[_58248 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58248 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58248 + 125] = _60039
                            mem[_58248 + 157] = stor4[cd[68]].field_512
                            mem[_58248 + 72] = 85
                            mem[_58248 + 189] = 0
                            mem[64] = _58248 + 221
                            mem[_58248 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58248 + 225] = _56263
                            mem[_58248 + 257] = 0
                            mem[_58248 + 289] = msg.sender
                            mem[_58248 + 321] = 128
                            mem[_58248 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58248 + 385] = mem[s + _58248 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60039, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60039, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56263, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19346 + ceil32(return_data.size) + 290]
                        _56648 = mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58245 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56648)
                            _60025 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60027 = sha3(mem[_60025 + 32 len mem[_60025]])
                            mem[_58245 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58245 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58245 + 125] = _60027
                            mem[_58245 + 157] = stor4[cd[68]].field_512
                            mem[_58245 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58245 + 221] = address(_55815)
                                mem[_58245 + 241] = address(_55880)
                                mem[_58245 + 189] = 40
                                mem[_58245 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58245 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58245 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58245 + 346] = stor4[cd[68]].field_512
                                mem[_58245 + 261] = 85
                                mem[_58245 + 378] = 0
                                mem[64] = _58245 + 410
                                mem[_58245 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58245 + 414] = _56263
                                mem[_58245 + 446] = 0
                                mem[_58245 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60027, stor4[cd[68]].field_512))
                                mem[_58245 + 510] = 128
                                mem[_58245 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58245 + 574] = mem[s + _58245 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56263, 0, address(sha3(0, stor4[cd[68]].field_0, _60027, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58245 + 221] = address(_55880)
                                mem[_58245 + 241] = address(_55815)
                                mem[_58245 + 189] = 40
                                mem[_58245 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58245 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58245 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58245 + 346] = stor4[cd[68]].field_512
                                mem[_58245 + 261] = 85
                                mem[_58245 + 378] = 0
                                mem[64] = _58245 + 410
                                mem[_58245 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58245 + 414] = _56263
                                mem[_58245 + 446] = 0
                                mem[_58245 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60027, stor4[cd[68]].field_512))
                                mem[_58245 + 510] = 128
                                mem[_58245 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58245 + 574] = mem[s + _58245 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56263, 0, address(sha3(0, stor4[cd[68]].field_0, _60027, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58246 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19346 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55880)
                            _60029 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60031 = sha3(mem[_60029 + 32 len mem[_60029]])
                            mem[_58246 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58246 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58246 + 125] = _60031
                            mem[_58246 + 157] = stor4[cd[68]].field_512
                            mem[_58246 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55815) == address(_55880):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55815) < address(_55880):
                                if not address(_55815):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58246 + 221] = address(_55815)
                                mem[_58246 + 241] = address(_55880)
                                mem[_58246 + 189] = 40
                                mem[_58246 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58246 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58246 + 314] = sha3(address(_55815), address(_55880))
                                mem[_58246 + 346] = stor4[cd[68]].field_512
                                mem[_58246 + 261] = 85
                                mem[_58246 + 378] = 0
                                mem[64] = _58246 + 410
                                mem[_58246 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58246 + 414] = _56263
                                mem[_58246 + 446] = 0
                                mem[_58246 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60031, stor4[cd[68]].field_512))
                                mem[_58246 + 510] = 128
                                mem[_58246 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58246 + 574] = mem[s + _58246 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55815), address(_55880)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56263, 0, address(sha3(0, stor4[cd[68]].field_0, _60031, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55880):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58246 + 221] = address(_55880)
                                mem[_58246 + 241] = address(_55815)
                                mem[_58246 + 189] = 40
                                mem[_58246 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58246 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58246 + 314] = sha3(address(_55880), address(_55815))
                                mem[_58246 + 346] = stor4[cd[68]].field_512
                                mem[_58246 + 261] = 85
                                mem[_58246 + 378] = 0
                                mem[64] = _58246 + 410
                                mem[_58246 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58246 + 414] = _56263
                                mem[_58246 + 446] = 0
                                mem[_58246 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60031, stor4[cd[68]].field_512))
                                mem[_58246 + 510] = 128
                                mem[_58246 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58246 + 574] = mem[s + _58246 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55880), address(_55815)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56263, 0, address(sha3(0, stor4[cd[68]].field_0, _60031, stor4[cd[68]].field_512)), 128, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            idx = idx + 1
            continue 
        mem[mem[64]] = 32
        _55943 = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 64 len 32 * _55943] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55943]
        return 32, mem[mem[64] + 32 len (32 * _55943) + 32]
    mem[(32 * ('cd', 36).length) + 160 len 32 * ('cd', 36).length] = call.data[calldata.size len 32 * ('cd', 36).length]
    require 0 < ('cd', 36).length
    mem[(32 * ('cd', 36).length) + 160] = cd[4]
    idx = 0
    while idx < ('cd', 36).length - 1:
        require idx < mem[96]
        _19103 = mem[(32 * idx) + 128]
        require idx + 1 < mem[96]
        _19106 = mem[(32 * idx + 1) + 128]
        if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
            if not mem[(32 * idx) + 140 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                if not mem[(32 * idx) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _19139 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                mem[mem[64] + 52] = address(_19106)
                _19167 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _19169 = sha3(mem[_19167 + 32 len mem[_19167]])
                mem[_19139 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_19139 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[_19139 + 125] = _19169
                mem[_19139 + 157] = stor4[cd[68]].field_512
                mem[_19139 + 72] = 85
                if address(_19103) == address(_19106):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_19103) < address(_19106):
                    if not address(_19103):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19139 + 221] = address(_19103)
                    mem[_19139 + 241] = address(_19106)
                    mem[_19139 + 189] = 40
                    mem[_19139 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19139 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19139 + 314] = sha3(address(_19103), address(_19106))
                    mem[_19139 + 346] = stor4[cd[68]].field_512
                    mem[_19139 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_19106):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19139 + 221] = address(_19106)
                    mem[_19139 + 241] = address(_19103)
                    mem[_19139 + 189] = 40
                    mem[_19139 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19139 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19139 + 314] = sha3(address(_19106), address(_19103))
                    mem[_19139 + 346] = stor4[cd[68]].field_512
                    mem[_19139 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_19139 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _19139 + ceil32(return_data.size) + 378
            else:
                if not mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _19140 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                mem[mem[64] + 52] = address(_19103)
                _19171 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _19173 = sha3(mem[_19171 + 32 len mem[_19171]])
                mem[_19140 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_19140 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[_19140 + 125] = _19173
                mem[_19140 + 157] = stor4[cd[68]].field_512
                mem[_19140 + 72] = 85
                if address(_19103) == address(_19106):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_19103) < address(_19106):
                    if not address(_19103):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19140 + 221] = address(_19103)
                    mem[_19140 + 241] = address(_19106)
                    mem[_19140 + 189] = 40
                    mem[_19140 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19140 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19140 + 314] = sha3(address(_19103), address(_19106))
                    mem[_19140 + 346] = stor4[cd[68]].field_512
                    mem[_19140 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_19106):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19140 + 221] = address(_19106)
                    mem[_19140 + 241] = address(_19103)
                    mem[_19140 + 189] = 40
                    mem[_19140 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19140 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19140 + 314] = sha3(address(_19106), address(_19103))
                    mem[_19140 + 346] = stor4[cd[68]].field_512
                    mem[_19140 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_19140 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _19140 + ceil32(return_data.size) + 378
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require idx < mem[(32 * ('cd', 36).length) + 128]
            if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] <= 0:
                revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
            if address(_19103) == address(_19103):
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[cd[68]].field_256:
                    if ext_call.return_data[50 len 14]:
                        require ext_call.return_data[50 len 14]
                        if 0 / ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[18 len 14]
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                else:
                    require stor4[cd[68]].field_256
                    if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[50 len 14]:
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                    else:
                        require ext_call.return_data[50 len 14]
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
            else:
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[cd[68]].field_256:
                    if ext_call.return_data[18 len 14]:
                        require ext_call.return_data[18 len 14]
                        if 0 / ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[50 len 14]
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                else:
                    require stor4[cd[68]].field_256
                    if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[18 len 14]:
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                    else:
                        require ext_call.return_data[18 len 14]
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
        else:
            if not mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            if mem[(32 * idx) + 140 len 20] == mem[(32 * idx + 1) + 140 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + 140 len 20] < mem[(32 * idx + 1) + 140 len 20]:
                if not mem[(32 * idx) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _19141 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx) + 128])
                mem[mem[64] + 52] = address(_19106)
                _19175 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _19177 = sha3(mem[_19175 + 32 len mem[_19175]])
                mem[_19141 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_19141 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[_19141 + 125] = _19177
                mem[_19141 + 157] = stor4[cd[68]].field_512
                mem[_19141 + 72] = 85
                if address(_19103) == address(_19106):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_19103) < address(_19106):
                    if not address(_19103):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19141 + 221] = address(_19103)
                    mem[_19141 + 241] = address(_19106)
                    mem[_19141 + 189] = 40
                    mem[_19141 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19141 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19141 + 314] = sha3(address(_19103), address(_19106))
                    mem[_19141 + 346] = stor4[cd[68]].field_512
                    mem[_19141 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_19106):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19141 + 221] = address(_19106)
                    mem[_19141 + 241] = address(_19103)
                    mem[_19141 + 189] = 40
                    mem[_19141 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19141 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19141 + 314] = sha3(address(_19106), address(_19103))
                    mem[_19141 + 346] = stor4[cd[68]].field_512
                    mem[_19141 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_19141 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _19141 + ceil32(return_data.size) + 378
            else:
                if not mem[(32 * idx + 1) + 140 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                _19142 = mem[64]
                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + 128])
                mem[mem[64] + 52] = address(_19103)
                _19179 = mem[64]
                mem[mem[64]] = 40
                mem[64] = mem[64] + 72
                _19181 = sha3(mem[_19179 + 32 len mem[_19179]])
                mem[_19142 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                mem[_19142 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                mem[_19142 + 125] = _19181
                mem[_19142 + 157] = stor4[cd[68]].field_512
                mem[_19142 + 72] = 85
                if address(_19103) == address(_19106):
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if address(_19103) < address(_19106):
                    if not address(_19103):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19142 + 221] = address(_19103)
                    mem[_19142 + 241] = address(_19106)
                    mem[_19142 + 189] = 40
                    mem[_19142 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19142 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19142 + 314] = sha3(address(_19103), address(_19106))
                    mem[_19142 + 346] = stor4[cd[68]].field_512
                    mem[_19142 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19103), address(_19106)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(_19106):
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    mem[_19142 + 221] = address(_19106)
                    mem[_19142 + 241] = address(_19103)
                    mem[_19142 + 189] = 40
                    mem[_19142 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                    mem[_19142 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                    mem[_19142 + 314] = sha3(address(_19106), address(_19103))
                    mem[_19142 + 346] = stor4[cd[68]].field_512
                    mem[_19142 + 261] = 85
                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)))
                    staticcall address(sha3(0, stor4[cd[68]].field_0, sha3(address(_19106), address(_19103)), stor4[cd[68]].field_512)).getReserves() with:
                            gas gas_remaining wei
                mem[_19142 + 378 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _19142 + ceil32(return_data.size) + 378
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require idx < mem[(32 * ('cd', 36).length) + 128]
            if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] <= 0:
                revert with 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT'
            if address(_19103) == address(_19106):
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[cd[68]].field_256:
                    if ext_call.return_data[50 len 14]:
                        require ext_call.return_data[50 len 14]
                        if 0 / ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[18 len 14] < 10000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[18 len 14]
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[18 len 14]
                else:
                    require stor4[cd[68]].field_256
                    if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[50 len 14]:
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                    else:
                        require ext_call.return_data[50 len 14]
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / ext_call.return_data[50 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[18 len 14] / 10000 != ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[50 len 14] / (10000 * ext_call.return_data[18 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
            else:
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY'
                if not stor4[cd[68]].field_256:
                    if ext_call.return_data[18 len 14]:
                        require ext_call.return_data[18 len 14]
                        if 0 / ext_call.return_data[18 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-mul-overflow'
                    if 10000 * ext_call.return_data[50 len 14] < 10000 * ext_call.return_data[50 len 14]:
                        revert with 0, 'ds-math-add-overflow'
                    require 10000 * ext_call.return_data[50 len 14]
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / 10000 * ext_call.return_data[50 len 14]
                else:
                    require stor4[cd[68]].field_256
                    if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 / stor4[cd[68]].field_256 != mem[(32 * idx) + (32 * ('cd', 36).length) + 160]:
                        revert with 0, 'ds-math-mul-overflow'
                    if not ext_call.return_data[18 len 14]:
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = 0 / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                    else:
                        require ext_call.return_data[18 len 14]
                        if mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256:
                            revert with 0, 'ds-math-mul-overflow'
                        if 10000 * ext_call.return_data[50 len 14] / 10000 != ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-mul-overflow'
                        if (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256) < 10000 * ext_call.return_data[50 len 14]:
                            revert with 0, 'ds-math-add-overflow'
                        require (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160] = mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256 * ext_call.return_data[18 len 14] / (10000 * ext_call.return_data[50 len 14]) + (mem[(32 * idx) + (32 * ('cd', 36).length) + 160] * stor4[cd[68]].field_256)
        idx = idx + 1
        continue 
    require 0 < ('cd', 36).length
    require ('cd', 36)[0] == address(('cd', 36)[0])
    require 0 < ('cd', 36).length
    require ('cd', 36)[0] == address(('cd', 36)[0])
    require 1 < ('cd', 36).length
    require ('cd', 36)[1] == address(('cd', 36)[1])
    mem[0] = cd[68]
    mem[32] = 4
    if address(('cd', 36)[0]) == address(('cd', 36)[1]):
        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
    if address(('cd', 36)[0]) < address(('cd', 36)[1]):
        if not address(('cd', 36)[0]):
            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
        _19347 = mem[64]
        mem[mem[64] + 32] = address(('cd', 36)[0])
        mem[mem[64] + 52] = address(('cd', 36)[1])
        _19425 = mem[64]
        mem[mem[64]] = 40
        mem[64] = mem[64] + 72
        _19427 = sha3(mem[_19425 + 32 len mem[_19425]])
        mem[_19347 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
        mem[_19347 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
        mem[_19347 + 125] = _19427
        mem[_19347 + 157] = stor4[cd[68]].field_512
        mem[_19347 + 72] = 85
        require 0 < mem[(32 * ('cd', 36).length) + 128]
        _19499 = mem[(32 * ('cd', 36).length) + 160]
        mem[_19347 + 225] = address(sha3(0, stor4[cd[68]].field_0, _19427, stor4[cd[68]].field_512))
        mem[_19347 + 257] = _19499
        mem[_19347 + 189] = 68
        mem[_19347 + 221 len 4] = unknown_0xa9059cbb(?????)
        mem[_19347 + 289 len 96] = 0, address(sha3(0, stor4[cd[68]].field_0, _19427, stor4[cd[68]].field_512)), _19499, mem[_19347 + 289 len 28]
        mem[_19347 + 357] = 0
        call address(('cd', 36)[0]) with:
             gas gas_remaining wei
            args mem[_19347 + 293 len 64]
        if not return_data.size:
            if not ext_call.success:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            if not mem[96]:
                mem[64] = _19347 + (32 * ('cd', 36).length) + 321
                mem[_19347 + 289] = ('cd', 36).length
                mem[_19347 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
                mem[_19347 + (32 * ('cd', 36).length) + 321] = 0
                idx = 0
                while idx < ('cd', 36).length - 1:
                    require idx < mem[_19347 + 289]
                    _55825 = mem[(32 * idx) + _19347 + 321]
                    require idx + 1 < mem[_19347 + 289]
                    _55890 = mem[(32 * idx + 1) + _19347 + 321]
                    if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                        if not mem[(32 * idx) + _19347 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56281 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx) + _19347 + 333 len 20]:
                            if idx >= mem[_19347 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58315 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60305 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60307 = sha3(mem[_60305 + 32 len mem[_60305]])
                                    mem[_58315 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58315 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58315 + 125] = _60307
                                    mem[_58315 + 157] = stor4[cd[68]].field_512
                                    mem[_58315 + 72] = 85
                                    mem[_58315 + 189] = 0
                                    mem[64] = _58315 + 221
                                    mem[_58315 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58315 + 225] = 0
                                    mem[_58315 + 257] = _56281
                                    mem[_58315 + 289] = msg.sender
                                    mem[_58315 + 321] = 128
                                    mem[_58315 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58315 + 385] = mem[s + _58315 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60307, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60307, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56281, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58316 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55825)
                                    _60309 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60311 = sha3(mem[_60309 + 32 len mem[_60309]])
                                    mem[_58316 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58316 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58316 + 125] = _60311
                                    mem[_58316 + 157] = stor4[cd[68]].field_512
                                    mem[_58316 + 72] = 85
                                    mem[_58316 + 189] = 0
                                    mem[64] = _58316 + 221
                                    mem[_58316 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58316 + 225] = 0
                                    mem[_58316 + 257] = _56281
                                    mem[_58316 + 289] = msg.sender
                                    mem[_58316 + 321] = 128
                                    mem[_58316 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58316 + 385] = mem[s + _58316 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60311, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60311, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56281, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19347 + 289]
                                _56665 = mem[(32 * idx + 2) + _19347 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58313 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_56665)
                                    _60297 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60299 = sha3(mem[_60297 + 32 len mem[_60297]])
                                    mem[_58313 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58313 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58313 + 125] = _60299
                                    mem[_58313 + 157] = stor4[cd[68]].field_512
                                    mem[_58313 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58313 + 221] = address(_55825)
                                        mem[_58313 + 241] = address(_55890)
                                        mem[_58313 + 189] = 40
                                        mem[_58313 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58313 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58313 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58313 + 346] = stor4[cd[68]].field_512
                                        mem[_58313 + 261] = 85
                                        mem[_58313 + 378] = 0
                                        mem[64] = _58313 + 410
                                        mem[_58313 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58313 + 414] = 0
                                        mem[_58313 + 446] = _56281
                                        mem[_58313 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60299, stor4[cd[68]].field_512))
                                        mem[_58313 + 510] = 128
                                        mem[_58313 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58313 + 574] = mem[s + _58313 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56281, address(sha3(0, stor4[cd[68]].field_0, _60299, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58313 + 221] = address(_55890)
                                        mem[_58313 + 241] = address(_55825)
                                        mem[_58313 + 189] = 40
                                        mem[_58313 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58313 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58313 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58313 + 346] = stor4[cd[68]].field_512
                                        mem[_58313 + 261] = 85
                                        mem[_58313 + 378] = 0
                                        mem[64] = _58313 + 410
                                        mem[_58313 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58313 + 414] = 0
                                        mem[_58313 + 446] = _56281
                                        mem[_58313 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60299, stor4[cd[68]].field_512))
                                        mem[_58313 + 510] = 128
                                        mem[_58313 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58313 + 574] = mem[s + _58313 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56281, address(sha3(0, stor4[cd[68]].field_0, _60299, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58314 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60301 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60303 = sha3(mem[_60301 + 32 len mem[_60301]])
                                    mem[_58314 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58314 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58314 + 125] = _60303
                                    mem[_58314 + 157] = stor4[cd[68]].field_512
                                    mem[_58314 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58314 + 221] = address(_55825)
                                        mem[_58314 + 241] = address(_55890)
                                        mem[_58314 + 189] = 40
                                        mem[_58314 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58314 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58314 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58314 + 346] = stor4[cd[68]].field_512
                                        mem[_58314 + 261] = 85
                                        mem[_58314 + 378] = 0
                                        mem[64] = _58314 + 410
                                        mem[_58314 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58314 + 414] = 0
                                        mem[_58314 + 446] = _56281
                                        mem[_58314 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60303, stor4[cd[68]].field_512))
                                        mem[_58314 + 510] = 128
                                        mem[_58314 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58314 + 574] = mem[s + _58314 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56281, address(sha3(0, stor4[cd[68]].field_0, _60303, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58314 + 221] = address(_55890)
                                        mem[_58314 + 241] = address(_55825)
                                        mem[_58314 + 189] = 40
                                        mem[_58314 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58314 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58314 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58314 + 346] = stor4[cd[68]].field_512
                                        mem[_58314 + 261] = 85
                                        mem[_58314 + 378] = 0
                                        mem[64] = _58314 + 410
                                        mem[_58314 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58314 + 414] = 0
                                        mem[_58314 + 446] = _56281
                                        mem[_58314 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60303, stor4[cd[68]].field_512))
                                        mem[_58314 + 510] = 128
                                        mem[_58314 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58314 + 574] = mem[s + _58314 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56281, address(sha3(0, stor4[cd[68]].field_0, _60303, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19347 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58319 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60321 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60323 = sha3(mem[_60321 + 32 len mem[_60321]])
                                    mem[_58319 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58319 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58319 + 125] = _60323
                                    mem[_58319 + 157] = stor4[cd[68]].field_512
                                    mem[_58319 + 72] = 85
                                    mem[_58319 + 189] = 0
                                    mem[64] = _58319 + 221
                                    mem[_58319 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58319 + 225] = _56281
                                    mem[_58319 + 257] = 0
                                    mem[_58319 + 289] = msg.sender
                                    mem[_58319 + 321] = 128
                                    mem[_58319 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58319 + 385] = mem[s + _58319 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60323, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60323, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56281, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58320 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55825)
                                    _60325 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60327 = sha3(mem[_60325 + 32 len mem[_60325]])
                                    mem[_58320 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58320 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58320 + 125] = _60327
                                    mem[_58320 + 157] = stor4[cd[68]].field_512
                                    mem[_58320 + 72] = 85
                                    mem[_58320 + 189] = 0
                                    mem[64] = _58320 + 221
                                    mem[_58320 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58320 + 225] = _56281
                                    mem[_58320 + 257] = 0
                                    mem[_58320 + 289] = msg.sender
                                    mem[_58320 + 321] = 128
                                    mem[_58320 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58320 + 385] = mem[s + _58320 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60327, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60327, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56281, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19347 + 289]
                                _56666 = mem[(32 * idx + 2) + _19347 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58317 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_56666)
                                    _60313 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60315 = sha3(mem[_60313 + 32 len mem[_60313]])
                                    mem[_58317 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58317 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58317 + 125] = _60315
                                    mem[_58317 + 157] = stor4[cd[68]].field_512
                                    mem[_58317 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58317 + 221] = address(_55825)
                                        mem[_58317 + 241] = address(_55890)
                                        mem[_58317 + 189] = 40
                                        mem[_58317 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58317 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58317 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58317 + 346] = stor4[cd[68]].field_512
                                        mem[_58317 + 261] = 85
                                        mem[_58317 + 378] = 0
                                        mem[64] = _58317 + 410
                                        mem[_58317 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58317 + 414] = _56281
                                        mem[_58317 + 446] = 0
                                        mem[_58317 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60315, stor4[cd[68]].field_512))
                                        mem[_58317 + 510] = 128
                                        mem[_58317 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58317 + 574] = mem[s + _58317 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56281, 0, address(sha3(0, stor4[cd[68]].field_0, _60315, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58317 + 221] = address(_55890)
                                        mem[_58317 + 241] = address(_55825)
                                        mem[_58317 + 189] = 40
                                        mem[_58317 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58317 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58317 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58317 + 346] = stor4[cd[68]].field_512
                                        mem[_58317 + 261] = 85
                                        mem[_58317 + 378] = 0
                                        mem[64] = _58317 + 410
                                        mem[_58317 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58317 + 414] = _56281
                                        mem[_58317 + 446] = 0
                                        mem[_58317 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60315, stor4[cd[68]].field_512))
                                        mem[_58317 + 510] = 128
                                        mem[_58317 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58317 + 574] = mem[s + _58317 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56281, 0, address(sha3(0, stor4[cd[68]].field_0, _60315, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58318 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60317 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60319 = sha3(mem[_60317 + 32 len mem[_60317]])
                                    mem[_58318 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58318 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58318 + 125] = _60319
                                    mem[_58318 + 157] = stor4[cd[68]].field_512
                                    mem[_58318 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58318 + 221] = address(_55825)
                                        mem[_58318 + 241] = address(_55890)
                                        mem[_58318 + 189] = 40
                                        mem[_58318 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58318 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58318 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58318 + 346] = stor4[cd[68]].field_512
                                        mem[_58318 + 261] = 85
                                        mem[_58318 + 378] = 0
                                        mem[64] = _58318 + 410
                                        mem[_58318 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58318 + 414] = _56281
                                        mem[_58318 + 446] = 0
                                        mem[_58318 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60319, stor4[cd[68]].field_512))
                                        mem[_58318 + 510] = 128
                                        mem[_58318 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58318 + 574] = mem[s + _58318 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56281, 0, address(sha3(0, stor4[cd[68]].field_0, _60319, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58318 + 221] = address(_55890)
                                        mem[_58318 + 241] = address(_55825)
                                        mem[_58318 + 189] = 40
                                        mem[_58318 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58318 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58318 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58318 + 346] = stor4[cd[68]].field_512
                                        mem[_58318 + 261] = 85
                                        mem[_58318 + 378] = 0
                                        mem[64] = _58318 + 410
                                        mem[_58318 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58318 + 414] = _56281
                                        mem[_58318 + 446] = 0
                                        mem[_58318 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60319, stor4[cd[68]].field_512))
                                        mem[_58318 + 510] = 128
                                        mem[_58318 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58318 + 574] = mem[s + _58318 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56281, 0, address(sha3(0, stor4[cd[68]].field_0, _60319, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                        _56283 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                        if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                            if idx >= mem[_19347 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58323 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60337 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60339 = sha3(mem[_60337 + 32 len mem[_60337]])
                                    mem[_58323 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58323 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58323 + 125] = _60339
                                    mem[_58323 + 157] = stor4[cd[68]].field_512
                                    mem[_58323 + 72] = 85
                                    mem[_58323 + 189] = 0
                                    mem[64] = _58323 + 221
                                    mem[_58323 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58323 + 225] = 0
                                    mem[_58323 + 257] = _56283
                                    mem[_58323 + 289] = msg.sender
                                    mem[_58323 + 321] = 128
                                    mem[_58323 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58323 + 385] = mem[s + _58323 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60339, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60339, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56283, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58324 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55825)
                                    _60341 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60343 = sha3(mem[_60341 + 32 len mem[_60341]])
                                    mem[_58324 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58324 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58324 + 125] = _60343
                                    mem[_58324 + 157] = stor4[cd[68]].field_512
                                    mem[_58324 + 72] = 85
                                    mem[_58324 + 189] = 0
                                    mem[64] = _58324 + 221
                                    mem[_58324 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58324 + 225] = 0
                                    mem[_58324 + 257] = _56283
                                    mem[_58324 + 289] = msg.sender
                                    mem[_58324 + 321] = 128
                                    mem[_58324 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58324 + 385] = mem[s + _58324 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60343, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60343, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56283, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19347 + 289]
                                _56667 = mem[(32 * idx + 2) + _19347 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58321 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_56667)
                                    _60329 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60331 = sha3(mem[_60329 + 32 len mem[_60329]])
                                    mem[_58321 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58321 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58321 + 125] = _60331
                                    mem[_58321 + 157] = stor4[cd[68]].field_512
                                    mem[_58321 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58321 + 221] = address(_55825)
                                        mem[_58321 + 241] = address(_55890)
                                        mem[_58321 + 189] = 40
                                        mem[_58321 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58321 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58321 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58321 + 346] = stor4[cd[68]].field_512
                                        mem[_58321 + 261] = 85
                                        mem[_58321 + 378] = 0
                                        mem[64] = _58321 + 410
                                        mem[_58321 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58321 + 414] = 0
                                        mem[_58321 + 446] = _56283
                                        mem[_58321 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60331, stor4[cd[68]].field_512))
                                        mem[_58321 + 510] = 128
                                        mem[_58321 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58321 + 574] = mem[s + _58321 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56283, address(sha3(0, stor4[cd[68]].field_0, _60331, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58321 + 221] = address(_55890)
                                        mem[_58321 + 241] = address(_55825)
                                        mem[_58321 + 189] = 40
                                        mem[_58321 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58321 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58321 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58321 + 346] = stor4[cd[68]].field_512
                                        mem[_58321 + 261] = 85
                                        mem[_58321 + 378] = 0
                                        mem[64] = _58321 + 410
                                        mem[_58321 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58321 + 414] = 0
                                        mem[_58321 + 446] = _56283
                                        mem[_58321 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60331, stor4[cd[68]].field_512))
                                        mem[_58321 + 510] = 128
                                        mem[_58321 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58321 + 574] = mem[s + _58321 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56283, address(sha3(0, stor4[cd[68]].field_0, _60331, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58322 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60333 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60335 = sha3(mem[_60333 + 32 len mem[_60333]])
                                    mem[_58322 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58322 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58322 + 125] = _60335
                                    mem[_58322 + 157] = stor4[cd[68]].field_512
                                    mem[_58322 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58322 + 221] = address(_55825)
                                        mem[_58322 + 241] = address(_55890)
                                        mem[_58322 + 189] = 40
                                        mem[_58322 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58322 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58322 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58322 + 346] = stor4[cd[68]].field_512
                                        mem[_58322 + 261] = 85
                                        mem[_58322 + 378] = 0
                                        mem[64] = _58322 + 410
                                        mem[_58322 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58322 + 414] = 0
                                        mem[_58322 + 446] = _56283
                                        mem[_58322 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60335, stor4[cd[68]].field_512))
                                        mem[_58322 + 510] = 128
                                        mem[_58322 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58322 + 574] = mem[s + _58322 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56283, address(sha3(0, stor4[cd[68]].field_0, _60335, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58322 + 221] = address(_55890)
                                        mem[_58322 + 241] = address(_55825)
                                        mem[_58322 + 189] = 40
                                        mem[_58322 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58322 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58322 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58322 + 346] = stor4[cd[68]].field_512
                                        mem[_58322 + 261] = 85
                                        mem[_58322 + 378] = 0
                                        mem[64] = _58322 + 410
                                        mem[_58322 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58322 + 414] = 0
                                        mem[_58322 + 446] = _56283
                                        mem[_58322 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60335, stor4[cd[68]].field_512))
                                        mem[_58322 + 510] = 128
                                        mem[_58322 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58322 + 574] = mem[s + _58322 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args 0, _56283, address(sha3(0, stor4[cd[68]].field_0, _60335, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if idx >= mem[_19347 + 289] - 2:
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58327 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60353 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60355 = sha3(mem[_60353 + 32 len mem[_60353]])
                                    mem[_58327 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58327 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58327 + 125] = _60355
                                    mem[_58327 + 157] = stor4[cd[68]].field_512
                                    mem[_58327 + 72] = 85
                                    mem[_58327 + 189] = 0
                                    mem[64] = _58327 + 221
                                    mem[_58327 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58327 + 225] = _56283
                                    mem[_58327 + 257] = 0
                                    mem[_58327 + 289] = msg.sender
                                    mem[_58327 + 321] = 128
                                    mem[_58327 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58327 + 385] = mem[s + _58327 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60355, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60355, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56283, 0, msg.sender, 128, 0
                                else:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58328 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55825)
                                    _60357 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60359 = sha3(mem[_60357 + 32 len mem[_60357]])
                                    mem[_58328 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58328 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58328 + 125] = _60359
                                    mem[_58328 + 157] = stor4[cd[68]].field_512
                                    mem[_58328 + 72] = 85
                                    mem[_58328 + 189] = 0
                                    mem[64] = _58328 + 221
                                    mem[_58328 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58328 + 225] = _56283
                                    mem[_58328 + 257] = 0
                                    mem[_58328 + 289] = msg.sender
                                    mem[_58328 + 321] = 128
                                    mem[_58328 + 353] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58328 + 385] = mem[s + _58328 + 221]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60359, stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, _60359, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56283, 0, msg.sender, 128, 0
                            else:
                                require idx + 2 < mem[_19347 + 289]
                                _56668 = mem[(32 * idx + 2) + _19347 + 321]
                                mem[0] = cd[68]
                                mem[32] = 4
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58325 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_56668)
                                    _60345 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60347 = sha3(mem[_60345 + 32 len mem[_60345]])
                                    mem[_58325 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58325 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58325 + 125] = _60347
                                    mem[_58325 + 157] = stor4[cd[68]].field_512
                                    mem[_58325 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58325 + 221] = address(_55825)
                                        mem[_58325 + 241] = address(_55890)
                                        mem[_58325 + 189] = 40
                                        mem[_58325 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58325 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58325 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58325 + 346] = stor4[cd[68]].field_512
                                        mem[_58325 + 261] = 85
                                        mem[_58325 + 378] = 0
                                        mem[64] = _58325 + 410
                                        mem[_58325 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58325 + 414] = _56283
                                        mem[_58325 + 446] = 0
                                        mem[_58325 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60347, stor4[cd[68]].field_512))
                                        mem[_58325 + 510] = 128
                                        mem[_58325 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58325 + 574] = mem[s + _58325 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56283, 0, address(sha3(0, stor4[cd[68]].field_0, _60347, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58325 + 221] = address(_55890)
                                        mem[_58325 + 241] = address(_55825)
                                        mem[_58325 + 189] = 40
                                        mem[_58325 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58325 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58325 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58325 + 346] = stor4[cd[68]].field_512
                                        mem[_58325 + 261] = 85
                                        mem[_58325 + 378] = 0
                                        mem[64] = _58325 + 410
                                        mem[_58325 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58325 + 414] = _56283
                                        mem[_58325 + 446] = 0
                                        mem[_58325 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60347, stor4[cd[68]].field_512))
                                        mem[_58325 + 510] = 128
                                        mem[_58325 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58325 + 574] = mem[s + _58325 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56283, 0, address(sha3(0, stor4[cd[68]].field_0, _60347, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    _58326 = mem[64]
                                    mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                    mem[mem[64] + 52] = address(_55890)
                                    _60349 = mem[64]
                                    mem[mem[64]] = 40
                                    mem[64] = mem[64] + 72
                                    _60351 = sha3(mem[_60349 + 32 len mem[_60349]])
                                    mem[_58326 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58326 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58326 + 125] = _60351
                                    mem[_58326 + 157] = stor4[cd[68]].field_512
                                    mem[_58326 + 72] = 85
                                    mem[0] = cd[68]
                                    mem[32] = 4
                                    if address(_55825) == address(_55890):
                                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                    if address(_55825) < address(_55890):
                                        if not address(_55825):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58326 + 221] = address(_55825)
                                        mem[_58326 + 241] = address(_55890)
                                        mem[_58326 + 189] = 40
                                        mem[_58326 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58326 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58326 + 314] = sha3(address(_55825), address(_55890))
                                        mem[_58326 + 346] = stor4[cd[68]].field_512
                                        mem[_58326 + 261] = 85
                                        mem[_58326 + 378] = 0
                                        mem[64] = _58326 + 410
                                        mem[_58326 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58326 + 414] = _56283
                                        mem[_58326 + 446] = 0
                                        mem[_58326 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60351, stor4[cd[68]].field_512))
                                        mem[_58326 + 510] = 128
                                        mem[_58326 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58326 + 574] = mem[s + _58326 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55825), address(_55890)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56283, 0, address(sha3(0, stor4[cd[68]].field_0, _60351, stor4[cd[68]].field_512)), 128, 0
                                    else:
                                        if not address(_55890):
                                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                        mem[_58326 + 221] = address(_55890)
                                        mem[_58326 + 241] = address(_55825)
                                        mem[_58326 + 189] = 40
                                        mem[_58326 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                        mem[_58326 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                        mem[_58326 + 314] = sha3(address(_55890), address(_55825))
                                        mem[_58326 + 346] = stor4[cd[68]].field_512
                                        mem[_58326 + 261] = 85
                                        mem[_58326 + 378] = 0
                                        mem[64] = _58326 + 410
                                        mem[_58326 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                        mem[_58326 + 414] = _56283
                                        mem[_58326 + 446] = 0
                                        mem[_58326 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60351, stor4[cd[68]].field_512))
                                        mem[_58326 + 510] = 128
                                        mem[_58326 + 542] = 0
                                        s = 0
                                        while s < 0:
                                            mem[s + _58326 + 574] = mem[s + _58326 + 410]
                                            s = s + 32
                                            continue 
                                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)))
                                        call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55890), address(_55825)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                             gas gas_remaining wei
                                            args _56283, 0, address(sha3(0, stor4[cd[68]].field_0, _60351, stor4[cd[68]].field_512)), 128, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 32
                _55953 = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
                mem[mem[64] + 64 len 32 * _55953] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55953]
                return 32, mem[mem[64] + 32 len (32 * _55953) + 32]
            require mem[96] >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            mem[64] = _19347 + (32 * ('cd', 36).length) + 321
            mem[_19347 + 289] = ('cd', 36).length
            mem[_19347 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
            mem[_19347 + (32 * ('cd', 36).length) + 321] = 0
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[_19347 + 289]
                _55827 = mem[(32 * idx) + _19347 + 321]
                require idx + 1 < mem[_19347 + 289]
                _55892 = mem[(32 * idx + 1) + _19347 + 321]
                if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                    if not mem[(32 * idx) + _19347 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56285 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx) + _19347 + 333 len 20]:
                        if idx >= mem[_19347 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                if not mem[(32 * idx) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58331 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60369 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60371 = sha3(mem[_60369 + 32 len mem[_60369]])
                                mem[_58331 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58331 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58331 + 125] = _60371
                                mem[_58331 + 157] = stor4[cd[68]].field_512
                                mem[_58331 + 72] = 85
                                mem[_58331 + 189] = 0
                                mem[64] = _58331 + 221
                                mem[_58331 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58331 + 225] = 0
                                mem[_58331 + 257] = _56285
                                mem[_58331 + 289] = msg.sender
                                mem[_58331 + 321] = 128
                                mem[_58331 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58331 + 385] = mem[s + _58331 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60371, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60371, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56285, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58332 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55827)
                                _60373 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60375 = sha3(mem[_60373 + 32 len mem[_60373]])
                                mem[_58332 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58332 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58332 + 125] = _60375
                                mem[_58332 + 157] = stor4[cd[68]].field_512
                                mem[_58332 + 72] = 85
                                mem[_58332 + 189] = 0
                                mem[64] = _58332 + 221
                                mem[_58332 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58332 + 225] = 0
                                mem[_58332 + 257] = _56285
                                mem[_58332 + 289] = msg.sender
                                mem[_58332 + 321] = 128
                                mem[_58332 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58332 + 385] = mem[s + _58332 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60375, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60375, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56285, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + 289]
                            _56669 = mem[(32 * idx + 2) + _19347 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58329 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_56669)
                                _60361 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60363 = sha3(mem[_60361 + 32 len mem[_60361]])
                                mem[_58329 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58329 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58329 + 125] = _60363
                                mem[_58329 + 157] = stor4[cd[68]].field_512
                                mem[_58329 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58329 + 221] = address(_55827)
                                    mem[_58329 + 241] = address(_55892)
                                    mem[_58329 + 189] = 40
                                    mem[_58329 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58329 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58329 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58329 + 346] = stor4[cd[68]].field_512
                                    mem[_58329 + 261] = 85
                                    mem[_58329 + 378] = 0
                                    mem[64] = _58329 + 410
                                    mem[_58329 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58329 + 414] = 0
                                    mem[_58329 + 446] = _56285
                                    mem[_58329 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60363, stor4[cd[68]].field_512))
                                    mem[_58329 + 510] = 128
                                    mem[_58329 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58329 + 574] = mem[s + _58329 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56285, address(sha3(0, stor4[cd[68]].field_0, _60363, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58329 + 221] = address(_55892)
                                    mem[_58329 + 241] = address(_55827)
                                    mem[_58329 + 189] = 40
                                    mem[_58329 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58329 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58329 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58329 + 346] = stor4[cd[68]].field_512
                                    mem[_58329 + 261] = 85
                                    mem[_58329 + 378] = 0
                                    mem[64] = _58329 + 410
                                    mem[_58329 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58329 + 414] = 0
                                    mem[_58329 + 446] = _56285
                                    mem[_58329 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60363, stor4[cd[68]].field_512))
                                    mem[_58329 + 510] = 128
                                    mem[_58329 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58329 + 574] = mem[s + _58329 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56285, address(sha3(0, stor4[cd[68]].field_0, _60363, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58330 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60365 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60367 = sha3(mem[_60365 + 32 len mem[_60365]])
                                mem[_58330 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58330 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58330 + 125] = _60367
                                mem[_58330 + 157] = stor4[cd[68]].field_512
                                mem[_58330 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58330 + 221] = address(_55827)
                                    mem[_58330 + 241] = address(_55892)
                                    mem[_58330 + 189] = 40
                                    mem[_58330 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58330 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58330 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58330 + 346] = stor4[cd[68]].field_512
                                    mem[_58330 + 261] = 85
                                    mem[_58330 + 378] = 0
                                    mem[64] = _58330 + 410
                                    mem[_58330 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58330 + 414] = 0
                                    mem[_58330 + 446] = _56285
                                    mem[_58330 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60367, stor4[cd[68]].field_512))
                                    mem[_58330 + 510] = 128
                                    mem[_58330 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58330 + 574] = mem[s + _58330 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56285, address(sha3(0, stor4[cd[68]].field_0, _60367, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58330 + 221] = address(_55892)
                                    mem[_58330 + 241] = address(_55827)
                                    mem[_58330 + 189] = 40
                                    mem[_58330 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58330 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58330 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58330 + 346] = stor4[cd[68]].field_512
                                    mem[_58330 + 261] = 85
                                    mem[_58330 + 378] = 0
                                    mem[64] = _58330 + 410
                                    mem[_58330 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58330 + 414] = 0
                                    mem[_58330 + 446] = _56285
                                    mem[_58330 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60367, stor4[cd[68]].field_512))
                                    mem[_58330 + 510] = 128
                                    mem[_58330 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58330 + 574] = mem[s + _58330 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56285, address(sha3(0, stor4[cd[68]].field_0, _60367, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19347 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                if not mem[(32 * idx) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58335 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60385 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60387 = sha3(mem[_60385 + 32 len mem[_60385]])
                                mem[_58335 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58335 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58335 + 125] = _60387
                                mem[_58335 + 157] = stor4[cd[68]].field_512
                                mem[_58335 + 72] = 85
                                mem[_58335 + 189] = 0
                                mem[64] = _58335 + 221
                                mem[_58335 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58335 + 225] = _56285
                                mem[_58335 + 257] = 0
                                mem[_58335 + 289] = msg.sender
                                mem[_58335 + 321] = 128
                                mem[_58335 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58335 + 385] = mem[s + _58335 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60387, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60387, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56285, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58336 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55827)
                                _60389 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60391 = sha3(mem[_60389 + 32 len mem[_60389]])
                                mem[_58336 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58336 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58336 + 125] = _60391
                                mem[_58336 + 157] = stor4[cd[68]].field_512
                                mem[_58336 + 72] = 85
                                mem[_58336 + 189] = 0
                                mem[64] = _58336 + 221
                                mem[_58336 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58336 + 225] = _56285
                                mem[_58336 + 257] = 0
                                mem[_58336 + 289] = msg.sender
                                mem[_58336 + 321] = 128
                                mem[_58336 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58336 + 385] = mem[s + _58336 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60391, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60391, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56285, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + 289]
                            _56670 = mem[(32 * idx + 2) + _19347 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58333 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_56670)
                                _60377 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60379 = sha3(mem[_60377 + 32 len mem[_60377]])
                                mem[_58333 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58333 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58333 + 125] = _60379
                                mem[_58333 + 157] = stor4[cd[68]].field_512
                                mem[_58333 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58333 + 221] = address(_55827)
                                    mem[_58333 + 241] = address(_55892)
                                    mem[_58333 + 189] = 40
                                    mem[_58333 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58333 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58333 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58333 + 346] = stor4[cd[68]].field_512
                                    mem[_58333 + 261] = 85
                                    mem[_58333 + 378] = 0
                                    mem[64] = _58333 + 410
                                    mem[_58333 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58333 + 414] = _56285
                                    mem[_58333 + 446] = 0
                                    mem[_58333 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60379, stor4[cd[68]].field_512))
                                    mem[_58333 + 510] = 128
                                    mem[_58333 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58333 + 574] = mem[s + _58333 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56285, 0, address(sha3(0, stor4[cd[68]].field_0, _60379, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58333 + 221] = address(_55892)
                                    mem[_58333 + 241] = address(_55827)
                                    mem[_58333 + 189] = 40
                                    mem[_58333 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58333 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58333 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58333 + 346] = stor4[cd[68]].field_512
                                    mem[_58333 + 261] = 85
                                    mem[_58333 + 378] = 0
                                    mem[64] = _58333 + 410
                                    mem[_58333 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58333 + 414] = _56285
                                    mem[_58333 + 446] = 0
                                    mem[_58333 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60379, stor4[cd[68]].field_512))
                                    mem[_58333 + 510] = 128
                                    mem[_58333 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58333 + 574] = mem[s + _58333 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56285, 0, address(sha3(0, stor4[cd[68]].field_0, _60379, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58334 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60381 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60383 = sha3(mem[_60381 + 32 len mem[_60381]])
                                mem[_58334 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58334 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58334 + 125] = _60383
                                mem[_58334 + 157] = stor4[cd[68]].field_512
                                mem[_58334 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58334 + 221] = address(_55827)
                                    mem[_58334 + 241] = address(_55892)
                                    mem[_58334 + 189] = 40
                                    mem[_58334 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58334 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58334 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58334 + 346] = stor4[cd[68]].field_512
                                    mem[_58334 + 261] = 85
                                    mem[_58334 + 378] = 0
                                    mem[64] = _58334 + 410
                                    mem[_58334 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58334 + 414] = _56285
                                    mem[_58334 + 446] = 0
                                    mem[_58334 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60383, stor4[cd[68]].field_512))
                                    mem[_58334 + 510] = 128
                                    mem[_58334 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58334 + 574] = mem[s + _58334 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56285, 0, address(sha3(0, stor4[cd[68]].field_0, _60383, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58334 + 221] = address(_55892)
                                    mem[_58334 + 241] = address(_55827)
                                    mem[_58334 + 189] = 40
                                    mem[_58334 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58334 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58334 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58334 + 346] = stor4[cd[68]].field_512
                                    mem[_58334 + 261] = 85
                                    mem[_58334 + 378] = 0
                                    mem[64] = _58334 + 410
                                    mem[_58334 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58334 + 414] = _56285
                                    mem[_58334 + 446] = 0
                                    mem[_58334 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60383, stor4[cd[68]].field_512))
                                    mem[_58334 + 510] = 128
                                    mem[_58334 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58334 + 574] = mem[s + _58334 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56285, 0, address(sha3(0, stor4[cd[68]].field_0, _60383, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56287 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                        if idx >= mem[_19347 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                if not mem[(32 * idx) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58339 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60401 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60403 = sha3(mem[_60401 + 32 len mem[_60401]])
                                mem[_58339 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58339 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58339 + 125] = _60403
                                mem[_58339 + 157] = stor4[cd[68]].field_512
                                mem[_58339 + 72] = 85
                                mem[_58339 + 189] = 0
                                mem[64] = _58339 + 221
                                mem[_58339 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58339 + 225] = 0
                                mem[_58339 + 257] = _56287
                                mem[_58339 + 289] = msg.sender
                                mem[_58339 + 321] = 128
                                mem[_58339 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58339 + 385] = mem[s + _58339 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60403, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60403, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56287, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58340 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55827)
                                _60405 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60407 = sha3(mem[_60405 + 32 len mem[_60405]])
                                mem[_58340 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58340 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58340 + 125] = _60407
                                mem[_58340 + 157] = stor4[cd[68]].field_512
                                mem[_58340 + 72] = 85
                                mem[_58340 + 189] = 0
                                mem[64] = _58340 + 221
                                mem[_58340 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58340 + 225] = 0
                                mem[_58340 + 257] = _56287
                                mem[_58340 + 289] = msg.sender
                                mem[_58340 + 321] = 128
                                mem[_58340 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58340 + 385] = mem[s + _58340 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60407, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60407, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56287, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + 289]
                            _56671 = mem[(32 * idx + 2) + _19347 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58337 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_56671)
                                _60393 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60395 = sha3(mem[_60393 + 32 len mem[_60393]])
                                mem[_58337 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58337 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58337 + 125] = _60395
                                mem[_58337 + 157] = stor4[cd[68]].field_512
                                mem[_58337 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58337 + 221] = address(_55827)
                                    mem[_58337 + 241] = address(_55892)
                                    mem[_58337 + 189] = 40
                                    mem[_58337 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58337 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58337 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58337 + 346] = stor4[cd[68]].field_512
                                    mem[_58337 + 261] = 85
                                    mem[_58337 + 378] = 0
                                    mem[64] = _58337 + 410
                                    mem[_58337 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58337 + 414] = 0
                                    mem[_58337 + 446] = _56287
                                    mem[_58337 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60395, stor4[cd[68]].field_512))
                                    mem[_58337 + 510] = 128
                                    mem[_58337 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58337 + 574] = mem[s + _58337 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56287, address(sha3(0, stor4[cd[68]].field_0, _60395, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58337 + 221] = address(_55892)
                                    mem[_58337 + 241] = address(_55827)
                                    mem[_58337 + 189] = 40
                                    mem[_58337 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58337 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58337 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58337 + 346] = stor4[cd[68]].field_512
                                    mem[_58337 + 261] = 85
                                    mem[_58337 + 378] = 0
                                    mem[64] = _58337 + 410
                                    mem[_58337 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58337 + 414] = 0
                                    mem[_58337 + 446] = _56287
                                    mem[_58337 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60395, stor4[cd[68]].field_512))
                                    mem[_58337 + 510] = 128
                                    mem[_58337 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58337 + 574] = mem[s + _58337 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56287, address(sha3(0, stor4[cd[68]].field_0, _60395, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58338 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60397 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60399 = sha3(mem[_60397 + 32 len mem[_60397]])
                                mem[_58338 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58338 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58338 + 125] = _60399
                                mem[_58338 + 157] = stor4[cd[68]].field_512
                                mem[_58338 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58338 + 221] = address(_55827)
                                    mem[_58338 + 241] = address(_55892)
                                    mem[_58338 + 189] = 40
                                    mem[_58338 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58338 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58338 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58338 + 346] = stor4[cd[68]].field_512
                                    mem[_58338 + 261] = 85
                                    mem[_58338 + 378] = 0
                                    mem[64] = _58338 + 410
                                    mem[_58338 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58338 + 414] = 0
                                    mem[_58338 + 446] = _56287
                                    mem[_58338 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60399, stor4[cd[68]].field_512))
                                    mem[_58338 + 510] = 128
                                    mem[_58338 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58338 + 574] = mem[s + _58338 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56287, address(sha3(0, stor4[cd[68]].field_0, _60399, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58338 + 221] = address(_55892)
                                    mem[_58338 + 241] = address(_55827)
                                    mem[_58338 + 189] = 40
                                    mem[_58338 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58338 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58338 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58338 + 346] = stor4[cd[68]].field_512
                                    mem[_58338 + 261] = 85
                                    mem[_58338 + 378] = 0
                                    mem[64] = _58338 + 410
                                    mem[_58338 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58338 + 414] = 0
                                    mem[_58338 + 446] = _56287
                                    mem[_58338 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60399, stor4[cd[68]].field_512))
                                    mem[_58338 + 510] = 128
                                    mem[_58338 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58338 + 574] = mem[s + _58338 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56287, address(sha3(0, stor4[cd[68]].field_0, _60399, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19347 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + 333 len 20] == mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + 333 len 20] < mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                if not mem[(32 * idx) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58343 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60417 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60419 = sha3(mem[_60417 + 32 len mem[_60417]])
                                mem[_58343 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58343 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58343 + 125] = _60419
                                mem[_58343 + 157] = stor4[cd[68]].field_512
                                mem[_58343 + 72] = 85
                                mem[_58343 + 189] = 0
                                mem[64] = _58343 + 221
                                mem[_58343 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58343 + 225] = _56287
                                mem[_58343 + 257] = 0
                                mem[_58343 + 289] = msg.sender
                                mem[_58343 + 321] = 128
                                mem[_58343 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58343 + 385] = mem[s + _58343 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60419, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60419, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56287, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58344 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55827)
                                _60421 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60423 = sha3(mem[_60421 + 32 len mem[_60421]])
                                mem[_58344 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58344 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58344 + 125] = _60423
                                mem[_58344 + 157] = stor4[cd[68]].field_512
                                mem[_58344 + 72] = 85
                                mem[_58344 + 189] = 0
                                mem[64] = _58344 + 221
                                mem[_58344 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58344 + 225] = _56287
                                mem[_58344 + 257] = 0
                                mem[_58344 + 289] = msg.sender
                                mem[_58344 + 321] = 128
                                mem[_58344 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58344 + 385] = mem[s + _58344 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60423, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60423, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56287, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + 289]
                            _56672 = mem[(32 * idx + 2) + _19347 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] == mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + 333 len 20] < mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58341 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + 321])
                                mem[mem[64] + 52] = address(_56672)
                                _60409 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60411 = sha3(mem[_60409 + 32 len mem[_60409]])
                                mem[_58341 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58341 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58341 + 125] = _60411
                                mem[_58341 + 157] = stor4[cd[68]].field_512
                                mem[_58341 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58341 + 221] = address(_55827)
                                    mem[_58341 + 241] = address(_55892)
                                    mem[_58341 + 189] = 40
                                    mem[_58341 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58341 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58341 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58341 + 346] = stor4[cd[68]].field_512
                                    mem[_58341 + 261] = 85
                                    mem[_58341 + 378] = 0
                                    mem[64] = _58341 + 410
                                    mem[_58341 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58341 + 414] = _56287
                                    mem[_58341 + 446] = 0
                                    mem[_58341 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60411, stor4[cd[68]].field_512))
                                    mem[_58341 + 510] = 128
                                    mem[_58341 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58341 + 574] = mem[s + _58341 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56287, 0, address(sha3(0, stor4[cd[68]].field_0, _60411, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58341 + 221] = address(_55892)
                                    mem[_58341 + 241] = address(_55827)
                                    mem[_58341 + 189] = 40
                                    mem[_58341 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58341 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58341 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58341 + 346] = stor4[cd[68]].field_512
                                    mem[_58341 + 261] = 85
                                    mem[_58341 + 378] = 0
                                    mem[64] = _58341 + 410
                                    mem[_58341 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58341 + 414] = _56287
                                    mem[_58341 + 446] = 0
                                    mem[_58341 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60411, stor4[cd[68]].field_512))
                                    mem[_58341 + 510] = 128
                                    mem[_58341 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58341 + 574] = mem[s + _58341 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56287, 0, address(sha3(0, stor4[cd[68]].field_0, _60411, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58342 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + 321])
                                mem[mem[64] + 52] = address(_55892)
                                _60413 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60415 = sha3(mem[_60413 + 32 len mem[_60413]])
                                mem[_58342 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58342 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58342 + 125] = _60415
                                mem[_58342 + 157] = stor4[cd[68]].field_512
                                mem[_58342 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55827) == address(_55892):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55827) < address(_55892):
                                    if not address(_55827):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58342 + 221] = address(_55827)
                                    mem[_58342 + 241] = address(_55892)
                                    mem[_58342 + 189] = 40
                                    mem[_58342 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58342 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58342 + 314] = sha3(address(_55827), address(_55892))
                                    mem[_58342 + 346] = stor4[cd[68]].field_512
                                    mem[_58342 + 261] = 85
                                    mem[_58342 + 378] = 0
                                    mem[64] = _58342 + 410
                                    mem[_58342 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58342 + 414] = _56287
                                    mem[_58342 + 446] = 0
                                    mem[_58342 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60415, stor4[cd[68]].field_512))
                                    mem[_58342 + 510] = 128
                                    mem[_58342 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58342 + 574] = mem[s + _58342 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55827), address(_55892)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56287, 0, address(sha3(0, stor4[cd[68]].field_0, _60415, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55892):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58342 + 221] = address(_55892)
                                    mem[_58342 + 241] = address(_55827)
                                    mem[_58342 + 189] = 40
                                    mem[_58342 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58342 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58342 + 314] = sha3(address(_55892), address(_55827))
                                    mem[_58342 + 346] = stor4[cd[68]].field_512
                                    mem[_58342 + 261] = 85
                                    mem[_58342 + 378] = 0
                                    mem[64] = _58342 + 410
                                    mem[_58342 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58342 + 414] = _56287
                                    mem[_58342 + 446] = 0
                                    mem[_58342 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60415, stor4[cd[68]].field_512))
                                    mem[_58342 + 510] = 128
                                    mem[_58342 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58342 + 574] = mem[s + _58342 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55892), address(_55827)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56287, 0, address(sha3(0, stor4[cd[68]].field_0, _60415, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
            mem[mem[64]] = 32
            _55955 = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 64 len 32 * _55955] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55955]
            return 32, mem[mem[64] + 32 len (32 * _55955) + 32]
        mem[_19347 + 289] = return_data.size
        mem[_19347 + 321 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        if not return_data.size:
            mem[64] = _19347 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
            mem[_19347 + ceil32(return_data.size) + 290] = ('cd', 36).length
            mem[_19347 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
            mem[_19347 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[_19347 + ceil32(return_data.size) + 290]
                _55829 = mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322]
                require idx + 1 < mem[_19347 + ceil32(return_data.size) + 290]
                _55894 = mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322]
                if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                    if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56289 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                        if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58347 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60433 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60435 = sha3(mem[_60433 + 32 len mem[_60433]])
                                mem[_58347 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58347 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58347 + 125] = _60435
                                mem[_58347 + 157] = stor4[cd[68]].field_512
                                mem[_58347 + 72] = 85
                                mem[_58347 + 189] = 0
                                mem[64] = _58347 + 221
                                mem[_58347 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58347 + 225] = 0
                                mem[_58347 + 257] = _56289
                                mem[_58347 + 289] = msg.sender
                                mem[_58347 + 321] = 128
                                mem[_58347 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58347 + 385] = mem[s + _58347 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60435, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60435, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56289, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58348 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55829)
                                _60437 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60439 = sha3(mem[_60437 + 32 len mem[_60437]])
                                mem[_58348 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58348 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58348 + 125] = _60439
                                mem[_58348 + 157] = stor4[cd[68]].field_512
                                mem[_58348 + 72] = 85
                                mem[_58348 + 189] = 0
                                mem[64] = _58348 + 221
                                mem[_58348 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58348 + 225] = 0
                                mem[_58348 + 257] = _56289
                                mem[_58348 + 289] = msg.sender
                                mem[_58348 + 321] = 128
                                mem[_58348 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58348 + 385] = mem[s + _58348 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60439, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60439, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56289, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                            _56673 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58345 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56673)
                                _60425 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60427 = sha3(mem[_60425 + 32 len mem[_60425]])
                                mem[_58345 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58345 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58345 + 125] = _60427
                                mem[_58345 + 157] = stor4[cd[68]].field_512
                                mem[_58345 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58345 + 221] = address(_55829)
                                    mem[_58345 + 241] = address(_55894)
                                    mem[_58345 + 189] = 40
                                    mem[_58345 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58345 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58345 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58345 + 346] = stor4[cd[68]].field_512
                                    mem[_58345 + 261] = 85
                                    mem[_58345 + 378] = 0
                                    mem[64] = _58345 + 410
                                    mem[_58345 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58345 + 414] = 0
                                    mem[_58345 + 446] = _56289
                                    mem[_58345 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60427, stor4[cd[68]].field_512))
                                    mem[_58345 + 510] = 128
                                    mem[_58345 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58345 + 574] = mem[s + _58345 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56289, address(sha3(0, stor4[cd[68]].field_0, _60427, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58345 + 221] = address(_55894)
                                    mem[_58345 + 241] = address(_55829)
                                    mem[_58345 + 189] = 40
                                    mem[_58345 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58345 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58345 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58345 + 346] = stor4[cd[68]].field_512
                                    mem[_58345 + 261] = 85
                                    mem[_58345 + 378] = 0
                                    mem[64] = _58345 + 410
                                    mem[_58345 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58345 + 414] = 0
                                    mem[_58345 + 446] = _56289
                                    mem[_58345 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60427, stor4[cd[68]].field_512))
                                    mem[_58345 + 510] = 128
                                    mem[_58345 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58345 + 574] = mem[s + _58345 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56289, address(sha3(0, stor4[cd[68]].field_0, _60427, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58346 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60429 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60431 = sha3(mem[_60429 + 32 len mem[_60429]])
                                mem[_58346 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58346 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58346 + 125] = _60431
                                mem[_58346 + 157] = stor4[cd[68]].field_512
                                mem[_58346 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58346 + 221] = address(_55829)
                                    mem[_58346 + 241] = address(_55894)
                                    mem[_58346 + 189] = 40
                                    mem[_58346 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58346 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58346 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58346 + 346] = stor4[cd[68]].field_512
                                    mem[_58346 + 261] = 85
                                    mem[_58346 + 378] = 0
                                    mem[64] = _58346 + 410
                                    mem[_58346 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58346 + 414] = 0
                                    mem[_58346 + 446] = _56289
                                    mem[_58346 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60431, stor4[cd[68]].field_512))
                                    mem[_58346 + 510] = 128
                                    mem[_58346 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58346 + 574] = mem[s + _58346 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56289, address(sha3(0, stor4[cd[68]].field_0, _60431, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58346 + 221] = address(_55894)
                                    mem[_58346 + 241] = address(_55829)
                                    mem[_58346 + 189] = 40
                                    mem[_58346 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58346 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58346 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58346 + 346] = stor4[cd[68]].field_512
                                    mem[_58346 + 261] = 85
                                    mem[_58346 + 378] = 0
                                    mem[64] = _58346 + 410
                                    mem[_58346 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58346 + 414] = 0
                                    mem[_58346 + 446] = _56289
                                    mem[_58346 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60431, stor4[cd[68]].field_512))
                                    mem[_58346 + 510] = 128
                                    mem[_58346 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58346 + 574] = mem[s + _58346 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56289, address(sha3(0, stor4[cd[68]].field_0, _60431, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58351 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60449 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60451 = sha3(mem[_60449 + 32 len mem[_60449]])
                                mem[_58351 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58351 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58351 + 125] = _60451
                                mem[_58351 + 157] = stor4[cd[68]].field_512
                                mem[_58351 + 72] = 85
                                mem[_58351 + 189] = 0
                                mem[64] = _58351 + 221
                                mem[_58351 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58351 + 225] = _56289
                                mem[_58351 + 257] = 0
                                mem[_58351 + 289] = msg.sender
                                mem[_58351 + 321] = 128
                                mem[_58351 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58351 + 385] = mem[s + _58351 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60451, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60451, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56289, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58352 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55829)
                                _60453 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60455 = sha3(mem[_60453 + 32 len mem[_60453]])
                                mem[_58352 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58352 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58352 + 125] = _60455
                                mem[_58352 + 157] = stor4[cd[68]].field_512
                                mem[_58352 + 72] = 85
                                mem[_58352 + 189] = 0
                                mem[64] = _58352 + 221
                                mem[_58352 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58352 + 225] = _56289
                                mem[_58352 + 257] = 0
                                mem[_58352 + 289] = msg.sender
                                mem[_58352 + 321] = 128
                                mem[_58352 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58352 + 385] = mem[s + _58352 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60455, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60455, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56289, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                            _56674 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58349 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56674)
                                _60441 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60443 = sha3(mem[_60441 + 32 len mem[_60441]])
                                mem[_58349 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58349 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58349 + 125] = _60443
                                mem[_58349 + 157] = stor4[cd[68]].field_512
                                mem[_58349 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58349 + 221] = address(_55829)
                                    mem[_58349 + 241] = address(_55894)
                                    mem[_58349 + 189] = 40
                                    mem[_58349 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58349 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58349 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58349 + 346] = stor4[cd[68]].field_512
                                    mem[_58349 + 261] = 85
                                    mem[_58349 + 378] = 0
                                    mem[64] = _58349 + 410
                                    mem[_58349 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58349 + 414] = _56289
                                    mem[_58349 + 446] = 0
                                    mem[_58349 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60443, stor4[cd[68]].field_512))
                                    mem[_58349 + 510] = 128
                                    mem[_58349 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58349 + 574] = mem[s + _58349 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56289, 0, address(sha3(0, stor4[cd[68]].field_0, _60443, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58349 + 221] = address(_55894)
                                    mem[_58349 + 241] = address(_55829)
                                    mem[_58349 + 189] = 40
                                    mem[_58349 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58349 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58349 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58349 + 346] = stor4[cd[68]].field_512
                                    mem[_58349 + 261] = 85
                                    mem[_58349 + 378] = 0
                                    mem[64] = _58349 + 410
                                    mem[_58349 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58349 + 414] = _56289
                                    mem[_58349 + 446] = 0
                                    mem[_58349 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60443, stor4[cd[68]].field_512))
                                    mem[_58349 + 510] = 128
                                    mem[_58349 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58349 + 574] = mem[s + _58349 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56289, 0, address(sha3(0, stor4[cd[68]].field_0, _60443, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58350 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60445 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60447 = sha3(mem[_60445 + 32 len mem[_60445]])
                                mem[_58350 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58350 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58350 + 125] = _60447
                                mem[_58350 + 157] = stor4[cd[68]].field_512
                                mem[_58350 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58350 + 221] = address(_55829)
                                    mem[_58350 + 241] = address(_55894)
                                    mem[_58350 + 189] = 40
                                    mem[_58350 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58350 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58350 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58350 + 346] = stor4[cd[68]].field_512
                                    mem[_58350 + 261] = 85
                                    mem[_58350 + 378] = 0
                                    mem[64] = _58350 + 410
                                    mem[_58350 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58350 + 414] = _56289
                                    mem[_58350 + 446] = 0
                                    mem[_58350 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60447, stor4[cd[68]].field_512))
                                    mem[_58350 + 510] = 128
                                    mem[_58350 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58350 + 574] = mem[s + _58350 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56289, 0, address(sha3(0, stor4[cd[68]].field_0, _60447, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58350 + 221] = address(_55894)
                                    mem[_58350 + 241] = address(_55829)
                                    mem[_58350 + 189] = 40
                                    mem[_58350 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58350 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58350 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58350 + 346] = stor4[cd[68]].field_512
                                    mem[_58350 + 261] = 85
                                    mem[_58350 + 378] = 0
                                    mem[64] = _58350 + 410
                                    mem[_58350 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58350 + 414] = _56289
                                    mem[_58350 + 446] = 0
                                    mem[_58350 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60447, stor4[cd[68]].field_512))
                                    mem[_58350 + 510] = 128
                                    mem[_58350 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58350 + 574] = mem[s + _58350 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56289, 0, address(sha3(0, stor4[cd[68]].field_0, _60447, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56291 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                        if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58355 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60465 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60467 = sha3(mem[_60465 + 32 len mem[_60465]])
                                mem[_58355 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58355 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58355 + 125] = _60467
                                mem[_58355 + 157] = stor4[cd[68]].field_512
                                mem[_58355 + 72] = 85
                                mem[_58355 + 189] = 0
                                mem[64] = _58355 + 221
                                mem[_58355 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58355 + 225] = 0
                                mem[_58355 + 257] = _56291
                                mem[_58355 + 289] = msg.sender
                                mem[_58355 + 321] = 128
                                mem[_58355 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58355 + 385] = mem[s + _58355 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60467, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60467, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56291, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58356 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55829)
                                _60469 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60471 = sha3(mem[_60469 + 32 len mem[_60469]])
                                mem[_58356 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58356 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58356 + 125] = _60471
                                mem[_58356 + 157] = stor4[cd[68]].field_512
                                mem[_58356 + 72] = 85
                                mem[_58356 + 189] = 0
                                mem[64] = _58356 + 221
                                mem[_58356 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58356 + 225] = 0
                                mem[_58356 + 257] = _56291
                                mem[_58356 + 289] = msg.sender
                                mem[_58356 + 321] = 128
                                mem[_58356 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58356 + 385] = mem[s + _58356 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60471, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60471, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56291, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                            _56675 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58353 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56675)
                                _60457 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60459 = sha3(mem[_60457 + 32 len mem[_60457]])
                                mem[_58353 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58353 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58353 + 125] = _60459
                                mem[_58353 + 157] = stor4[cd[68]].field_512
                                mem[_58353 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58353 + 221] = address(_55829)
                                    mem[_58353 + 241] = address(_55894)
                                    mem[_58353 + 189] = 40
                                    mem[_58353 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58353 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58353 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58353 + 346] = stor4[cd[68]].field_512
                                    mem[_58353 + 261] = 85
                                    mem[_58353 + 378] = 0
                                    mem[64] = _58353 + 410
                                    mem[_58353 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58353 + 414] = 0
                                    mem[_58353 + 446] = _56291
                                    mem[_58353 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60459, stor4[cd[68]].field_512))
                                    mem[_58353 + 510] = 128
                                    mem[_58353 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58353 + 574] = mem[s + _58353 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56291, address(sha3(0, stor4[cd[68]].field_0, _60459, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58353 + 221] = address(_55894)
                                    mem[_58353 + 241] = address(_55829)
                                    mem[_58353 + 189] = 40
                                    mem[_58353 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58353 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58353 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58353 + 346] = stor4[cd[68]].field_512
                                    mem[_58353 + 261] = 85
                                    mem[_58353 + 378] = 0
                                    mem[64] = _58353 + 410
                                    mem[_58353 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58353 + 414] = 0
                                    mem[_58353 + 446] = _56291
                                    mem[_58353 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60459, stor4[cd[68]].field_512))
                                    mem[_58353 + 510] = 128
                                    mem[_58353 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58353 + 574] = mem[s + _58353 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56291, address(sha3(0, stor4[cd[68]].field_0, _60459, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58354 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60461 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60463 = sha3(mem[_60461 + 32 len mem[_60461]])
                                mem[_58354 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58354 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58354 + 125] = _60463
                                mem[_58354 + 157] = stor4[cd[68]].field_512
                                mem[_58354 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58354 + 221] = address(_55829)
                                    mem[_58354 + 241] = address(_55894)
                                    mem[_58354 + 189] = 40
                                    mem[_58354 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58354 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58354 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58354 + 346] = stor4[cd[68]].field_512
                                    mem[_58354 + 261] = 85
                                    mem[_58354 + 378] = 0
                                    mem[64] = _58354 + 410
                                    mem[_58354 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58354 + 414] = 0
                                    mem[_58354 + 446] = _56291
                                    mem[_58354 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60463, stor4[cd[68]].field_512))
                                    mem[_58354 + 510] = 128
                                    mem[_58354 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58354 + 574] = mem[s + _58354 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56291, address(sha3(0, stor4[cd[68]].field_0, _60463, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58354 + 221] = address(_55894)
                                    mem[_58354 + 241] = address(_55829)
                                    mem[_58354 + 189] = 40
                                    mem[_58354 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58354 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58354 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58354 + 346] = stor4[cd[68]].field_512
                                    mem[_58354 + 261] = 85
                                    mem[_58354 + 378] = 0
                                    mem[64] = _58354 + 410
                                    mem[_58354 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58354 + 414] = 0
                                    mem[_58354 + 446] = _56291
                                    mem[_58354 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60463, stor4[cd[68]].field_512))
                                    mem[_58354 + 510] = 128
                                    mem[_58354 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58354 + 574] = mem[s + _58354 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56291, address(sha3(0, stor4[cd[68]].field_0, _60463, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58359 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60481 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60483 = sha3(mem[_60481 + 32 len mem[_60481]])
                                mem[_58359 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58359 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58359 + 125] = _60483
                                mem[_58359 + 157] = stor4[cd[68]].field_512
                                mem[_58359 + 72] = 85
                                mem[_58359 + 189] = 0
                                mem[64] = _58359 + 221
                                mem[_58359 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58359 + 225] = _56291
                                mem[_58359 + 257] = 0
                                mem[_58359 + 289] = msg.sender
                                mem[_58359 + 321] = 128
                                mem[_58359 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58359 + 385] = mem[s + _58359 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60483, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60483, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56291, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58360 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55829)
                                _60485 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60487 = sha3(mem[_60485 + 32 len mem[_60485]])
                                mem[_58360 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58360 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58360 + 125] = _60487
                                mem[_58360 + 157] = stor4[cd[68]].field_512
                                mem[_58360 + 72] = 85
                                mem[_58360 + 189] = 0
                                mem[64] = _58360 + 221
                                mem[_58360 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58360 + 225] = _56291
                                mem[_58360 + 257] = 0
                                mem[_58360 + 289] = msg.sender
                                mem[_58360 + 321] = 128
                                mem[_58360 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58360 + 385] = mem[s + _58360 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60487, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60487, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56291, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                            _56676 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58357 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_56676)
                                _60473 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60475 = sha3(mem[_60473 + 32 len mem[_60473]])
                                mem[_58357 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58357 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58357 + 125] = _60475
                                mem[_58357 + 157] = stor4[cd[68]].field_512
                                mem[_58357 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58357 + 221] = address(_55829)
                                    mem[_58357 + 241] = address(_55894)
                                    mem[_58357 + 189] = 40
                                    mem[_58357 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58357 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58357 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58357 + 346] = stor4[cd[68]].field_512
                                    mem[_58357 + 261] = 85
                                    mem[_58357 + 378] = 0
                                    mem[64] = _58357 + 410
                                    mem[_58357 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58357 + 414] = _56291
                                    mem[_58357 + 446] = 0
                                    mem[_58357 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60475, stor4[cd[68]].field_512))
                                    mem[_58357 + 510] = 128
                                    mem[_58357 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58357 + 574] = mem[s + _58357 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56291, 0, address(sha3(0, stor4[cd[68]].field_0, _60475, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58357 + 221] = address(_55894)
                                    mem[_58357 + 241] = address(_55829)
                                    mem[_58357 + 189] = 40
                                    mem[_58357 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58357 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58357 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58357 + 346] = stor4[cd[68]].field_512
                                    mem[_58357 + 261] = 85
                                    mem[_58357 + 378] = 0
                                    mem[64] = _58357 + 410
                                    mem[_58357 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58357 + 414] = _56291
                                    mem[_58357 + 446] = 0
                                    mem[_58357 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60475, stor4[cd[68]].field_512))
                                    mem[_58357 + 510] = 128
                                    mem[_58357 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58357 + 574] = mem[s + _58357 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56291, 0, address(sha3(0, stor4[cd[68]].field_0, _60475, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58358 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                                mem[mem[64] + 52] = address(_55894)
                                _60477 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60479 = sha3(mem[_60477 + 32 len mem[_60477]])
                                mem[_58358 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58358 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58358 + 125] = _60479
                                mem[_58358 + 157] = stor4[cd[68]].field_512
                                mem[_58358 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55829) == address(_55894):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55829) < address(_55894):
                                    if not address(_55829):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58358 + 221] = address(_55829)
                                    mem[_58358 + 241] = address(_55894)
                                    mem[_58358 + 189] = 40
                                    mem[_58358 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58358 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58358 + 314] = sha3(address(_55829), address(_55894))
                                    mem[_58358 + 346] = stor4[cd[68]].field_512
                                    mem[_58358 + 261] = 85
                                    mem[_58358 + 378] = 0
                                    mem[64] = _58358 + 410
                                    mem[_58358 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58358 + 414] = _56291
                                    mem[_58358 + 446] = 0
                                    mem[_58358 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60479, stor4[cd[68]].field_512))
                                    mem[_58358 + 510] = 128
                                    mem[_58358 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58358 + 574] = mem[s + _58358 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55829), address(_55894)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56291, 0, address(sha3(0, stor4[cd[68]].field_0, _60479, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55894):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58358 + 221] = address(_55894)
                                    mem[_58358 + 241] = address(_55829)
                                    mem[_58358 + 189] = 40
                                    mem[_58358 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58358 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58358 + 314] = sha3(address(_55894), address(_55829))
                                    mem[_58358 + 346] = stor4[cd[68]].field_512
                                    mem[_58358 + 261] = 85
                                    mem[_58358 + 378] = 0
                                    mem[64] = _58358 + 410
                                    mem[_58358 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58358 + 414] = _56291
                                    mem[_58358 + 446] = 0
                                    mem[_58358 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60479, stor4[cd[68]].field_512))
                                    mem[_58358 + 510] = 128
                                    mem[_58358 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58358 + 574] = mem[s + _58358 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55894), address(_55829)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56291, 0, address(sha3(0, stor4[cd[68]].field_0, _60479, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
            mem[mem[64]] = 32
            _55957 = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 64 len 32 * _55957] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55957]
            return 32, mem[mem[64] + 32 len (32 * _55957) + 32]
        require return_data.size >= 32
        require mem[_19347 + 321] == bool(mem[_19347 + 321])
        if not mem[_19347 + 321]:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        mem[64] = _19347 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
        mem[_19347 + ceil32(return_data.size) + 290] = ('cd', 36).length
        mem[_19347 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
        mem[_19347 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
        idx = 0
        while idx < ('cd', 36).length - 1:
            require idx < mem[_19347 + ceil32(return_data.size) + 290]
            _55831 = mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322]
            require idx + 1 < mem[_19347 + ceil32(return_data.size) + 290]
            _55896 = mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322]
            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56293 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                    if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58363 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60497 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60499 = sha3(mem[_60497 + 32 len mem[_60497]])
                            mem[_58363 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58363 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58363 + 125] = _60499
                            mem[_58363 + 157] = stor4[cd[68]].field_512
                            mem[_58363 + 72] = 85
                            mem[_58363 + 189] = 0
                            mem[64] = _58363 + 221
                            mem[_58363 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58363 + 225] = 0
                            mem[_58363 + 257] = _56293
                            mem[_58363 + 289] = msg.sender
                            mem[_58363 + 321] = 128
                            mem[_58363 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58363 + 385] = mem[s + _58363 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60499, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60499, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56293, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58364 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55831)
                            _60501 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60503 = sha3(mem[_60501 + 32 len mem[_60501]])
                            mem[_58364 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58364 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58364 + 125] = _60503
                            mem[_58364 + 157] = stor4[cd[68]].field_512
                            mem[_58364 + 72] = 85
                            mem[_58364 + 189] = 0
                            mem[64] = _58364 + 221
                            mem[_58364 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58364 + 225] = 0
                            mem[_58364 + 257] = _56293
                            mem[_58364 + 289] = msg.sender
                            mem[_58364 + 321] = 128
                            mem[_58364 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58364 + 385] = mem[s + _58364 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60503, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60503, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56293, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                        _56677 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58361 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56677)
                            _60489 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60491 = sha3(mem[_60489 + 32 len mem[_60489]])
                            mem[_58361 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58361 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58361 + 125] = _60491
                            mem[_58361 + 157] = stor4[cd[68]].field_512
                            mem[_58361 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58361 + 221] = address(_55831)
                                mem[_58361 + 241] = address(_55896)
                                mem[_58361 + 189] = 40
                                mem[_58361 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58361 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58361 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58361 + 346] = stor4[cd[68]].field_512
                                mem[_58361 + 261] = 85
                                mem[_58361 + 378] = 0
                                mem[64] = _58361 + 410
                                mem[_58361 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58361 + 414] = 0
                                mem[_58361 + 446] = _56293
                                mem[_58361 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60491, stor4[cd[68]].field_512))
                                mem[_58361 + 510] = 128
                                mem[_58361 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58361 + 574] = mem[s + _58361 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56293, address(sha3(0, stor4[cd[68]].field_0, _60491, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58361 + 221] = address(_55896)
                                mem[_58361 + 241] = address(_55831)
                                mem[_58361 + 189] = 40
                                mem[_58361 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58361 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58361 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58361 + 346] = stor4[cd[68]].field_512
                                mem[_58361 + 261] = 85
                                mem[_58361 + 378] = 0
                                mem[64] = _58361 + 410
                                mem[_58361 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58361 + 414] = 0
                                mem[_58361 + 446] = _56293
                                mem[_58361 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60491, stor4[cd[68]].field_512))
                                mem[_58361 + 510] = 128
                                mem[_58361 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58361 + 574] = mem[s + _58361 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56293, address(sha3(0, stor4[cd[68]].field_0, _60491, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58362 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60493 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60495 = sha3(mem[_60493 + 32 len mem[_60493]])
                            mem[_58362 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58362 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58362 + 125] = _60495
                            mem[_58362 + 157] = stor4[cd[68]].field_512
                            mem[_58362 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58362 + 221] = address(_55831)
                                mem[_58362 + 241] = address(_55896)
                                mem[_58362 + 189] = 40
                                mem[_58362 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58362 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58362 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58362 + 346] = stor4[cd[68]].field_512
                                mem[_58362 + 261] = 85
                                mem[_58362 + 378] = 0
                                mem[64] = _58362 + 410
                                mem[_58362 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58362 + 414] = 0
                                mem[_58362 + 446] = _56293
                                mem[_58362 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60495, stor4[cd[68]].field_512))
                                mem[_58362 + 510] = 128
                                mem[_58362 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58362 + 574] = mem[s + _58362 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56293, address(sha3(0, stor4[cd[68]].field_0, _60495, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58362 + 221] = address(_55896)
                                mem[_58362 + 241] = address(_55831)
                                mem[_58362 + 189] = 40
                                mem[_58362 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58362 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58362 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58362 + 346] = stor4[cd[68]].field_512
                                mem[_58362 + 261] = 85
                                mem[_58362 + 378] = 0
                                mem[64] = _58362 + 410
                                mem[_58362 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58362 + 414] = 0
                                mem[_58362 + 446] = _56293
                                mem[_58362 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60495, stor4[cd[68]].field_512))
                                mem[_58362 + 510] = 128
                                mem[_58362 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58362 + 574] = mem[s + _58362 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56293, address(sha3(0, stor4[cd[68]].field_0, _60495, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58367 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60513 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60515 = sha3(mem[_60513 + 32 len mem[_60513]])
                            mem[_58367 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58367 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58367 + 125] = _60515
                            mem[_58367 + 157] = stor4[cd[68]].field_512
                            mem[_58367 + 72] = 85
                            mem[_58367 + 189] = 0
                            mem[64] = _58367 + 221
                            mem[_58367 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58367 + 225] = _56293
                            mem[_58367 + 257] = 0
                            mem[_58367 + 289] = msg.sender
                            mem[_58367 + 321] = 128
                            mem[_58367 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58367 + 385] = mem[s + _58367 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60515, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60515, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56293, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58368 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55831)
                            _60517 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60519 = sha3(mem[_60517 + 32 len mem[_60517]])
                            mem[_58368 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58368 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58368 + 125] = _60519
                            mem[_58368 + 157] = stor4[cd[68]].field_512
                            mem[_58368 + 72] = 85
                            mem[_58368 + 189] = 0
                            mem[64] = _58368 + 221
                            mem[_58368 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58368 + 225] = _56293
                            mem[_58368 + 257] = 0
                            mem[_58368 + 289] = msg.sender
                            mem[_58368 + 321] = 128
                            mem[_58368 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58368 + 385] = mem[s + _58368 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60519, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60519, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56293, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                        _56678 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58365 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56678)
                            _60505 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60507 = sha3(mem[_60505 + 32 len mem[_60505]])
                            mem[_58365 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58365 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58365 + 125] = _60507
                            mem[_58365 + 157] = stor4[cd[68]].field_512
                            mem[_58365 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58365 + 221] = address(_55831)
                                mem[_58365 + 241] = address(_55896)
                                mem[_58365 + 189] = 40
                                mem[_58365 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58365 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58365 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58365 + 346] = stor4[cd[68]].field_512
                                mem[_58365 + 261] = 85
                                mem[_58365 + 378] = 0
                                mem[64] = _58365 + 410
                                mem[_58365 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58365 + 414] = _56293
                                mem[_58365 + 446] = 0
                                mem[_58365 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60507, stor4[cd[68]].field_512))
                                mem[_58365 + 510] = 128
                                mem[_58365 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58365 + 574] = mem[s + _58365 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56293, 0, address(sha3(0, stor4[cd[68]].field_0, _60507, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58365 + 221] = address(_55896)
                                mem[_58365 + 241] = address(_55831)
                                mem[_58365 + 189] = 40
                                mem[_58365 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58365 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58365 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58365 + 346] = stor4[cd[68]].field_512
                                mem[_58365 + 261] = 85
                                mem[_58365 + 378] = 0
                                mem[64] = _58365 + 410
                                mem[_58365 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58365 + 414] = _56293
                                mem[_58365 + 446] = 0
                                mem[_58365 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60507, stor4[cd[68]].field_512))
                                mem[_58365 + 510] = 128
                                mem[_58365 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58365 + 574] = mem[s + _58365 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56293, 0, address(sha3(0, stor4[cd[68]].field_0, _60507, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58366 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60509 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60511 = sha3(mem[_60509 + 32 len mem[_60509]])
                            mem[_58366 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58366 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58366 + 125] = _60511
                            mem[_58366 + 157] = stor4[cd[68]].field_512
                            mem[_58366 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58366 + 221] = address(_55831)
                                mem[_58366 + 241] = address(_55896)
                                mem[_58366 + 189] = 40
                                mem[_58366 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58366 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58366 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58366 + 346] = stor4[cd[68]].field_512
                                mem[_58366 + 261] = 85
                                mem[_58366 + 378] = 0
                                mem[64] = _58366 + 410
                                mem[_58366 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58366 + 414] = _56293
                                mem[_58366 + 446] = 0
                                mem[_58366 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60511, stor4[cd[68]].field_512))
                                mem[_58366 + 510] = 128
                                mem[_58366 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58366 + 574] = mem[s + _58366 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56293, 0, address(sha3(0, stor4[cd[68]].field_0, _60511, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58366 + 221] = address(_55896)
                                mem[_58366 + 241] = address(_55831)
                                mem[_58366 + 189] = 40
                                mem[_58366 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58366 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58366 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58366 + 346] = stor4[cd[68]].field_512
                                mem[_58366 + 261] = 85
                                mem[_58366 + 378] = 0
                                mem[64] = _58366 + 410
                                mem[_58366 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58366 + 414] = _56293
                                mem[_58366 + 446] = 0
                                mem[_58366 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60511, stor4[cd[68]].field_512))
                                mem[_58366 + 510] = 128
                                mem[_58366 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58366 + 574] = mem[s + _58366 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56293, 0, address(sha3(0, stor4[cd[68]].field_0, _60511, stor4[cd[68]].field_512)), 128, 0
            else:
                if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56295 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                    if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58371 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60529 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60531 = sha3(mem[_60529 + 32 len mem[_60529]])
                            mem[_58371 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58371 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58371 + 125] = _60531
                            mem[_58371 + 157] = stor4[cd[68]].field_512
                            mem[_58371 + 72] = 85
                            mem[_58371 + 189] = 0
                            mem[64] = _58371 + 221
                            mem[_58371 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58371 + 225] = 0
                            mem[_58371 + 257] = _56295
                            mem[_58371 + 289] = msg.sender
                            mem[_58371 + 321] = 128
                            mem[_58371 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58371 + 385] = mem[s + _58371 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60531, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60531, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56295, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58372 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55831)
                            _60533 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60535 = sha3(mem[_60533 + 32 len mem[_60533]])
                            mem[_58372 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58372 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58372 + 125] = _60535
                            mem[_58372 + 157] = stor4[cd[68]].field_512
                            mem[_58372 + 72] = 85
                            mem[_58372 + 189] = 0
                            mem[64] = _58372 + 221
                            mem[_58372 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58372 + 225] = 0
                            mem[_58372 + 257] = _56295
                            mem[_58372 + 289] = msg.sender
                            mem[_58372 + 321] = 128
                            mem[_58372 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58372 + 385] = mem[s + _58372 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60535, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60535, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56295, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                        _56679 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58369 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56679)
                            _60521 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60523 = sha3(mem[_60521 + 32 len mem[_60521]])
                            mem[_58369 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58369 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58369 + 125] = _60523
                            mem[_58369 + 157] = stor4[cd[68]].field_512
                            mem[_58369 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58369 + 221] = address(_55831)
                                mem[_58369 + 241] = address(_55896)
                                mem[_58369 + 189] = 40
                                mem[_58369 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58369 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58369 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58369 + 346] = stor4[cd[68]].field_512
                                mem[_58369 + 261] = 85
                                mem[_58369 + 378] = 0
                                mem[64] = _58369 + 410
                                mem[_58369 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58369 + 414] = 0
                                mem[_58369 + 446] = _56295
                                mem[_58369 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60523, stor4[cd[68]].field_512))
                                mem[_58369 + 510] = 128
                                mem[_58369 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58369 + 574] = mem[s + _58369 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56295, address(sha3(0, stor4[cd[68]].field_0, _60523, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58369 + 221] = address(_55896)
                                mem[_58369 + 241] = address(_55831)
                                mem[_58369 + 189] = 40
                                mem[_58369 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58369 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58369 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58369 + 346] = stor4[cd[68]].field_512
                                mem[_58369 + 261] = 85
                                mem[_58369 + 378] = 0
                                mem[64] = _58369 + 410
                                mem[_58369 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58369 + 414] = 0
                                mem[_58369 + 446] = _56295
                                mem[_58369 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60523, stor4[cd[68]].field_512))
                                mem[_58369 + 510] = 128
                                mem[_58369 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58369 + 574] = mem[s + _58369 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56295, address(sha3(0, stor4[cd[68]].field_0, _60523, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58370 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60525 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60527 = sha3(mem[_60525 + 32 len mem[_60525]])
                            mem[_58370 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58370 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58370 + 125] = _60527
                            mem[_58370 + 157] = stor4[cd[68]].field_512
                            mem[_58370 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58370 + 221] = address(_55831)
                                mem[_58370 + 241] = address(_55896)
                                mem[_58370 + 189] = 40
                                mem[_58370 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58370 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58370 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58370 + 346] = stor4[cd[68]].field_512
                                mem[_58370 + 261] = 85
                                mem[_58370 + 378] = 0
                                mem[64] = _58370 + 410
                                mem[_58370 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58370 + 414] = 0
                                mem[_58370 + 446] = _56295
                                mem[_58370 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60527, stor4[cd[68]].field_512))
                                mem[_58370 + 510] = 128
                                mem[_58370 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58370 + 574] = mem[s + _58370 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56295, address(sha3(0, stor4[cd[68]].field_0, _60527, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58370 + 221] = address(_55896)
                                mem[_58370 + 241] = address(_55831)
                                mem[_58370 + 189] = 40
                                mem[_58370 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58370 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58370 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58370 + 346] = stor4[cd[68]].field_512
                                mem[_58370 + 261] = 85
                                mem[_58370 + 378] = 0
                                mem[64] = _58370 + 410
                                mem[_58370 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58370 + 414] = 0
                                mem[_58370 + 446] = _56295
                                mem[_58370 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60527, stor4[cd[68]].field_512))
                                mem[_58370 + 510] = 128
                                mem[_58370 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58370 + 574] = mem[s + _58370 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56295, address(sha3(0, stor4[cd[68]].field_0, _60527, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19347 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58375 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60545 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60547 = sha3(mem[_60545 + 32 len mem[_60545]])
                            mem[_58375 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58375 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58375 + 125] = _60547
                            mem[_58375 + 157] = stor4[cd[68]].field_512
                            mem[_58375 + 72] = 85
                            mem[_58375 + 189] = 0
                            mem[64] = _58375 + 221
                            mem[_58375 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58375 + 225] = _56295
                            mem[_58375 + 257] = 0
                            mem[_58375 + 289] = msg.sender
                            mem[_58375 + 321] = 128
                            mem[_58375 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58375 + 385] = mem[s + _58375 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60547, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60547, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56295, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58376 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55831)
                            _60549 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60551 = sha3(mem[_60549 + 32 len mem[_60549]])
                            mem[_58376 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58376 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58376 + 125] = _60551
                            mem[_58376 + 157] = stor4[cd[68]].field_512
                            mem[_58376 + 72] = 85
                            mem[_58376 + 189] = 0
                            mem[64] = _58376 + 221
                            mem[_58376 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58376 + 225] = _56295
                            mem[_58376 + 257] = 0
                            mem[_58376 + 289] = msg.sender
                            mem[_58376 + 321] = 128
                            mem[_58376 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58376 + 385] = mem[s + _58376 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60551, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60551, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56295, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19347 + ceil32(return_data.size) + 290]
                        _56680 = mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58373 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56680)
                            _60537 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60539 = sha3(mem[_60537 + 32 len mem[_60537]])
                            mem[_58373 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58373 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58373 + 125] = _60539
                            mem[_58373 + 157] = stor4[cd[68]].field_512
                            mem[_58373 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58373 + 221] = address(_55831)
                                mem[_58373 + 241] = address(_55896)
                                mem[_58373 + 189] = 40
                                mem[_58373 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58373 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58373 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58373 + 346] = stor4[cd[68]].field_512
                                mem[_58373 + 261] = 85
                                mem[_58373 + 378] = 0
                                mem[64] = _58373 + 410
                                mem[_58373 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58373 + 414] = _56295
                                mem[_58373 + 446] = 0
                                mem[_58373 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60539, stor4[cd[68]].field_512))
                                mem[_58373 + 510] = 128
                                mem[_58373 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58373 + 574] = mem[s + _58373 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56295, 0, address(sha3(0, stor4[cd[68]].field_0, _60539, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58373 + 221] = address(_55896)
                                mem[_58373 + 241] = address(_55831)
                                mem[_58373 + 189] = 40
                                mem[_58373 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58373 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58373 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58373 + 346] = stor4[cd[68]].field_512
                                mem[_58373 + 261] = 85
                                mem[_58373 + 378] = 0
                                mem[64] = _58373 + 410
                                mem[_58373 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58373 + 414] = _56295
                                mem[_58373 + 446] = 0
                                mem[_58373 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60539, stor4[cd[68]].field_512))
                                mem[_58373 + 510] = 128
                                mem[_58373 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58373 + 574] = mem[s + _58373 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56295, 0, address(sha3(0, stor4[cd[68]].field_0, _60539, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58374 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19347 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55896)
                            _60541 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60543 = sha3(mem[_60541 + 32 len mem[_60541]])
                            mem[_58374 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58374 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58374 + 125] = _60543
                            mem[_58374 + 157] = stor4[cd[68]].field_512
                            mem[_58374 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55831) == address(_55896):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55831) < address(_55896):
                                if not address(_55831):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58374 + 221] = address(_55831)
                                mem[_58374 + 241] = address(_55896)
                                mem[_58374 + 189] = 40
                                mem[_58374 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58374 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58374 + 314] = sha3(address(_55831), address(_55896))
                                mem[_58374 + 346] = stor4[cd[68]].field_512
                                mem[_58374 + 261] = 85
                                mem[_58374 + 378] = 0
                                mem[64] = _58374 + 410
                                mem[_58374 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58374 + 414] = _56295
                                mem[_58374 + 446] = 0
                                mem[_58374 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60543, stor4[cd[68]].field_512))
                                mem[_58374 + 510] = 128
                                mem[_58374 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58374 + 574] = mem[s + _58374 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55831), address(_55896)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56295, 0, address(sha3(0, stor4[cd[68]].field_0, _60543, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55896):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58374 + 221] = address(_55896)
                                mem[_58374 + 241] = address(_55831)
                                mem[_58374 + 189] = 40
                                mem[_58374 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58374 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58374 + 314] = sha3(address(_55896), address(_55831))
                                mem[_58374 + 346] = stor4[cd[68]].field_512
                                mem[_58374 + 261] = 85
                                mem[_58374 + 378] = 0
                                mem[64] = _58374 + 410
                                mem[_58374 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58374 + 414] = _56295
                                mem[_58374 + 446] = 0
                                mem[_58374 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60543, stor4[cd[68]].field_512))
                                mem[_58374 + 510] = 128
                                mem[_58374 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58374 + 574] = mem[s + _58374 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55896), address(_55831)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56295, 0, address(sha3(0, stor4[cd[68]].field_0, _60543, stor4[cd[68]].field_512)), 128, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            idx = idx + 1
            continue 
        mem[mem[64]] = 32
        _55959 = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 64 len 32 * _55959] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55959]
        return 32, mem[mem[64] + 32 len (32 * _55959) + 32]
    if not address(('cd', 36)[1]):
        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
    _19348 = mem[64]
    mem[mem[64] + 32] = address(('cd', 36)[1])
    mem[mem[64] + 52] = address(('cd', 36)[0])
    _19429 = mem[64]
    mem[mem[64]] = 40
    mem[64] = mem[64] + 72
    _19431 = sha3(mem[_19429 + 32 len mem[_19429]])
    mem[_19348 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
    mem[_19348 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
    mem[_19348 + 125] = _19431
    mem[_19348 + 157] = stor4[cd[68]].field_512
    mem[_19348 + 72] = 85
    require 0 < mem[(32 * ('cd', 36).length) + 128]
    _19500 = mem[(32 * ('cd', 36).length) + 160]
    mem[_19348 + 225] = address(sha3(0, stor4[cd[68]].field_0, _19431, stor4[cd[68]].field_512))
    mem[_19348 + 257] = _19500
    mem[_19348 + 189] = 68
    mem[_19348 + 221 len 4] = unknown_0xa9059cbb(?????)
    mem[_19348 + 289 len 96] = 0, address(sha3(0, stor4[cd[68]].field_0, _19431, stor4[cd[68]].field_512)), _19500, mem[_19348 + 289 len 28]
    mem[_19348 + 357] = 0
    call address(('cd', 36)[0]) with:
         gas gas_remaining wei
        args mem[_19348 + 293 len 64]
    if not return_data.size:
        if not ext_call.success:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        if not mem[96]:
            mem[64] = _19348 + (32 * ('cd', 36).length) + 321
            mem[_19348 + 289] = ('cd', 36).length
            mem[_19348 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
            mem[_19348 + (32 * ('cd', 36).length) + 321] = 0
            idx = 0
            while idx < ('cd', 36).length - 1:
                require idx < mem[_19348 + 289]
                _55841 = mem[(32 * idx) + _19348 + 321]
                require idx + 1 < mem[_19348 + 289]
                _55906 = mem[(32 * idx + 1) + _19348 + 321]
                if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                    if not mem[(32 * idx) + _19348 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56313 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx) + _19348 + 333 len 20]:
                        if idx >= mem[_19348 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                if not mem[(32 * idx) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58443 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60817 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60819 = sha3(mem[_60817 + 32 len mem[_60817]])
                                mem[_58443 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58443 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58443 + 125] = _60819
                                mem[_58443 + 157] = stor4[cd[68]].field_512
                                mem[_58443 + 72] = 85
                                mem[_58443 + 189] = 0
                                mem[64] = _58443 + 221
                                mem[_58443 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58443 + 225] = 0
                                mem[_58443 + 257] = _56313
                                mem[_58443 + 289] = msg.sender
                                mem[_58443 + 321] = 128
                                mem[_58443 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58443 + 385] = mem[s + _58443 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60819, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60819, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56313, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58444 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55841)
                                _60821 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60823 = sha3(mem[_60821 + 32 len mem[_60821]])
                                mem[_58444 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58444 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58444 + 125] = _60823
                                mem[_58444 + 157] = stor4[cd[68]].field_512
                                mem[_58444 + 72] = 85
                                mem[_58444 + 189] = 0
                                mem[64] = _58444 + 221
                                mem[_58444 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58444 + 225] = 0
                                mem[_58444 + 257] = _56313
                                mem[_58444 + 289] = msg.sender
                                mem[_58444 + 321] = 128
                                mem[_58444 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58444 + 385] = mem[s + _58444 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60823, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60823, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56313, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19348 + 289]
                            _56697 = mem[(32 * idx + 2) + _19348 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58441 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_56697)
                                _60809 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60811 = sha3(mem[_60809 + 32 len mem[_60809]])
                                mem[_58441 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58441 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58441 + 125] = _60811
                                mem[_58441 + 157] = stor4[cd[68]].field_512
                                mem[_58441 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58441 + 221] = address(_55841)
                                    mem[_58441 + 241] = address(_55906)
                                    mem[_58441 + 189] = 40
                                    mem[_58441 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58441 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58441 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58441 + 346] = stor4[cd[68]].field_512
                                    mem[_58441 + 261] = 85
                                    mem[_58441 + 378] = 0
                                    mem[64] = _58441 + 410
                                    mem[_58441 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58441 + 414] = 0
                                    mem[_58441 + 446] = _56313
                                    mem[_58441 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60811, stor4[cd[68]].field_512))
                                    mem[_58441 + 510] = 128
                                    mem[_58441 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58441 + 574] = mem[s + _58441 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56313, address(sha3(0, stor4[cd[68]].field_0, _60811, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58441 + 221] = address(_55906)
                                    mem[_58441 + 241] = address(_55841)
                                    mem[_58441 + 189] = 40
                                    mem[_58441 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58441 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58441 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58441 + 346] = stor4[cd[68]].field_512
                                    mem[_58441 + 261] = 85
                                    mem[_58441 + 378] = 0
                                    mem[64] = _58441 + 410
                                    mem[_58441 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58441 + 414] = 0
                                    mem[_58441 + 446] = _56313
                                    mem[_58441 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60811, stor4[cd[68]].field_512))
                                    mem[_58441 + 510] = 128
                                    mem[_58441 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58441 + 574] = mem[s + _58441 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56313, address(sha3(0, stor4[cd[68]].field_0, _60811, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58442 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60813 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60815 = sha3(mem[_60813 + 32 len mem[_60813]])
                                mem[_58442 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58442 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58442 + 125] = _60815
                                mem[_58442 + 157] = stor4[cd[68]].field_512
                                mem[_58442 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58442 + 221] = address(_55841)
                                    mem[_58442 + 241] = address(_55906)
                                    mem[_58442 + 189] = 40
                                    mem[_58442 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58442 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58442 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58442 + 346] = stor4[cd[68]].field_512
                                    mem[_58442 + 261] = 85
                                    mem[_58442 + 378] = 0
                                    mem[64] = _58442 + 410
                                    mem[_58442 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58442 + 414] = 0
                                    mem[_58442 + 446] = _56313
                                    mem[_58442 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60815, stor4[cd[68]].field_512))
                                    mem[_58442 + 510] = 128
                                    mem[_58442 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58442 + 574] = mem[s + _58442 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56313, address(sha3(0, stor4[cd[68]].field_0, _60815, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58442 + 221] = address(_55906)
                                    mem[_58442 + 241] = address(_55841)
                                    mem[_58442 + 189] = 40
                                    mem[_58442 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58442 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58442 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58442 + 346] = stor4[cd[68]].field_512
                                    mem[_58442 + 261] = 85
                                    mem[_58442 + 378] = 0
                                    mem[64] = _58442 + 410
                                    mem[_58442 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58442 + 414] = 0
                                    mem[_58442 + 446] = _56313
                                    mem[_58442 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60815, stor4[cd[68]].field_512))
                                    mem[_58442 + 510] = 128
                                    mem[_58442 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58442 + 574] = mem[s + _58442 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56313, address(sha3(0, stor4[cd[68]].field_0, _60815, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19348 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                if not mem[(32 * idx) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58447 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60833 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60835 = sha3(mem[_60833 + 32 len mem[_60833]])
                                mem[_58447 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58447 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58447 + 125] = _60835
                                mem[_58447 + 157] = stor4[cd[68]].field_512
                                mem[_58447 + 72] = 85
                                mem[_58447 + 189] = 0
                                mem[64] = _58447 + 221
                                mem[_58447 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58447 + 225] = _56313
                                mem[_58447 + 257] = 0
                                mem[_58447 + 289] = msg.sender
                                mem[_58447 + 321] = 128
                                mem[_58447 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58447 + 385] = mem[s + _58447 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60835, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60835, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56313, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58448 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55841)
                                _60837 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60839 = sha3(mem[_60837 + 32 len mem[_60837]])
                                mem[_58448 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58448 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58448 + 125] = _60839
                                mem[_58448 + 157] = stor4[cd[68]].field_512
                                mem[_58448 + 72] = 85
                                mem[_58448 + 189] = 0
                                mem[64] = _58448 + 221
                                mem[_58448 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58448 + 225] = _56313
                                mem[_58448 + 257] = 0
                                mem[_58448 + 289] = msg.sender
                                mem[_58448 + 321] = 128
                                mem[_58448 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58448 + 385] = mem[s + _58448 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60839, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60839, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56313, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19348 + 289]
                            _56698 = mem[(32 * idx + 2) + _19348 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58445 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_56698)
                                _60825 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60827 = sha3(mem[_60825 + 32 len mem[_60825]])
                                mem[_58445 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58445 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58445 + 125] = _60827
                                mem[_58445 + 157] = stor4[cd[68]].field_512
                                mem[_58445 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58445 + 221] = address(_55841)
                                    mem[_58445 + 241] = address(_55906)
                                    mem[_58445 + 189] = 40
                                    mem[_58445 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58445 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58445 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58445 + 346] = stor4[cd[68]].field_512
                                    mem[_58445 + 261] = 85
                                    mem[_58445 + 378] = 0
                                    mem[64] = _58445 + 410
                                    mem[_58445 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58445 + 414] = _56313
                                    mem[_58445 + 446] = 0
                                    mem[_58445 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60827, stor4[cd[68]].field_512))
                                    mem[_58445 + 510] = 128
                                    mem[_58445 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58445 + 574] = mem[s + _58445 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56313, 0, address(sha3(0, stor4[cd[68]].field_0, _60827, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58445 + 221] = address(_55906)
                                    mem[_58445 + 241] = address(_55841)
                                    mem[_58445 + 189] = 40
                                    mem[_58445 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58445 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58445 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58445 + 346] = stor4[cd[68]].field_512
                                    mem[_58445 + 261] = 85
                                    mem[_58445 + 378] = 0
                                    mem[64] = _58445 + 410
                                    mem[_58445 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58445 + 414] = _56313
                                    mem[_58445 + 446] = 0
                                    mem[_58445 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60827, stor4[cd[68]].field_512))
                                    mem[_58445 + 510] = 128
                                    mem[_58445 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58445 + 574] = mem[s + _58445 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56313, 0, address(sha3(0, stor4[cd[68]].field_0, _60827, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58446 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60829 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60831 = sha3(mem[_60829 + 32 len mem[_60829]])
                                mem[_58446 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58446 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58446 + 125] = _60831
                                mem[_58446 + 157] = stor4[cd[68]].field_512
                                mem[_58446 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58446 + 221] = address(_55841)
                                    mem[_58446 + 241] = address(_55906)
                                    mem[_58446 + 189] = 40
                                    mem[_58446 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58446 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58446 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58446 + 346] = stor4[cd[68]].field_512
                                    mem[_58446 + 261] = 85
                                    mem[_58446 + 378] = 0
                                    mem[64] = _58446 + 410
                                    mem[_58446 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58446 + 414] = _56313
                                    mem[_58446 + 446] = 0
                                    mem[_58446 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60831, stor4[cd[68]].field_512))
                                    mem[_58446 + 510] = 128
                                    mem[_58446 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58446 + 574] = mem[s + _58446 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56313, 0, address(sha3(0, stor4[cd[68]].field_0, _60831, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58446 + 221] = address(_55906)
                                    mem[_58446 + 241] = address(_55841)
                                    mem[_58446 + 189] = 40
                                    mem[_58446 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58446 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58446 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58446 + 346] = stor4[cd[68]].field_512
                                    mem[_58446 + 261] = 85
                                    mem[_58446 + 378] = 0
                                    mem[64] = _58446 + 410
                                    mem[_58446 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58446 + 414] = _56313
                                    mem[_58446 + 446] = 0
                                    mem[_58446 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60831, stor4[cd[68]].field_512))
                                    mem[_58446 + 510] = 128
                                    mem[_58446 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58446 + 574] = mem[s + _58446 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56313, 0, address(sha3(0, stor4[cd[68]].field_0, _60831, stor4[cd[68]].field_512)), 128, 0
                else:
                    if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                    require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                    _56315 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                    if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                        if idx >= mem[_19348 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                if not mem[(32 * idx) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58451 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60849 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60851 = sha3(mem[_60849 + 32 len mem[_60849]])
                                mem[_58451 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58451 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58451 + 125] = _60851
                                mem[_58451 + 157] = stor4[cd[68]].field_512
                                mem[_58451 + 72] = 85
                                mem[_58451 + 189] = 0
                                mem[64] = _58451 + 221
                                mem[_58451 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58451 + 225] = 0
                                mem[_58451 + 257] = _56315
                                mem[_58451 + 289] = msg.sender
                                mem[_58451 + 321] = 128
                                mem[_58451 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58451 + 385] = mem[s + _58451 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60851, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60851, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56315, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58452 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55841)
                                _60853 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60855 = sha3(mem[_60853 + 32 len mem[_60853]])
                                mem[_58452 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58452 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58452 + 125] = _60855
                                mem[_58452 + 157] = stor4[cd[68]].field_512
                                mem[_58452 + 72] = 85
                                mem[_58452 + 189] = 0
                                mem[64] = _58452 + 221
                                mem[_58452 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58452 + 225] = 0
                                mem[_58452 + 257] = _56315
                                mem[_58452 + 289] = msg.sender
                                mem[_58452 + 321] = 128
                                mem[_58452 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58452 + 385] = mem[s + _58452 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60855, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60855, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56315, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19348 + 289]
                            _56699 = mem[(32 * idx + 2) + _19348 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58449 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_56699)
                                _60841 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60843 = sha3(mem[_60841 + 32 len mem[_60841]])
                                mem[_58449 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58449 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58449 + 125] = _60843
                                mem[_58449 + 157] = stor4[cd[68]].field_512
                                mem[_58449 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58449 + 221] = address(_55841)
                                    mem[_58449 + 241] = address(_55906)
                                    mem[_58449 + 189] = 40
                                    mem[_58449 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58449 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58449 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58449 + 346] = stor4[cd[68]].field_512
                                    mem[_58449 + 261] = 85
                                    mem[_58449 + 378] = 0
                                    mem[64] = _58449 + 410
                                    mem[_58449 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58449 + 414] = 0
                                    mem[_58449 + 446] = _56315
                                    mem[_58449 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60843, stor4[cd[68]].field_512))
                                    mem[_58449 + 510] = 128
                                    mem[_58449 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58449 + 574] = mem[s + _58449 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56315, address(sha3(0, stor4[cd[68]].field_0, _60843, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58449 + 221] = address(_55906)
                                    mem[_58449 + 241] = address(_55841)
                                    mem[_58449 + 189] = 40
                                    mem[_58449 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58449 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58449 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58449 + 346] = stor4[cd[68]].field_512
                                    mem[_58449 + 261] = 85
                                    mem[_58449 + 378] = 0
                                    mem[64] = _58449 + 410
                                    mem[_58449 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58449 + 414] = 0
                                    mem[_58449 + 446] = _56315
                                    mem[_58449 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60843, stor4[cd[68]].field_512))
                                    mem[_58449 + 510] = 128
                                    mem[_58449 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58449 + 574] = mem[s + _58449 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56315, address(sha3(0, stor4[cd[68]].field_0, _60843, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58450 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60845 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60847 = sha3(mem[_60845 + 32 len mem[_60845]])
                                mem[_58450 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58450 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58450 + 125] = _60847
                                mem[_58450 + 157] = stor4[cd[68]].field_512
                                mem[_58450 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58450 + 221] = address(_55841)
                                    mem[_58450 + 241] = address(_55906)
                                    mem[_58450 + 189] = 40
                                    mem[_58450 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58450 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58450 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58450 + 346] = stor4[cd[68]].field_512
                                    mem[_58450 + 261] = 85
                                    mem[_58450 + 378] = 0
                                    mem[64] = _58450 + 410
                                    mem[_58450 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58450 + 414] = 0
                                    mem[_58450 + 446] = _56315
                                    mem[_58450 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60847, stor4[cd[68]].field_512))
                                    mem[_58450 + 510] = 128
                                    mem[_58450 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58450 + 574] = mem[s + _58450 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56315, address(sha3(0, stor4[cd[68]].field_0, _60847, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58450 + 221] = address(_55906)
                                    mem[_58450 + 241] = address(_55841)
                                    mem[_58450 + 189] = 40
                                    mem[_58450 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58450 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58450 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58450 + 346] = stor4[cd[68]].field_512
                                    mem[_58450 + 261] = 85
                                    mem[_58450 + 378] = 0
                                    mem[64] = _58450 + 410
                                    mem[_58450 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58450 + 414] = 0
                                    mem[_58450 + 446] = _56315
                                    mem[_58450 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60847, stor4[cd[68]].field_512))
                                    mem[_58450 + 510] = 128
                                    mem[_58450 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58450 + 574] = mem[s + _58450 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, _56315, address(sha3(0, stor4[cd[68]].field_0, _60847, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if idx >= mem[_19348 + 289] - 2:
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                if not mem[(32 * idx) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58455 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60865 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60867 = sha3(mem[_60865 + 32 len mem[_60865]])
                                mem[_58455 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58455 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58455 + 125] = _60867
                                mem[_58455 + 157] = stor4[cd[68]].field_512
                                mem[_58455 + 72] = 85
                                mem[_58455 + 189] = 0
                                mem[64] = _58455 + 221
                                mem[_58455 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58455 + 225] = _56315
                                mem[_58455 + 257] = 0
                                mem[_58455 + 289] = msg.sender
                                mem[_58455 + 321] = 128
                                mem[_58455 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58455 + 385] = mem[s + _58455 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60867, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60867, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56315, 0, msg.sender, 128, 0
                            else:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58456 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55841)
                                _60869 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60871 = sha3(mem[_60869 + 32 len mem[_60869]])
                                mem[_58456 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58456 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58456 + 125] = _60871
                                mem[_58456 + 157] = stor4[cd[68]].field_512
                                mem[_58456 + 72] = 85
                                mem[_58456 + 189] = 0
                                mem[64] = _58456 + 221
                                mem[_58456 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58456 + 225] = _56315
                                mem[_58456 + 257] = 0
                                mem[_58456 + 289] = msg.sender
                                mem[_58456 + 321] = 128
                                mem[_58456 + 353] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58456 + 385] = mem[s + _58456 + 221]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60871, stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, _60871, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56315, 0, msg.sender, 128, 0
                        else:
                            require idx + 2 < mem[_19348 + 289]
                            _56700 = mem[(32 * idx + 2) + _19348 + 321]
                            mem[0] = cd[68]
                            mem[32] = 4
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58453 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                                mem[mem[64] + 52] = address(_56700)
                                _60857 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60859 = sha3(mem[_60857 + 32 len mem[_60857]])
                                mem[_58453 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58453 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58453 + 125] = _60859
                                mem[_58453 + 157] = stor4[cd[68]].field_512
                                mem[_58453 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58453 + 221] = address(_55841)
                                    mem[_58453 + 241] = address(_55906)
                                    mem[_58453 + 189] = 40
                                    mem[_58453 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58453 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58453 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58453 + 346] = stor4[cd[68]].field_512
                                    mem[_58453 + 261] = 85
                                    mem[_58453 + 378] = 0
                                    mem[64] = _58453 + 410
                                    mem[_58453 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58453 + 414] = _56315
                                    mem[_58453 + 446] = 0
                                    mem[_58453 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60859, stor4[cd[68]].field_512))
                                    mem[_58453 + 510] = 128
                                    mem[_58453 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58453 + 574] = mem[s + _58453 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56315, 0, address(sha3(0, stor4[cd[68]].field_0, _60859, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58453 + 221] = address(_55906)
                                    mem[_58453 + 241] = address(_55841)
                                    mem[_58453 + 189] = 40
                                    mem[_58453 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58453 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58453 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58453 + 346] = stor4[cd[68]].field_512
                                    mem[_58453 + 261] = 85
                                    mem[_58453 + 378] = 0
                                    mem[64] = _58453 + 410
                                    mem[_58453 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58453 + 414] = _56315
                                    mem[_58453 + 446] = 0
                                    mem[_58453 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60859, stor4[cd[68]].field_512))
                                    mem[_58453 + 510] = 128
                                    mem[_58453 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58453 + 574] = mem[s + _58453 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56315, 0, address(sha3(0, stor4[cd[68]].field_0, _60859, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                _58454 = mem[64]
                                mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                                mem[mem[64] + 52] = address(_55906)
                                _60861 = mem[64]
                                mem[mem[64]] = 40
                                mem[64] = mem[64] + 72
                                _60863 = sha3(mem[_60861 + 32 len mem[_60861]])
                                mem[_58454 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58454 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58454 + 125] = _60863
                                mem[_58454 + 157] = stor4[cd[68]].field_512
                                mem[_58454 + 72] = 85
                                mem[0] = cd[68]
                                mem[32] = 4
                                if address(_55841) == address(_55906):
                                    revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                                if address(_55841) < address(_55906):
                                    if not address(_55841):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58454 + 221] = address(_55841)
                                    mem[_58454 + 241] = address(_55906)
                                    mem[_58454 + 189] = 40
                                    mem[_58454 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58454 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58454 + 314] = sha3(address(_55841), address(_55906))
                                    mem[_58454 + 346] = stor4[cd[68]].field_512
                                    mem[_58454 + 261] = 85
                                    mem[_58454 + 378] = 0
                                    mem[64] = _58454 + 410
                                    mem[_58454 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58454 + 414] = _56315
                                    mem[_58454 + 446] = 0
                                    mem[_58454 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60863, stor4[cd[68]].field_512))
                                    mem[_58454 + 510] = 128
                                    mem[_58454 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58454 + 574] = mem[s + _58454 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55841), address(_55906)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56315, 0, address(sha3(0, stor4[cd[68]].field_0, _60863, stor4[cd[68]].field_512)), 128, 0
                                else:
                                    if not address(_55906):
                                        revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                    mem[_58454 + 221] = address(_55906)
                                    mem[_58454 + 241] = address(_55841)
                                    mem[_58454 + 189] = 40
                                    mem[_58454 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                    mem[_58454 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                    mem[_58454 + 314] = sha3(address(_55906), address(_55841))
                                    mem[_58454 + 346] = stor4[cd[68]].field_512
                                    mem[_58454 + 261] = 85
                                    mem[_58454 + 378] = 0
                                    mem[64] = _58454 + 410
                                    mem[_58454 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                    mem[_58454 + 414] = _56315
                                    mem[_58454 + 446] = 0
                                    mem[_58454 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60863, stor4[cd[68]].field_512))
                                    mem[_58454 + 510] = 128
                                    mem[_58454 + 542] = 0
                                    s = 0
                                    while s < 0:
                                        mem[s + _58454 + 574] = mem[s + _58454 + 410]
                                        s = s + 32
                                        continue 
                                    require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)))
                                    call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55906), address(_55841)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args _56315, 0, address(sha3(0, stor4[cd[68]].field_0, _60863, stor4[cd[68]].field_512)), 128, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                idx = idx + 1
                continue 
            mem[mem[64]] = 32
            _55969 = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
            mem[mem[64] + 64 len 32 * _55969] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55969]
            return 32, mem[mem[64] + 32 len (32 * _55969) + 32]
        require mem[96] >= 32
        require mem[128] == bool(mem[128])
        if not mem[128]:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        mem[64] = _19348 + (32 * ('cd', 36).length) + 321
        mem[_19348 + 289] = ('cd', 36).length
        mem[_19348 + 321 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
        mem[_19348 + (32 * ('cd', 36).length) + 321] = 0
        idx = 0
        while idx < ('cd', 36).length - 1:
            require idx < mem[_19348 + 289]
            _55843 = mem[(32 * idx) + _19348 + 321]
            require idx + 1 < mem[_19348 + 289]
            _55908 = mem[(32 * idx + 1) + _19348 + 321]
            if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                if not mem[(32 * idx) + _19348 + 333 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56317 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx) + _19348 + 333 len 20]:
                    if idx >= mem[_19348 + 289] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            if not mem[(32 * idx) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58459 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60881 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60883 = sha3(mem[_60881 + 32 len mem[_60881]])
                            mem[_58459 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58459 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58459 + 125] = _60883
                            mem[_58459 + 157] = stor4[cd[68]].field_512
                            mem[_58459 + 72] = 85
                            mem[_58459 + 189] = 0
                            mem[64] = _58459 + 221
                            mem[_58459 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58459 + 225] = 0
                            mem[_58459 + 257] = _56317
                            mem[_58459 + 289] = msg.sender
                            mem[_58459 + 321] = 128
                            mem[_58459 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58459 + 385] = mem[s + _58459 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60883, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60883, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56317, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58460 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55843)
                            _60885 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60887 = sha3(mem[_60885 + 32 len mem[_60885]])
                            mem[_58460 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58460 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58460 + 125] = _60887
                            mem[_58460 + 157] = stor4[cd[68]].field_512
                            mem[_58460 + 72] = 85
                            mem[_58460 + 189] = 0
                            mem[64] = _58460 + 221
                            mem[_58460 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58460 + 225] = 0
                            mem[_58460 + 257] = _56317
                            mem[_58460 + 289] = msg.sender
                            mem[_58460 + 321] = 128
                            mem[_58460 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58460 + 385] = mem[s + _58460 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60887, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60887, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56317, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + 289]
                        _56701 = mem[(32 * idx + 2) + _19348 + 321]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58457 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_56701)
                            _60873 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60875 = sha3(mem[_60873 + 32 len mem[_60873]])
                            mem[_58457 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58457 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58457 + 125] = _60875
                            mem[_58457 + 157] = stor4[cd[68]].field_512
                            mem[_58457 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58457 + 221] = address(_55843)
                                mem[_58457 + 241] = address(_55908)
                                mem[_58457 + 189] = 40
                                mem[_58457 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58457 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58457 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58457 + 346] = stor4[cd[68]].field_512
                                mem[_58457 + 261] = 85
                                mem[_58457 + 378] = 0
                                mem[64] = _58457 + 410
                                mem[_58457 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58457 + 414] = 0
                                mem[_58457 + 446] = _56317
                                mem[_58457 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60875, stor4[cd[68]].field_512))
                                mem[_58457 + 510] = 128
                                mem[_58457 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58457 + 574] = mem[s + _58457 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56317, address(sha3(0, stor4[cd[68]].field_0, _60875, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58457 + 221] = address(_55908)
                                mem[_58457 + 241] = address(_55843)
                                mem[_58457 + 189] = 40
                                mem[_58457 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58457 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58457 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58457 + 346] = stor4[cd[68]].field_512
                                mem[_58457 + 261] = 85
                                mem[_58457 + 378] = 0
                                mem[64] = _58457 + 410
                                mem[_58457 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58457 + 414] = 0
                                mem[_58457 + 446] = _56317
                                mem[_58457 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60875, stor4[cd[68]].field_512))
                                mem[_58457 + 510] = 128
                                mem[_58457 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58457 + 574] = mem[s + _58457 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56317, address(sha3(0, stor4[cd[68]].field_0, _60875, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58458 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60877 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60879 = sha3(mem[_60877 + 32 len mem[_60877]])
                            mem[_58458 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58458 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58458 + 125] = _60879
                            mem[_58458 + 157] = stor4[cd[68]].field_512
                            mem[_58458 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58458 + 221] = address(_55843)
                                mem[_58458 + 241] = address(_55908)
                                mem[_58458 + 189] = 40
                                mem[_58458 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58458 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58458 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58458 + 346] = stor4[cd[68]].field_512
                                mem[_58458 + 261] = 85
                                mem[_58458 + 378] = 0
                                mem[64] = _58458 + 410
                                mem[_58458 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58458 + 414] = 0
                                mem[_58458 + 446] = _56317
                                mem[_58458 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60879, stor4[cd[68]].field_512))
                                mem[_58458 + 510] = 128
                                mem[_58458 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58458 + 574] = mem[s + _58458 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56317, address(sha3(0, stor4[cd[68]].field_0, _60879, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58458 + 221] = address(_55908)
                                mem[_58458 + 241] = address(_55843)
                                mem[_58458 + 189] = 40
                                mem[_58458 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58458 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58458 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58458 + 346] = stor4[cd[68]].field_512
                                mem[_58458 + 261] = 85
                                mem[_58458 + 378] = 0
                                mem[64] = _58458 + 410
                                mem[_58458 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58458 + 414] = 0
                                mem[_58458 + 446] = _56317
                                mem[_58458 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60879, stor4[cd[68]].field_512))
                                mem[_58458 + 510] = 128
                                mem[_58458 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58458 + 574] = mem[s + _58458 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56317, address(sha3(0, stor4[cd[68]].field_0, _60879, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19348 + 289] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            if not mem[(32 * idx) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58463 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60897 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60899 = sha3(mem[_60897 + 32 len mem[_60897]])
                            mem[_58463 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58463 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58463 + 125] = _60899
                            mem[_58463 + 157] = stor4[cd[68]].field_512
                            mem[_58463 + 72] = 85
                            mem[_58463 + 189] = 0
                            mem[64] = _58463 + 221
                            mem[_58463 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58463 + 225] = _56317
                            mem[_58463 + 257] = 0
                            mem[_58463 + 289] = msg.sender
                            mem[_58463 + 321] = 128
                            mem[_58463 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58463 + 385] = mem[s + _58463 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60899, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60899, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56317, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58464 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55843)
                            _60901 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60903 = sha3(mem[_60901 + 32 len mem[_60901]])
                            mem[_58464 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58464 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58464 + 125] = _60903
                            mem[_58464 + 157] = stor4[cd[68]].field_512
                            mem[_58464 + 72] = 85
                            mem[_58464 + 189] = 0
                            mem[64] = _58464 + 221
                            mem[_58464 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58464 + 225] = _56317
                            mem[_58464 + 257] = 0
                            mem[_58464 + 289] = msg.sender
                            mem[_58464 + 321] = 128
                            mem[_58464 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58464 + 385] = mem[s + _58464 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60903, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60903, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56317, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + 289]
                        _56702 = mem[(32 * idx + 2) + _19348 + 321]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58461 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_56702)
                            _60889 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60891 = sha3(mem[_60889 + 32 len mem[_60889]])
                            mem[_58461 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58461 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58461 + 125] = _60891
                            mem[_58461 + 157] = stor4[cd[68]].field_512
                            mem[_58461 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58461 + 221] = address(_55843)
                                mem[_58461 + 241] = address(_55908)
                                mem[_58461 + 189] = 40
                                mem[_58461 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58461 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58461 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58461 + 346] = stor4[cd[68]].field_512
                                mem[_58461 + 261] = 85
                                mem[_58461 + 378] = 0
                                mem[64] = _58461 + 410
                                mem[_58461 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58461 + 414] = _56317
                                mem[_58461 + 446] = 0
                                mem[_58461 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60891, stor4[cd[68]].field_512))
                                mem[_58461 + 510] = 128
                                mem[_58461 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58461 + 574] = mem[s + _58461 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56317, 0, address(sha3(0, stor4[cd[68]].field_0, _60891, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58461 + 221] = address(_55908)
                                mem[_58461 + 241] = address(_55843)
                                mem[_58461 + 189] = 40
                                mem[_58461 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58461 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58461 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58461 + 346] = stor4[cd[68]].field_512
                                mem[_58461 + 261] = 85
                                mem[_58461 + 378] = 0
                                mem[64] = _58461 + 410
                                mem[_58461 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58461 + 414] = _56317
                                mem[_58461 + 446] = 0
                                mem[_58461 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60891, stor4[cd[68]].field_512))
                                mem[_58461 + 510] = 128
                                mem[_58461 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58461 + 574] = mem[s + _58461 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56317, 0, address(sha3(0, stor4[cd[68]].field_0, _60891, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58462 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60893 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60895 = sha3(mem[_60893 + 32 len mem[_60893]])
                            mem[_58462 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58462 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58462 + 125] = _60895
                            mem[_58462 + 157] = stor4[cd[68]].field_512
                            mem[_58462 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58462 + 221] = address(_55843)
                                mem[_58462 + 241] = address(_55908)
                                mem[_58462 + 189] = 40
                                mem[_58462 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58462 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58462 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58462 + 346] = stor4[cd[68]].field_512
                                mem[_58462 + 261] = 85
                                mem[_58462 + 378] = 0
                                mem[64] = _58462 + 410
                                mem[_58462 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58462 + 414] = _56317
                                mem[_58462 + 446] = 0
                                mem[_58462 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60895, stor4[cd[68]].field_512))
                                mem[_58462 + 510] = 128
                                mem[_58462 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58462 + 574] = mem[s + _58462 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56317, 0, address(sha3(0, stor4[cd[68]].field_0, _60895, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58462 + 221] = address(_55908)
                                mem[_58462 + 241] = address(_55843)
                                mem[_58462 + 189] = 40
                                mem[_58462 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58462 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58462 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58462 + 346] = stor4[cd[68]].field_512
                                mem[_58462 + 261] = 85
                                mem[_58462 + 378] = 0
                                mem[64] = _58462 + 410
                                mem[_58462 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58462 + 414] = _56317
                                mem[_58462 + 446] = 0
                                mem[_58462 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60895, stor4[cd[68]].field_512))
                                mem[_58462 + 510] = 128
                                mem[_58462 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58462 + 574] = mem[s + _58462 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56317, 0, address(sha3(0, stor4[cd[68]].field_0, _60895, stor4[cd[68]].field_512)), 128, 0
            else:
                if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56319 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                    if idx >= mem[_19348 + 289] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            if not mem[(32 * idx) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58467 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60913 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60915 = sha3(mem[_60913 + 32 len mem[_60913]])
                            mem[_58467 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58467 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58467 + 125] = _60915
                            mem[_58467 + 157] = stor4[cd[68]].field_512
                            mem[_58467 + 72] = 85
                            mem[_58467 + 189] = 0
                            mem[64] = _58467 + 221
                            mem[_58467 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58467 + 225] = 0
                            mem[_58467 + 257] = _56319
                            mem[_58467 + 289] = msg.sender
                            mem[_58467 + 321] = 128
                            mem[_58467 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58467 + 385] = mem[s + _58467 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60915, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60915, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56319, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58468 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55843)
                            _60917 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60919 = sha3(mem[_60917 + 32 len mem[_60917]])
                            mem[_58468 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58468 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58468 + 125] = _60919
                            mem[_58468 + 157] = stor4[cd[68]].field_512
                            mem[_58468 + 72] = 85
                            mem[_58468 + 189] = 0
                            mem[64] = _58468 + 221
                            mem[_58468 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58468 + 225] = 0
                            mem[_58468 + 257] = _56319
                            mem[_58468 + 289] = msg.sender
                            mem[_58468 + 321] = 128
                            mem[_58468 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58468 + 385] = mem[s + _58468 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60919, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60919, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56319, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + 289]
                        _56703 = mem[(32 * idx + 2) + _19348 + 321]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58465 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_56703)
                            _60905 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60907 = sha3(mem[_60905 + 32 len mem[_60905]])
                            mem[_58465 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58465 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58465 + 125] = _60907
                            mem[_58465 + 157] = stor4[cd[68]].field_512
                            mem[_58465 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58465 + 221] = address(_55843)
                                mem[_58465 + 241] = address(_55908)
                                mem[_58465 + 189] = 40
                                mem[_58465 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58465 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58465 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58465 + 346] = stor4[cd[68]].field_512
                                mem[_58465 + 261] = 85
                                mem[_58465 + 378] = 0
                                mem[64] = _58465 + 410
                                mem[_58465 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58465 + 414] = 0
                                mem[_58465 + 446] = _56319
                                mem[_58465 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60907, stor4[cd[68]].field_512))
                                mem[_58465 + 510] = 128
                                mem[_58465 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58465 + 574] = mem[s + _58465 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56319, address(sha3(0, stor4[cd[68]].field_0, _60907, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58465 + 221] = address(_55908)
                                mem[_58465 + 241] = address(_55843)
                                mem[_58465 + 189] = 40
                                mem[_58465 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58465 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58465 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58465 + 346] = stor4[cd[68]].field_512
                                mem[_58465 + 261] = 85
                                mem[_58465 + 378] = 0
                                mem[64] = _58465 + 410
                                mem[_58465 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58465 + 414] = 0
                                mem[_58465 + 446] = _56319
                                mem[_58465 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60907, stor4[cd[68]].field_512))
                                mem[_58465 + 510] = 128
                                mem[_58465 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58465 + 574] = mem[s + _58465 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56319, address(sha3(0, stor4[cd[68]].field_0, _60907, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58466 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60909 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60911 = sha3(mem[_60909 + 32 len mem[_60909]])
                            mem[_58466 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58466 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58466 + 125] = _60911
                            mem[_58466 + 157] = stor4[cd[68]].field_512
                            mem[_58466 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58466 + 221] = address(_55843)
                                mem[_58466 + 241] = address(_55908)
                                mem[_58466 + 189] = 40
                                mem[_58466 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58466 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58466 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58466 + 346] = stor4[cd[68]].field_512
                                mem[_58466 + 261] = 85
                                mem[_58466 + 378] = 0
                                mem[64] = _58466 + 410
                                mem[_58466 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58466 + 414] = 0
                                mem[_58466 + 446] = _56319
                                mem[_58466 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60911, stor4[cd[68]].field_512))
                                mem[_58466 + 510] = 128
                                mem[_58466 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58466 + 574] = mem[s + _58466 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56319, address(sha3(0, stor4[cd[68]].field_0, _60911, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58466 + 221] = address(_55908)
                                mem[_58466 + 241] = address(_55843)
                                mem[_58466 + 189] = 40
                                mem[_58466 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58466 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58466 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58466 + 346] = stor4[cd[68]].field_512
                                mem[_58466 + 261] = 85
                                mem[_58466 + 378] = 0
                                mem[64] = _58466 + 410
                                mem[_58466 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58466 + 414] = 0
                                mem[_58466 + 446] = _56319
                                mem[_58466 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60911, stor4[cd[68]].field_512))
                                mem[_58466 + 510] = 128
                                mem[_58466 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58466 + 574] = mem[s + _58466 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56319, address(sha3(0, stor4[cd[68]].field_0, _60911, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19348 + 289] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + 333 len 20] == mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + 333 len 20] < mem[(32 * idx + 1) + _19348 + 333 len 20]:
                            if not mem[(32 * idx) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58471 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60929 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60931 = sha3(mem[_60929 + 32 len mem[_60929]])
                            mem[_58471 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58471 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58471 + 125] = _60931
                            mem[_58471 + 157] = stor4[cd[68]].field_512
                            mem[_58471 + 72] = 85
                            mem[_58471 + 189] = 0
                            mem[64] = _58471 + 221
                            mem[_58471 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58471 + 225] = _56319
                            mem[_58471 + 257] = 0
                            mem[_58471 + 289] = msg.sender
                            mem[_58471 + 321] = 128
                            mem[_58471 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58471 + 385] = mem[s + _58471 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60931, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60931, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56319, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58472 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55843)
                            _60933 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60935 = sha3(mem[_60933 + 32 len mem[_60933]])
                            mem[_58472 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58472 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58472 + 125] = _60935
                            mem[_58472 + 157] = stor4[cd[68]].field_512
                            mem[_58472 + 72] = 85
                            mem[_58472 + 189] = 0
                            mem[64] = _58472 + 221
                            mem[_58472 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58472 + 225] = _56319
                            mem[_58472 + 257] = 0
                            mem[_58472 + 289] = msg.sender
                            mem[_58472 + 321] = 128
                            mem[_58472 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58472 + 385] = mem[s + _58472 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60935, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60935, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56319, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + 289]
                        _56704 = mem[(32 * idx + 2) + _19348 + 321]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] == mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + 333 len 20] < mem[(32 * idx + 2) + _19348 + 333 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58469 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + 321])
                            mem[mem[64] + 52] = address(_56704)
                            _60921 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60923 = sha3(mem[_60921 + 32 len mem[_60921]])
                            mem[_58469 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58469 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58469 + 125] = _60923
                            mem[_58469 + 157] = stor4[cd[68]].field_512
                            mem[_58469 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58469 + 221] = address(_55843)
                                mem[_58469 + 241] = address(_55908)
                                mem[_58469 + 189] = 40
                                mem[_58469 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58469 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58469 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58469 + 346] = stor4[cd[68]].field_512
                                mem[_58469 + 261] = 85
                                mem[_58469 + 378] = 0
                                mem[64] = _58469 + 410
                                mem[_58469 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58469 + 414] = _56319
                                mem[_58469 + 446] = 0
                                mem[_58469 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60923, stor4[cd[68]].field_512))
                                mem[_58469 + 510] = 128
                                mem[_58469 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58469 + 574] = mem[s + _58469 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56319, 0, address(sha3(0, stor4[cd[68]].field_0, _60923, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58469 + 221] = address(_55908)
                                mem[_58469 + 241] = address(_55843)
                                mem[_58469 + 189] = 40
                                mem[_58469 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58469 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58469 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58469 + 346] = stor4[cd[68]].field_512
                                mem[_58469 + 261] = 85
                                mem[_58469 + 378] = 0
                                mem[64] = _58469 + 410
                                mem[_58469 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58469 + 414] = _56319
                                mem[_58469 + 446] = 0
                                mem[_58469 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60923, stor4[cd[68]].field_512))
                                mem[_58469 + 510] = 128
                                mem[_58469 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58469 + 574] = mem[s + _58469 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56319, 0, address(sha3(0, stor4[cd[68]].field_0, _60923, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + 333 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58470 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + 321])
                            mem[mem[64] + 52] = address(_55908)
                            _60925 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60927 = sha3(mem[_60925 + 32 len mem[_60925]])
                            mem[_58470 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58470 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58470 + 125] = _60927
                            mem[_58470 + 157] = stor4[cd[68]].field_512
                            mem[_58470 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55843) == address(_55908):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55843) < address(_55908):
                                if not address(_55843):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58470 + 221] = address(_55843)
                                mem[_58470 + 241] = address(_55908)
                                mem[_58470 + 189] = 40
                                mem[_58470 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58470 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58470 + 314] = sha3(address(_55843), address(_55908))
                                mem[_58470 + 346] = stor4[cd[68]].field_512
                                mem[_58470 + 261] = 85
                                mem[_58470 + 378] = 0
                                mem[64] = _58470 + 410
                                mem[_58470 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58470 + 414] = _56319
                                mem[_58470 + 446] = 0
                                mem[_58470 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60927, stor4[cd[68]].field_512))
                                mem[_58470 + 510] = 128
                                mem[_58470 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58470 + 574] = mem[s + _58470 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55843), address(_55908)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56319, 0, address(sha3(0, stor4[cd[68]].field_0, _60927, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55908):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58470 + 221] = address(_55908)
                                mem[_58470 + 241] = address(_55843)
                                mem[_58470 + 189] = 40
                                mem[_58470 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58470 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58470 + 314] = sha3(address(_55908), address(_55843))
                                mem[_58470 + 346] = stor4[cd[68]].field_512
                                mem[_58470 + 261] = 85
                                mem[_58470 + 378] = 0
                                mem[64] = _58470 + 410
                                mem[_58470 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58470 + 414] = _56319
                                mem[_58470 + 446] = 0
                                mem[_58470 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60927, stor4[cd[68]].field_512))
                                mem[_58470 + 510] = 128
                                mem[_58470 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58470 + 574] = mem[s + _58470 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55908), address(_55843)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56319, 0, address(sha3(0, stor4[cd[68]].field_0, _60927, stor4[cd[68]].field_512)), 128, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            idx = idx + 1
            continue 
        mem[mem[64]] = 32
        _55971 = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 64 len 32 * _55971] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55971]
        return 32, mem[mem[64] + 32 len (32 * _55971) + 32]
    mem[_19348 + 289] = return_data.size
    mem[_19348 + 321 len return_data.size] = ext_call.return_data[0 len return_data.size]
    if not ext_call.success:
        revert with 0, 'TransferHelper: TRANSFER_FAILED'
    if not return_data.size:
        mem[64] = _19348 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
        mem[_19348 + ceil32(return_data.size) + 290] = ('cd', 36).length
        mem[_19348 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
        mem[_19348 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
        idx = 0
        while idx < ('cd', 36).length - 1:
            require idx < mem[_19348 + ceil32(return_data.size) + 290]
            _55845 = mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322]
            require idx + 1 < mem[_19348 + ceil32(return_data.size) + 290]
            _55910 = mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322]
            if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
            if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56321 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                    if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58475 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60945 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60947 = sha3(mem[_60945 + 32 len mem[_60945]])
                            mem[_58475 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58475 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58475 + 125] = _60947
                            mem[_58475 + 157] = stor4[cd[68]].field_512
                            mem[_58475 + 72] = 85
                            mem[_58475 + 189] = 0
                            mem[64] = _58475 + 221
                            mem[_58475 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58475 + 225] = 0
                            mem[_58475 + 257] = _56321
                            mem[_58475 + 289] = msg.sender
                            mem[_58475 + 321] = 128
                            mem[_58475 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58475 + 385] = mem[s + _58475 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60947, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60947, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56321, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58476 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55845)
                            _60949 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60951 = sha3(mem[_60949 + 32 len mem[_60949]])
                            mem[_58476 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58476 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58476 + 125] = _60951
                            mem[_58476 + 157] = stor4[cd[68]].field_512
                            mem[_58476 + 72] = 85
                            mem[_58476 + 189] = 0
                            mem[64] = _58476 + 221
                            mem[_58476 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58476 + 225] = 0
                            mem[_58476 + 257] = _56321
                            mem[_58476 + 289] = msg.sender
                            mem[_58476 + 321] = 128
                            mem[_58476 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58476 + 385] = mem[s + _58476 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60951, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60951, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56321, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                        _56705 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58473 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56705)
                            _60937 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60939 = sha3(mem[_60937 + 32 len mem[_60937]])
                            mem[_58473 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58473 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58473 + 125] = _60939
                            mem[_58473 + 157] = stor4[cd[68]].field_512
                            mem[_58473 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58473 + 221] = address(_55845)
                                mem[_58473 + 241] = address(_55910)
                                mem[_58473 + 189] = 40
                                mem[_58473 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58473 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58473 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58473 + 346] = stor4[cd[68]].field_512
                                mem[_58473 + 261] = 85
                                mem[_58473 + 378] = 0
                                mem[64] = _58473 + 410
                                mem[_58473 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58473 + 414] = 0
                                mem[_58473 + 446] = _56321
                                mem[_58473 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60939, stor4[cd[68]].field_512))
                                mem[_58473 + 510] = 128
                                mem[_58473 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58473 + 574] = mem[s + _58473 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56321, address(sha3(0, stor4[cd[68]].field_0, _60939, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58473 + 221] = address(_55910)
                                mem[_58473 + 241] = address(_55845)
                                mem[_58473 + 189] = 40
                                mem[_58473 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58473 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58473 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58473 + 346] = stor4[cd[68]].field_512
                                mem[_58473 + 261] = 85
                                mem[_58473 + 378] = 0
                                mem[64] = _58473 + 410
                                mem[_58473 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58473 + 414] = 0
                                mem[_58473 + 446] = _56321
                                mem[_58473 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60939, stor4[cd[68]].field_512))
                                mem[_58473 + 510] = 128
                                mem[_58473 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58473 + 574] = mem[s + _58473 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56321, address(sha3(0, stor4[cd[68]].field_0, _60939, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58474 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60941 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60943 = sha3(mem[_60941 + 32 len mem[_60941]])
                            mem[_58474 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58474 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58474 + 125] = _60943
                            mem[_58474 + 157] = stor4[cd[68]].field_512
                            mem[_58474 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58474 + 221] = address(_55845)
                                mem[_58474 + 241] = address(_55910)
                                mem[_58474 + 189] = 40
                                mem[_58474 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58474 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58474 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58474 + 346] = stor4[cd[68]].field_512
                                mem[_58474 + 261] = 85
                                mem[_58474 + 378] = 0
                                mem[64] = _58474 + 410
                                mem[_58474 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58474 + 414] = 0
                                mem[_58474 + 446] = _56321
                                mem[_58474 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60943, stor4[cd[68]].field_512))
                                mem[_58474 + 510] = 128
                                mem[_58474 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58474 + 574] = mem[s + _58474 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56321, address(sha3(0, stor4[cd[68]].field_0, _60943, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58474 + 221] = address(_55910)
                                mem[_58474 + 241] = address(_55845)
                                mem[_58474 + 189] = 40
                                mem[_58474 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58474 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58474 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58474 + 346] = stor4[cd[68]].field_512
                                mem[_58474 + 261] = 85
                                mem[_58474 + 378] = 0
                                mem[64] = _58474 + 410
                                mem[_58474 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58474 + 414] = 0
                                mem[_58474 + 446] = _56321
                                mem[_58474 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60943, stor4[cd[68]].field_512))
                                mem[_58474 + 510] = 128
                                mem[_58474 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58474 + 574] = mem[s + _58474 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56321, address(sha3(0, stor4[cd[68]].field_0, _60943, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58479 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60961 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60963 = sha3(mem[_60961 + 32 len mem[_60961]])
                            mem[_58479 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58479 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58479 + 125] = _60963
                            mem[_58479 + 157] = stor4[cd[68]].field_512
                            mem[_58479 + 72] = 85
                            mem[_58479 + 189] = 0
                            mem[64] = _58479 + 221
                            mem[_58479 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58479 + 225] = _56321
                            mem[_58479 + 257] = 0
                            mem[_58479 + 289] = msg.sender
                            mem[_58479 + 321] = 128
                            mem[_58479 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58479 + 385] = mem[s + _58479 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60963, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60963, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56321, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58480 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55845)
                            _60965 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60967 = sha3(mem[_60965 + 32 len mem[_60965]])
                            mem[_58480 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58480 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58480 + 125] = _60967
                            mem[_58480 + 157] = stor4[cd[68]].field_512
                            mem[_58480 + 72] = 85
                            mem[_58480 + 189] = 0
                            mem[64] = _58480 + 221
                            mem[_58480 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58480 + 225] = _56321
                            mem[_58480 + 257] = 0
                            mem[_58480 + 289] = msg.sender
                            mem[_58480 + 321] = 128
                            mem[_58480 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58480 + 385] = mem[s + _58480 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60967, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60967, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56321, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                        _56706 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58477 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56706)
                            _60953 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60955 = sha3(mem[_60953 + 32 len mem[_60953]])
                            mem[_58477 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58477 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58477 + 125] = _60955
                            mem[_58477 + 157] = stor4[cd[68]].field_512
                            mem[_58477 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58477 + 221] = address(_55845)
                                mem[_58477 + 241] = address(_55910)
                                mem[_58477 + 189] = 40
                                mem[_58477 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58477 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58477 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58477 + 346] = stor4[cd[68]].field_512
                                mem[_58477 + 261] = 85
                                mem[_58477 + 378] = 0
                                mem[64] = _58477 + 410
                                mem[_58477 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58477 + 414] = _56321
                                mem[_58477 + 446] = 0
                                mem[_58477 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60955, stor4[cd[68]].field_512))
                                mem[_58477 + 510] = 128
                                mem[_58477 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58477 + 574] = mem[s + _58477 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56321, 0, address(sha3(0, stor4[cd[68]].field_0, _60955, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58477 + 221] = address(_55910)
                                mem[_58477 + 241] = address(_55845)
                                mem[_58477 + 189] = 40
                                mem[_58477 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58477 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58477 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58477 + 346] = stor4[cd[68]].field_512
                                mem[_58477 + 261] = 85
                                mem[_58477 + 378] = 0
                                mem[64] = _58477 + 410
                                mem[_58477 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58477 + 414] = _56321
                                mem[_58477 + 446] = 0
                                mem[_58477 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60955, stor4[cd[68]].field_512))
                                mem[_58477 + 510] = 128
                                mem[_58477 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58477 + 574] = mem[s + _58477 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56321, 0, address(sha3(0, stor4[cd[68]].field_0, _60955, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58478 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60957 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60959 = sha3(mem[_60957 + 32 len mem[_60957]])
                            mem[_58478 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58478 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58478 + 125] = _60959
                            mem[_58478 + 157] = stor4[cd[68]].field_512
                            mem[_58478 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58478 + 221] = address(_55845)
                                mem[_58478 + 241] = address(_55910)
                                mem[_58478 + 189] = 40
                                mem[_58478 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58478 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58478 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58478 + 346] = stor4[cd[68]].field_512
                                mem[_58478 + 261] = 85
                                mem[_58478 + 378] = 0
                                mem[64] = _58478 + 410
                                mem[_58478 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58478 + 414] = _56321
                                mem[_58478 + 446] = 0
                                mem[_58478 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60959, stor4[cd[68]].field_512))
                                mem[_58478 + 510] = 128
                                mem[_58478 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58478 + 574] = mem[s + _58478 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56321, 0, address(sha3(0, stor4[cd[68]].field_0, _60959, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58478 + 221] = address(_55910)
                                mem[_58478 + 241] = address(_55845)
                                mem[_58478 + 189] = 40
                                mem[_58478 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58478 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58478 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58478 + 346] = stor4[cd[68]].field_512
                                mem[_58478 + 261] = 85
                                mem[_58478 + 378] = 0
                                mem[64] = _58478 + 410
                                mem[_58478 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58478 + 414] = _56321
                                mem[_58478 + 446] = 0
                                mem[_58478 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60959, stor4[cd[68]].field_512))
                                mem[_58478 + 510] = 128
                                mem[_58478 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58478 + 574] = mem[s + _58478 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56321, 0, address(sha3(0, stor4[cd[68]].field_0, _60959, stor4[cd[68]].field_512)), 128, 0
            else:
                if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
                _56323 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
                if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                    if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58483 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60977 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60979 = sha3(mem[_60977 + 32 len mem[_60977]])
                            mem[_58483 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58483 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58483 + 125] = _60979
                            mem[_58483 + 157] = stor4[cd[68]].field_512
                            mem[_58483 + 72] = 85
                            mem[_58483 + 189] = 0
                            mem[64] = _58483 + 221
                            mem[_58483 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58483 + 225] = 0
                            mem[_58483 + 257] = _56323
                            mem[_58483 + 289] = msg.sender
                            mem[_58483 + 321] = 128
                            mem[_58483 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58483 + 385] = mem[s + _58483 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60979, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60979, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56323, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58484 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55845)
                            _60981 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60983 = sha3(mem[_60981 + 32 len mem[_60981]])
                            mem[_58484 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58484 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58484 + 125] = _60983
                            mem[_58484 + 157] = stor4[cd[68]].field_512
                            mem[_58484 + 72] = 85
                            mem[_58484 + 189] = 0
                            mem[64] = _58484 + 221
                            mem[_58484 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58484 + 225] = 0
                            mem[_58484 + 257] = _56323
                            mem[_58484 + 289] = msg.sender
                            mem[_58484 + 321] = 128
                            mem[_58484 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58484 + 385] = mem[s + _58484 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60983, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60983, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56323, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                        _56707 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58481 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56707)
                            _60969 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60971 = sha3(mem[_60969 + 32 len mem[_60969]])
                            mem[_58481 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58481 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58481 + 125] = _60971
                            mem[_58481 + 157] = stor4[cd[68]].field_512
                            mem[_58481 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58481 + 221] = address(_55845)
                                mem[_58481 + 241] = address(_55910)
                                mem[_58481 + 189] = 40
                                mem[_58481 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58481 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58481 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58481 + 346] = stor4[cd[68]].field_512
                                mem[_58481 + 261] = 85
                                mem[_58481 + 378] = 0
                                mem[64] = _58481 + 410
                                mem[_58481 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58481 + 414] = 0
                                mem[_58481 + 446] = _56323
                                mem[_58481 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60971, stor4[cd[68]].field_512))
                                mem[_58481 + 510] = 128
                                mem[_58481 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58481 + 574] = mem[s + _58481 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56323, address(sha3(0, stor4[cd[68]].field_0, _60971, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58481 + 221] = address(_55910)
                                mem[_58481 + 241] = address(_55845)
                                mem[_58481 + 189] = 40
                                mem[_58481 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58481 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58481 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58481 + 346] = stor4[cd[68]].field_512
                                mem[_58481 + 261] = 85
                                mem[_58481 + 378] = 0
                                mem[64] = _58481 + 410
                                mem[_58481 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58481 + 414] = 0
                                mem[_58481 + 446] = _56323
                                mem[_58481 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60971, stor4[cd[68]].field_512))
                                mem[_58481 + 510] = 128
                                mem[_58481 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58481 + 574] = mem[s + _58481 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56323, address(sha3(0, stor4[cd[68]].field_0, _60971, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58482 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60973 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60975 = sha3(mem[_60973 + 32 len mem[_60973]])
                            mem[_58482 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58482 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58482 + 125] = _60975
                            mem[_58482 + 157] = stor4[cd[68]].field_512
                            mem[_58482 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58482 + 221] = address(_55845)
                                mem[_58482 + 241] = address(_55910)
                                mem[_58482 + 189] = 40
                                mem[_58482 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58482 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58482 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58482 + 346] = stor4[cd[68]].field_512
                                mem[_58482 + 261] = 85
                                mem[_58482 + 378] = 0
                                mem[64] = _58482 + 410
                                mem[_58482 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58482 + 414] = 0
                                mem[_58482 + 446] = _56323
                                mem[_58482 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60975, stor4[cd[68]].field_512))
                                mem[_58482 + 510] = 128
                                mem[_58482 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58482 + 574] = mem[s + _58482 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56323, address(sha3(0, stor4[cd[68]].field_0, _60975, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58482 + 221] = address(_55910)
                                mem[_58482 + 241] = address(_55845)
                                mem[_58482 + 189] = 40
                                mem[_58482 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58482 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58482 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58482 + 346] = stor4[cd[68]].field_512
                                mem[_58482 + 261] = 85
                                mem[_58482 + 378] = 0
                                mem[64] = _58482 + 410
                                mem[_58482 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58482 + 414] = 0
                                mem[_58482 + 446] = _56323
                                mem[_58482 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60975, stor4[cd[68]].field_512))
                                mem[_58482 + 510] = 128
                                mem[_58482 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58482 + 574] = mem[s + _58482 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args 0, _56323, address(sha3(0, stor4[cd[68]].field_0, _60975, stor4[cd[68]].field_512)), 128, 0
                else:
                    if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58487 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60993 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60995 = sha3(mem[_60993 + 32 len mem[_60993]])
                            mem[_58487 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58487 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58487 + 125] = _60995
                            mem[_58487 + 157] = stor4[cd[68]].field_512
                            mem[_58487 + 72] = 85
                            mem[_58487 + 189] = 0
                            mem[64] = _58487 + 221
                            mem[_58487 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58487 + 225] = _56323
                            mem[_58487 + 257] = 0
                            mem[_58487 + 289] = msg.sender
                            mem[_58487 + 321] = 128
                            mem[_58487 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58487 + 385] = mem[s + _58487 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60995, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60995, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56323, 0, msg.sender, 128, 0
                        else:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58488 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55845)
                            _60997 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60999 = sha3(mem[_60997 + 32 len mem[_60997]])
                            mem[_58488 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58488 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58488 + 125] = _60999
                            mem[_58488 + 157] = stor4[cd[68]].field_512
                            mem[_58488 + 72] = 85
                            mem[_58488 + 189] = 0
                            mem[64] = _58488 + 221
                            mem[_58488 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58488 + 225] = _56323
                            mem[_58488 + 257] = 0
                            mem[_58488 + 289] = msg.sender
                            mem[_58488 + 321] = 128
                            mem[_58488 + 353] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58488 + 385] = mem[s + _58488 + 221]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _60999, stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, _60999, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56323, 0, msg.sender, 128, 0
                    else:
                        require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                        _56708 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                        mem[0] = cd[68]
                        mem[32] = 4
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58485 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_56708)
                            _60985 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60987 = sha3(mem[_60985 + 32 len mem[_60985]])
                            mem[_58485 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58485 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58485 + 125] = _60987
                            mem[_58485 + 157] = stor4[cd[68]].field_512
                            mem[_58485 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58485 + 221] = address(_55845)
                                mem[_58485 + 241] = address(_55910)
                                mem[_58485 + 189] = 40
                                mem[_58485 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58485 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58485 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58485 + 346] = stor4[cd[68]].field_512
                                mem[_58485 + 261] = 85
                                mem[_58485 + 378] = 0
                                mem[64] = _58485 + 410
                                mem[_58485 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58485 + 414] = _56323
                                mem[_58485 + 446] = 0
                                mem[_58485 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60987, stor4[cd[68]].field_512))
                                mem[_58485 + 510] = 128
                                mem[_58485 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58485 + 574] = mem[s + _58485 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56323, 0, address(sha3(0, stor4[cd[68]].field_0, _60987, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58485 + 221] = address(_55910)
                                mem[_58485 + 241] = address(_55845)
                                mem[_58485 + 189] = 40
                                mem[_58485 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58485 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58485 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58485 + 346] = stor4[cd[68]].field_512
                                mem[_58485 + 261] = 85
                                mem[_58485 + 378] = 0
                                mem[64] = _58485 + 410
                                mem[_58485 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58485 + 414] = _56323
                                mem[_58485 + 446] = 0
                                mem[_58485 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60987, stor4[cd[68]].field_512))
                                mem[_58485 + 510] = 128
                                mem[_58485 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58485 + 574] = mem[s + _58485 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56323, 0, address(sha3(0, stor4[cd[68]].field_0, _60987, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            _58486 = mem[64]
                            mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                            mem[mem[64] + 52] = address(_55910)
                            _60989 = mem[64]
                            mem[mem[64]] = 40
                            mem[64] = mem[64] + 72
                            _60991 = sha3(mem[_60989 + 32 len mem[_60989]])
                            mem[_58486 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58486 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58486 + 125] = _60991
                            mem[_58486 + 157] = stor4[cd[68]].field_512
                            mem[_58486 + 72] = 85
                            mem[0] = cd[68]
                            mem[32] = 4
                            if address(_55845) == address(_55910):
                                revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                            if address(_55845) < address(_55910):
                                if not address(_55845):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58486 + 221] = address(_55845)
                                mem[_58486 + 241] = address(_55910)
                                mem[_58486 + 189] = 40
                                mem[_58486 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58486 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58486 + 314] = sha3(address(_55845), address(_55910))
                                mem[_58486 + 346] = stor4[cd[68]].field_512
                                mem[_58486 + 261] = 85
                                mem[_58486 + 378] = 0
                                mem[64] = _58486 + 410
                                mem[_58486 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58486 + 414] = _56323
                                mem[_58486 + 446] = 0
                                mem[_58486 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60991, stor4[cd[68]].field_512))
                                mem[_58486 + 510] = 128
                                mem[_58486 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58486 + 574] = mem[s + _58486 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55845), address(_55910)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56323, 0, address(sha3(0, stor4[cd[68]].field_0, _60991, stor4[cd[68]].field_512)), 128, 0
                            else:
                                if not address(_55910):
                                    revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                                mem[_58486 + 221] = address(_55910)
                                mem[_58486 + 241] = address(_55845)
                                mem[_58486 + 189] = 40
                                mem[_58486 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                                mem[_58486 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                                mem[_58486 + 314] = sha3(address(_55910), address(_55845))
                                mem[_58486 + 346] = stor4[cd[68]].field_512
                                mem[_58486 + 261] = 85
                                mem[_58486 + 378] = 0
                                mem[64] = _58486 + 410
                                mem[_58486 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                                mem[_58486 + 414] = _56323
                                mem[_58486 + 446] = 0
                                mem[_58486 + 478] = address(sha3(0, stor4[cd[68]].field_0, _60991, stor4[cd[68]].field_512))
                                mem[_58486 + 510] = 128
                                mem[_58486 + 542] = 0
                                s = 0
                                while s < 0:
                                    mem[s + _58486 + 574] = mem[s + _58486 + 410]
                                    s = s + 32
                                    continue 
                                require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)))
                                call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55910), address(_55845)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                     gas gas_remaining wei
                                    args _56323, 0, address(sha3(0, stor4[cd[68]].field_0, _60991, stor4[cd[68]].field_512)), 128, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            idx = idx + 1
            continue 
        mem[mem[64]] = 32
        _55973 = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
        mem[mem[64] + 64 len 32 * _55973] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55973]
        return 32, mem[mem[64] + 32 len (32 * _55973) + 32]
    require return_data.size >= 32
    require mem[_19348 + 321] == bool(mem[_19348 + 321])
    if not mem[_19348 + 321]:
        revert with 0, 'TransferHelper: TRANSFER_FAILED'
    mem[64] = _19348 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322
    mem[_19348 + ceil32(return_data.size) + 290] = ('cd', 36).length
    mem[_19348 + ceil32(return_data.size) + 322 len 32 * ('cd', 36).length] = call.data[cd[36] + 36 len 32 * ('cd', 36).length]
    mem[_19348 + ceil32(return_data.size) + (32 * ('cd', 36).length) + 322] = 0
    idx = 0
    while idx < ('cd', 36).length - 1:
        require idx < mem[_19348 + ceil32(return_data.size) + 290]
        _55847 = mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322]
        require idx + 1 < mem[_19348 + ceil32(return_data.size) + 290]
        _55912 = mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322]
        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
        if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
            if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
            _56325 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
            if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58491 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61009 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61011 = sha3(mem[_61009 + 32 len mem[_61009]])
                        mem[_58491 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58491 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58491 + 125] = _61011
                        mem[_58491 + 157] = stor4[cd[68]].field_512
                        mem[_58491 + 72] = 85
                        mem[_58491 + 189] = 0
                        mem[64] = _58491 + 221
                        mem[_58491 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58491 + 225] = 0
                        mem[_58491 + 257] = _56325
                        mem[_58491 + 289] = msg.sender
                        mem[_58491 + 321] = 128
                        mem[_58491 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58491 + 385] = mem[s + _58491 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61011, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61011, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args 0, _56325, msg.sender, 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58492 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55847)
                        _61013 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61015 = sha3(mem[_61013 + 32 len mem[_61013]])
                        mem[_58492 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58492 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58492 + 125] = _61015
                        mem[_58492 + 157] = stor4[cd[68]].field_512
                        mem[_58492 + 72] = 85
                        mem[_58492 + 189] = 0
                        mem[64] = _58492 + 221
                        mem[_58492 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58492 + 225] = 0
                        mem[_58492 + 257] = _56325
                        mem[_58492 + 289] = msg.sender
                        mem[_58492 + 321] = 128
                        mem[_58492 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58492 + 385] = mem[s + _58492 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61015, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61015, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args 0, _56325, msg.sender, 128, 0
                else:
                    require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                    _56709 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58489 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_56709)
                        _61001 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61003 = sha3(mem[_61001 + 32 len mem[_61001]])
                        mem[_58489 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58489 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58489 + 125] = _61003
                        mem[_58489 + 157] = stor4[cd[68]].field_512
                        mem[_58489 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58489 + 221] = address(_55847)
                            mem[_58489 + 241] = address(_55912)
                            mem[_58489 + 189] = 40
                            mem[_58489 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58489 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58489 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58489 + 346] = stor4[cd[68]].field_512
                            mem[_58489 + 261] = 85
                            mem[_58489 + 378] = 0
                            mem[64] = _58489 + 410
                            mem[_58489 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58489 + 414] = 0
                            mem[_58489 + 446] = _56325
                            mem[_58489 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61003, stor4[cd[68]].field_512))
                            mem[_58489 + 510] = 128
                            mem[_58489 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58489 + 574] = mem[s + _58489 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56325, address(sha3(0, stor4[cd[68]].field_0, _61003, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58489 + 221] = address(_55912)
                            mem[_58489 + 241] = address(_55847)
                            mem[_58489 + 189] = 40
                            mem[_58489 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58489 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58489 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58489 + 346] = stor4[cd[68]].field_512
                            mem[_58489 + 261] = 85
                            mem[_58489 + 378] = 0
                            mem[64] = _58489 + 410
                            mem[_58489 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58489 + 414] = 0
                            mem[_58489 + 446] = _56325
                            mem[_58489 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61003, stor4[cd[68]].field_512))
                            mem[_58489 + 510] = 128
                            mem[_58489 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58489 + 574] = mem[s + _58489 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56325, address(sha3(0, stor4[cd[68]].field_0, _61003, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58490 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61005 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61007 = sha3(mem[_61005 + 32 len mem[_61005]])
                        mem[_58490 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58490 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58490 + 125] = _61007
                        mem[_58490 + 157] = stor4[cd[68]].field_512
                        mem[_58490 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58490 + 221] = address(_55847)
                            mem[_58490 + 241] = address(_55912)
                            mem[_58490 + 189] = 40
                            mem[_58490 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58490 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58490 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58490 + 346] = stor4[cd[68]].field_512
                            mem[_58490 + 261] = 85
                            mem[_58490 + 378] = 0
                            mem[64] = _58490 + 410
                            mem[_58490 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58490 + 414] = 0
                            mem[_58490 + 446] = _56325
                            mem[_58490 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61007, stor4[cd[68]].field_512))
                            mem[_58490 + 510] = 128
                            mem[_58490 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58490 + 574] = mem[s + _58490 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56325, address(sha3(0, stor4[cd[68]].field_0, _61007, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58490 + 221] = address(_55912)
                            mem[_58490 + 241] = address(_55847)
                            mem[_58490 + 189] = 40
                            mem[_58490 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58490 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58490 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58490 + 346] = stor4[cd[68]].field_512
                            mem[_58490 + 261] = 85
                            mem[_58490 + 378] = 0
                            mem[64] = _58490 + 410
                            mem[_58490 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58490 + 414] = 0
                            mem[_58490 + 446] = _56325
                            mem[_58490 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61007, stor4[cd[68]].field_512))
                            mem[_58490 + 510] = 128
                            mem[_58490 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58490 + 574] = mem[s + _58490 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56325, address(sha3(0, stor4[cd[68]].field_0, _61007, stor4[cd[68]].field_512)), 128, 0
            else:
                if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58495 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61025 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61027 = sha3(mem[_61025 + 32 len mem[_61025]])
                        mem[_58495 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58495 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58495 + 125] = _61027
                        mem[_58495 + 157] = stor4[cd[68]].field_512
                        mem[_58495 + 72] = 85
                        mem[_58495 + 189] = 0
                        mem[64] = _58495 + 221
                        mem[_58495 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58495 + 225] = _56325
                        mem[_58495 + 257] = 0
                        mem[_58495 + 289] = msg.sender
                        mem[_58495 + 321] = 128
                        mem[_58495 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58495 + 385] = mem[s + _58495 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61027, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61027, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args _56325, 0, msg.sender, 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58496 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55847)
                        _61029 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61031 = sha3(mem[_61029 + 32 len mem[_61029]])
                        mem[_58496 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58496 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58496 + 125] = _61031
                        mem[_58496 + 157] = stor4[cd[68]].field_512
                        mem[_58496 + 72] = 85
                        mem[_58496 + 189] = 0
                        mem[64] = _58496 + 221
                        mem[_58496 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58496 + 225] = _56325
                        mem[_58496 + 257] = 0
                        mem[_58496 + 289] = msg.sender
                        mem[_58496 + 321] = 128
                        mem[_58496 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58496 + 385] = mem[s + _58496 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61031, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61031, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args _56325, 0, msg.sender, 128, 0
                else:
                    require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                    _56710 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58493 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_56710)
                        _61017 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61019 = sha3(mem[_61017 + 32 len mem[_61017]])
                        mem[_58493 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58493 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58493 + 125] = _61019
                        mem[_58493 + 157] = stor4[cd[68]].field_512
                        mem[_58493 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58493 + 221] = address(_55847)
                            mem[_58493 + 241] = address(_55912)
                            mem[_58493 + 189] = 40
                            mem[_58493 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58493 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58493 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58493 + 346] = stor4[cd[68]].field_512
                            mem[_58493 + 261] = 85
                            mem[_58493 + 378] = 0
                            mem[64] = _58493 + 410
                            mem[_58493 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58493 + 414] = _56325
                            mem[_58493 + 446] = 0
                            mem[_58493 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61019, stor4[cd[68]].field_512))
                            mem[_58493 + 510] = 128
                            mem[_58493 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58493 + 574] = mem[s + _58493 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56325, 0, address(sha3(0, stor4[cd[68]].field_0, _61019, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58493 + 221] = address(_55912)
                            mem[_58493 + 241] = address(_55847)
                            mem[_58493 + 189] = 40
                            mem[_58493 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58493 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58493 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58493 + 346] = stor4[cd[68]].field_512
                            mem[_58493 + 261] = 85
                            mem[_58493 + 378] = 0
                            mem[64] = _58493 + 410
                            mem[_58493 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58493 + 414] = _56325
                            mem[_58493 + 446] = 0
                            mem[_58493 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61019, stor4[cd[68]].field_512))
                            mem[_58493 + 510] = 128
                            mem[_58493 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58493 + 574] = mem[s + _58493 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56325, 0, address(sha3(0, stor4[cd[68]].field_0, _61019, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58494 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61021 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61023 = sha3(mem[_61021 + 32 len mem[_61021]])
                        mem[_58494 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58494 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58494 + 125] = _61023
                        mem[_58494 + 157] = stor4[cd[68]].field_512
                        mem[_58494 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58494 + 221] = address(_55847)
                            mem[_58494 + 241] = address(_55912)
                            mem[_58494 + 189] = 40
                            mem[_58494 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58494 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58494 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58494 + 346] = stor4[cd[68]].field_512
                            mem[_58494 + 261] = 85
                            mem[_58494 + 378] = 0
                            mem[64] = _58494 + 410
                            mem[_58494 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58494 + 414] = _56325
                            mem[_58494 + 446] = 0
                            mem[_58494 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61023, stor4[cd[68]].field_512))
                            mem[_58494 + 510] = 128
                            mem[_58494 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58494 + 574] = mem[s + _58494 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56325, 0, address(sha3(0, stor4[cd[68]].field_0, _61023, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58494 + 221] = address(_55912)
                            mem[_58494 + 241] = address(_55847)
                            mem[_58494 + 189] = 40
                            mem[_58494 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58494 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58494 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58494 + 346] = stor4[cd[68]].field_512
                            mem[_58494 + 261] = 85
                            mem[_58494 + 378] = 0
                            mem[64] = _58494 + 410
                            mem[_58494 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58494 + 414] = _56325
                            mem[_58494 + 446] = 0
                            mem[_58494 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61023, stor4[cd[68]].field_512))
                            mem[_58494 + 510] = 128
                            mem[_58494 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58494 + 574] = mem[s + _58494 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56325, 0, address(sha3(0, stor4[cd[68]].field_0, _61023, stor4[cd[68]].field_512)), 128, 0
        else:
            if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
            require idx + 1 < mem[(32 * ('cd', 36).length) + 128]
            _56327 = mem[(32 * idx + 1) + (32 * ('cd', 36).length) + 160]
            if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58499 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61041 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61043 = sha3(mem[_61041 + 32 len mem[_61041]])
                        mem[_58499 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58499 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58499 + 125] = _61043
                        mem[_58499 + 157] = stor4[cd[68]].field_512
                        mem[_58499 + 72] = 85
                        mem[_58499 + 189] = 0
                        mem[64] = _58499 + 221
                        mem[_58499 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58499 + 225] = 0
                        mem[_58499 + 257] = _56327
                        mem[_58499 + 289] = msg.sender
                        mem[_58499 + 321] = 128
                        mem[_58499 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58499 + 385] = mem[s + _58499 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61043, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61043, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args 0, _56327, msg.sender, 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58500 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55847)
                        _61045 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61047 = sha3(mem[_61045 + 32 len mem[_61045]])
                        mem[_58500 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58500 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58500 + 125] = _61047
                        mem[_58500 + 157] = stor4[cd[68]].field_512
                        mem[_58500 + 72] = 85
                        mem[_58500 + 189] = 0
                        mem[64] = _58500 + 221
                        mem[_58500 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58500 + 225] = 0
                        mem[_58500 + 257] = _56327
                        mem[_58500 + 289] = msg.sender
                        mem[_58500 + 321] = 128
                        mem[_58500 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58500 + 385] = mem[s + _58500 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61047, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61047, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args 0, _56327, msg.sender, 128, 0
                else:
                    require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                    _56711 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58497 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_56711)
                        _61033 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61035 = sha3(mem[_61033 + 32 len mem[_61033]])
                        mem[_58497 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58497 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58497 + 125] = _61035
                        mem[_58497 + 157] = stor4[cd[68]].field_512
                        mem[_58497 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58497 + 221] = address(_55847)
                            mem[_58497 + 241] = address(_55912)
                            mem[_58497 + 189] = 40
                            mem[_58497 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58497 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58497 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58497 + 346] = stor4[cd[68]].field_512
                            mem[_58497 + 261] = 85
                            mem[_58497 + 378] = 0
                            mem[64] = _58497 + 410
                            mem[_58497 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58497 + 414] = 0
                            mem[_58497 + 446] = _56327
                            mem[_58497 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61035, stor4[cd[68]].field_512))
                            mem[_58497 + 510] = 128
                            mem[_58497 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58497 + 574] = mem[s + _58497 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56327, address(sha3(0, stor4[cd[68]].field_0, _61035, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58497 + 221] = address(_55912)
                            mem[_58497 + 241] = address(_55847)
                            mem[_58497 + 189] = 40
                            mem[_58497 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58497 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58497 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58497 + 346] = stor4[cd[68]].field_512
                            mem[_58497 + 261] = 85
                            mem[_58497 + 378] = 0
                            mem[64] = _58497 + 410
                            mem[_58497 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58497 + 414] = 0
                            mem[_58497 + 446] = _56327
                            mem[_58497 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61035, stor4[cd[68]].field_512))
                            mem[_58497 + 510] = 128
                            mem[_58497 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58497 + 574] = mem[s + _58497 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56327, address(sha3(0, stor4[cd[68]].field_0, _61035, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58498 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61037 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61039 = sha3(mem[_61037 + 32 len mem[_61037]])
                        mem[_58498 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58498 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58498 + 125] = _61039
                        mem[_58498 + 157] = stor4[cd[68]].field_512
                        mem[_58498 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58498 + 221] = address(_55847)
                            mem[_58498 + 241] = address(_55912)
                            mem[_58498 + 189] = 40
                            mem[_58498 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58498 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58498 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58498 + 346] = stor4[cd[68]].field_512
                            mem[_58498 + 261] = 85
                            mem[_58498 + 378] = 0
                            mem[64] = _58498 + 410
                            mem[_58498 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58498 + 414] = 0
                            mem[_58498 + 446] = _56327
                            mem[_58498 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61039, stor4[cd[68]].field_512))
                            mem[_58498 + 510] = 128
                            mem[_58498 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58498 + 574] = mem[s + _58498 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56327, address(sha3(0, stor4[cd[68]].field_0, _61039, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58498 + 221] = address(_55912)
                            mem[_58498 + 241] = address(_55847)
                            mem[_58498 + 189] = 40
                            mem[_58498 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58498 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58498 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58498 + 346] = stor4[cd[68]].field_512
                            mem[_58498 + 261] = 85
                            mem[_58498 + 378] = 0
                            mem[64] = _58498 + 410
                            mem[_58498 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58498 + 414] = 0
                            mem[_58498 + 446] = _56327
                            mem[_58498 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61039, stor4[cd[68]].field_512))
                            mem[_58498 + 510] = 128
                            mem[_58498 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58498 + 574] = mem[s + _58498 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, _56327, address(sha3(0, stor4[cd[68]].field_0, _61039, stor4[cd[68]].field_512)), 128, 0
            else:
                if idx >= mem[_19348 + ceil32(return_data.size) + 290] - 2:
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58503 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61057 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61059 = sha3(mem[_61057 + 32 len mem[_61057]])
                        mem[_58503 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58503 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58503 + 125] = _61059
                        mem[_58503 + 157] = stor4[cd[68]].field_512
                        mem[_58503 + 72] = 85
                        mem[_58503 + 189] = 0
                        mem[64] = _58503 + 221
                        mem[_58503 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58503 + 225] = _56327
                        mem[_58503 + 257] = 0
                        mem[_58503 + 289] = msg.sender
                        mem[_58503 + 321] = 128
                        mem[_58503 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58503 + 385] = mem[s + _58503 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61059, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61059, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args _56327, 0, msg.sender, 128, 0
                    else:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58504 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55847)
                        _61061 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61063 = sha3(mem[_61061 + 32 len mem[_61061]])
                        mem[_58504 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58504 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58504 + 125] = _61063
                        mem[_58504 + 157] = stor4[cd[68]].field_512
                        mem[_58504 + 72] = 85
                        mem[_58504 + 189] = 0
                        mem[64] = _58504 + 221
                        mem[_58504 + 221] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                        mem[_58504 + 225] = _56327
                        mem[_58504 + 257] = 0
                        mem[_58504 + 289] = msg.sender
                        mem[_58504 + 321] = 128
                        mem[_58504 + 353] = 0
                        s = 0
                        while s < 0:
                            mem[s + _58504 + 385] = mem[s + _58504 + 221]
                            s = s + 32
                            continue 
                        require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, _61063, stor4[cd[68]].field_512)))
                        call address(sha3(0, stor4[cd[68]].field_0, _61063, stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                             gas gas_remaining wei
                            args _56327, 0, msg.sender, 128, 0
                else:
                    require idx + 2 < mem[_19348 + ceil32(return_data.size) + 290]
                    _56712 = mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322]
                    mem[0] = cd[68]
                    mem[32] = 4
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] == mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                    if mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20] < mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                        if not mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58501 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 1) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_56712)
                        _61049 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61051 = sha3(mem[_61049 + 32 len mem[_61049]])
                        mem[_58501 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58501 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58501 + 125] = _61051
                        mem[_58501 + 157] = stor4[cd[68]].field_512
                        mem[_58501 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58501 + 221] = address(_55847)
                            mem[_58501 + 241] = address(_55912)
                            mem[_58501 + 189] = 40
                            mem[_58501 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58501 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58501 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58501 + 346] = stor4[cd[68]].field_512
                            mem[_58501 + 261] = 85
                            mem[_58501 + 378] = 0
                            mem[64] = _58501 + 410
                            mem[_58501 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58501 + 414] = _56327
                            mem[_58501 + 446] = 0
                            mem[_58501 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61051, stor4[cd[68]].field_512))
                            mem[_58501 + 510] = 128
                            mem[_58501 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58501 + 574] = mem[s + _58501 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56327, 0, address(sha3(0, stor4[cd[68]].field_0, _61051, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58501 + 221] = address(_55912)
                            mem[_58501 + 241] = address(_55847)
                            mem[_58501 + 189] = 40
                            mem[_58501 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58501 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58501 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58501 + 346] = stor4[cd[68]].field_512
                            mem[_58501 + 261] = 85
                            mem[_58501 + 378] = 0
                            mem[64] = _58501 + 410
                            mem[_58501 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58501 + 414] = _56327
                            mem[_58501 + 446] = 0
                            mem[_58501 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61051, stor4[cd[68]].field_512))
                            mem[_58501 + 510] = 128
                            mem[_58501 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58501 + 574] = mem[s + _58501 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56327, 0, address(sha3(0, stor4[cd[68]].field_0, _61051, stor4[cd[68]].field_512)), 128, 0
                    else:
                        if not mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 334 len 20]:
                            revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                        _58502 = mem[64]
                        mem[mem[64] + 32] = address(mem[(32 * idx + 2) + _19348 + ceil32(return_data.size) + 322])
                        mem[mem[64] + 52] = address(_55912)
                        _61053 = mem[64]
                        mem[mem[64]] = 40
                        mem[64] = mem[64] + 72
                        _61055 = sha3(mem[_61053 + 32 len mem[_61053]])
                        mem[_58502 + 104] = 0xff00000000000000000000000000000000000000000000000000000000000000
                        mem[_58502 + 105] = Mask(160, 96, stor4[cd[68]].field_0)
                        mem[_58502 + 125] = _61055
                        mem[_58502 + 157] = stor4[cd[68]].field_512
                        mem[_58502 + 72] = 85
                        mem[0] = cd[68]
                        mem[32] = 4
                        if address(_55847) == address(_55912):
                            revert with 0, 'PancakeLibrary: IDENTICAL_ADDRESSES'
                        if address(_55847) < address(_55912):
                            if not address(_55847):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58502 + 221] = address(_55847)
                            mem[_58502 + 241] = address(_55912)
                            mem[_58502 + 189] = 40
                            mem[_58502 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58502 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58502 + 314] = sha3(address(_55847), address(_55912))
                            mem[_58502 + 346] = stor4[cd[68]].field_512
                            mem[_58502 + 261] = 85
                            mem[_58502 + 378] = 0
                            mem[64] = _58502 + 410
                            mem[_58502 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58502 + 414] = _56327
                            mem[_58502 + 446] = 0
                            mem[_58502 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61055, stor4[cd[68]].field_512))
                            mem[_58502 + 510] = 128
                            mem[_58502 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58502 + 574] = mem[s + _58502 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55847), address(_55912)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56327, 0, address(sha3(0, stor4[cd[68]].field_0, _61055, stor4[cd[68]].field_512)), 128, 0
                        else:
                            if not address(_55912):
                                revert with 0, 'PancakeLibrary: ZERO_ADDRESS'
                            mem[_58502 + 221] = address(_55912)
                            mem[_58502 + 241] = address(_55847)
                            mem[_58502 + 189] = 40
                            mem[_58502 + 293] = 0xff00000000000000000000000000000000000000000000000000000000000000
                            mem[_58502 + 294] = Mask(160, 96, stor4[cd[68]].field_0)
                            mem[_58502 + 314] = sha3(address(_55912), address(_55847))
                            mem[_58502 + 346] = stor4[cd[68]].field_512
                            mem[_58502 + 261] = 85
                            mem[_58502 + 378] = 0
                            mem[64] = _58502 + 410
                            mem[_58502 + 410] = 0x22c0d9f00000000000000000000000000000000000000000000000000000000
                            mem[_58502 + 414] = _56327
                            mem[_58502 + 446] = 0
                            mem[_58502 + 478] = address(sha3(0, stor4[cd[68]].field_0, _61055, stor4[cd[68]].field_512))
                            mem[_58502 + 510] = 128
                            mem[_58502 + 542] = 0
                            s = 0
                            while s < 0:
                                mem[s + _58502 + 574] = mem[s + _58502 + 410]
                                s = s + 32
                                continue 
                            require ext_code.size(address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)))
                            call address(sha3(0, stor4[cd[68]].field_0, sha3(address(_55912), address(_55847)), stor4[cd[68]].field_512)).swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args _56327, 0, address(sha3(0, stor4[cd[68]].field_0, _61055, stor4[cd[68]].field_512)), 128, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        idx = idx + 1
        continue 
    mem[mem[64]] = 32
    _55975 = mem[(32 * ('cd', 36).length) + 128]
    mem[mem[64] + 32] = mem[(32 * ('cd', 36).length) + 128]
    mem[mem[64] + 64 len 32 * _55975] = mem[(32 * ('cd', 36).length) + 160 len 32 * _55975]
    return 32, mem[mem[64] + 32 len (32 * _55975) + 32]
}



}
