contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#
const totalSupply = 5 * 10^13


address owner;
mapping of uint256 stor1;
mapping of uint256 stor2;
mapping of uint256 allowance;
mapping of uint8 stor4;
array of address stor5;
uint256 stor6;
uint256 totalFees;
array of uint256 name;
array of uint256 symbol;
uint8 decimals;

function name() payable {
    return name[0 len name.length]
}

function totalFees() payable {
    return totalFees
}

function decimals() payable {
    return decimals
}

function owner() payable {
    return owner
}

function symbol() payable {
    return symbol[0 len symbol.length]
}

function isExcluded(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(stor4[address(arg1)])
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return allowance[address(arg1)][address(arg2)]
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function includeAccount(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not stor4[address(arg1)]:
        revert with 0, 'Account is already included'
    idx = 0
    while idx < stor5.length:
        mem[0] = 5
        if stor5[idx] != arg1:
            idx = idx + 1
            continue 
        require stor5.length - 1 < stor5.length
        require idx < stor5.length
        stor5[idx] = stor5[stor5.length]
        stor2[address(arg1)] = 0
        stor4[address(arg1)] = 0
        require stor5.length
        stor5[stor5.length] = 0
        stor5.length--
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 > allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 
                    32,
                    37,
                    0x6e45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572,
                    mem[165 len 27],
                    mem[219 len 5]
    if not msg.sender:
        revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
    if not arg1:
        revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
    allowance[address(msg.sender)][address(arg1)] -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if allowance[address(msg.sender)][address(arg1)] + arg2 < allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] += arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function tokenFromReflection(uint256 arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if arg1 > stor6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                    mem[206 len 22]
    idx = 0
    s = 5 * 10^13
    t = stor6
    while idx < stor5.length:
        mem[0] = stor5[idx]
        mem[32] = 1
        if stor1[stor5[idx]] > t:
            _77 = mem[64]
            mem[64] = mem[64] + 64
            mem[_77] = 26
            mem[_77 + 32] = 'SafeMath: division by zero'
            _95 = mem[64]
            mem[64] = mem[64] + 64
            mem[_95] = 26
            mem[_95 + 32] = 'SafeMath: division by zero'
            if stor6 / 5 * 10^13 > 0:
                require stor6 / 5 * 10^13
                return (arg1 / stor6 / 5 * 10^13)
            _101 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_101 + idx + 68] = mem[_95 + idx + 32]
                idx = idx + 32
                continue 
            mem[_101 + 68] = mem[_101 + 74 len 26]
            revert with memory
              from mem[64]
               len _101 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        if stor2[stor5[idx]] > s:
            _81 = mem[64]
            mem[64] = mem[64] + 64
            mem[_81] = 26
            mem[_81 + 32] = 'SafeMath: division by zero'
            _107 = mem[64]
            mem[64] = mem[64] + 64
            mem[_107] = 26
            mem[_107 + 32] = 'SafeMath: division by zero'
            if stor6 / 5 * 10^13 > 0:
                require stor6 / 5 * 10^13
                return (arg1 / stor6 / 5 * 10^13)
            _113 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_113 + idx + 68] = mem[_107 + idx + 32]
                idx = idx + 32
                continue 
            mem[_113 + 68] = mem[_113 + 74 len 26]
            revert with memory
              from mem[64]
               len _113 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 1
        _80 = mem[64]
        mem[64] = mem[64] + 64
        mem[_80] = 30
        mem[_80 + 32] = 'SafeMath: subtraction overflow'
        if stor1[stor5[idx]] > t:
            _82 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_82 + idx + 68] = mem[_80 + idx + 32]
                idx = idx + 32
                continue 
            mem[_82 + 68] = mem[_82 + 70 len 30]
            revert with memory
              from mem[64]
               len _82 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        _96 = mem[64]
        mem[64] = mem[64] + 64
        mem[_96] = 30
        mem[_96 + 32] = 'SafeMath: subtraction overflow'
        if stor2[stor5[idx]] <= s:
            idx = idx + 1
            s = s - stor2[stor5[idx]]
            t = t - stor1[stor5[idx]]
            continue 
        _104 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 30
        idx = 0
        while idx < 30:
            mem[_104 + idx + 68] = mem[_96 + idx + 32]
            idx = idx + 32
            continue 
        mem[_104 + 68] = mem[_104 + 70 len 30]
        revert with memory
          from mem[64]
           len _104 + -mem[64] + 100
    if t < stor6 / 5 * 10^13:
        if stor6 / 5 * 10^13 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if stor6 / 5 * 10^13:
            return (arg1 / stor6 / 5 * 10^13)
    else:
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        if s:
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            if t / s:
                return (arg1 / t / s)
    revert
}

function balanceOf(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if stor4[address(arg1)]:
        return stor2[address(arg1)]
    mem[0] = arg1
    mem[32] = 1
    if stor1[address(arg1)] > stor6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                    mem[206 len 22]
    idx = 0
    s = 5 * 10^13
    t = stor6
    while idx < stor5.length:
        mem[0] = stor5[idx]
        mem[32] = 1
        if stor1[stor5[idx]] > t:
            _82 = mem[64]
            mem[64] = mem[64] + 64
            mem[_82] = 26
            mem[_82 + 32] = 'SafeMath: division by zero'
            _100 = mem[64]
            mem[64] = mem[64] + 64
            mem[_100] = 26
            mem[_100 + 32] = 'SafeMath: division by zero'
            if stor6 / 5 * 10^13 > 0:
                require stor6 / 5 * 10^13
                return (stor1[address(arg1)] / stor6 / 5 * 10^13)
            _106 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_106 + idx + 68] = mem[_100 + idx + 32]
                idx = idx + 32
                continue 
            mem[_106 + 68] = mem[_106 + 74 len 26]
            revert with memory
              from mem[64]
               len _106 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        if stor2[stor5[idx]] > s:
            _86 = mem[64]
            mem[64] = mem[64] + 64
            mem[_86] = 26
            mem[_86 + 32] = 'SafeMath: division by zero'
            _112 = mem[64]
            mem[64] = mem[64] + 64
            mem[_112] = 26
            mem[_112 + 32] = 'SafeMath: division by zero'
            if stor6 / 5 * 10^13 > 0:
                require stor6 / 5 * 10^13
                return (stor1[address(arg1)] / stor6 / 5 * 10^13)
            _118 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_118 + idx + 68] = mem[_112 + idx + 32]
                idx = idx + 32
                continue 
            mem[_118 + 68] = mem[_118 + 74 len 26]
            revert with memory
              from mem[64]
               len _118 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 1
        _85 = mem[64]
        mem[64] = mem[64] + 64
        mem[_85] = 30
        mem[_85 + 32] = 'SafeMath: subtraction overflow'
        if stor1[stor5[idx]] > t:
            _87 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_87 + idx + 68] = mem[_85 + idx + 32]
                idx = idx + 32
                continue 
            mem[_87 + 68] = mem[_87 + 70 len 30]
            revert with memory
              from mem[64]
               len _87 + -mem[64] + 100
        require idx < stor5.length
        mem[0] = stor5[idx]
        mem[32] = 2
        _101 = mem[64]
        mem[64] = mem[64] + 64
        mem[_101] = 30
        mem[_101 + 32] = 'SafeMath: subtraction overflow'
        if stor2[stor5[idx]] <= s:
            idx = idx + 1
            s = s - stor2[stor5[idx]]
            t = t - stor1[stor5[idx]]
            continue 
        _109 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 30
        idx = 0
        while idx < 30:
            mem[_109 + idx + 68] = mem[_101 + idx + 32]
            idx = idx + 32
            continue 
        mem[_109 + 68] = mem[_109 + 70 len 30]
        revert with memory
          from mem[64]
           len _109 + -mem[64] + 100
    if t < stor6 / 5 * 10^13:
        if stor6 / 5 * 10^13 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if stor6 / 5 * 10^13:
            return (stor1[address(arg1)] / stor6 / 5 * 10^13)
    else:
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        if s:
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            if t / s:
                return (stor1[address(arg1)] / t / s)
    revert
}

function excludeAccount(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor4[address(arg1)]:
        revert with 0, 'Account is already excluded'
    if stor1[address(arg1)] > 0:
        mem[0] = arg1
        mem[32] = 1
        if stor1[address(arg1)] > stor6:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        42,
                        0x73416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e,
                        mem[206 len 22]
        idx = 0
        s = 5 * 10^13
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _90 = mem[64]
                mem[64] = mem[64] + 64
                mem[_90] = 26
                mem[_90 + 32] = 'SafeMath: division by zero'
                _108 = mem[64]
                mem[64] = mem[64] + 64
                mem[_108] = 26
                mem[_108 + 32] = 'SafeMath: division by zero'
                if stor6 / 5 * 10^13 > 0:
                    require stor6 / 5 * 10^13
                    stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 5 * 10^13
                    stor4[address(arg1)] = 1
                    stor5.length++
                    stor5[stor5.length] = arg1
                _114 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_114 + idx + 68] = mem[_108 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_114 + 68] = mem[_114 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _114 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _94 = mem[64]
                mem[64] = mem[64] + 64
                mem[_94] = 26
                mem[_94 + 32] = 'SafeMath: division by zero'
                _120 = mem[64]
                mem[64] = mem[64] + 64
                mem[_120] = 26
                mem[_120 + 32] = 'SafeMath: division by zero'
                if stor6 / 5 * 10^13 > 0:
                    require stor6 / 5 * 10^13
                    stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 5 * 10^13
                    stor4[address(arg1)] = 1
                    stor5.length++
                    stor5[stor5.length] = arg1
                _126 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_126 + idx + 68] = mem[_120 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_126 + 68] = mem[_126 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _126 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _93 = mem[64]
            mem[64] = mem[64] + 64
            mem[_93] = 30
            mem[_93 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _95 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_95 + idx + 68] = mem[_93 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_95 + 68] = mem[_95 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _95 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _109 = mem[64]
            mem[64] = mem[64] + 64
            mem[_109] = 30
            mem[_109 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _117 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_117 + idx + 68] = mem[_109 + idx + 32]
                idx = idx + 32
                continue 
            mem[_117 + 68] = mem[_117 + 70 len 30]
            revert with memory
              from mem[64]
               len _117 + -mem[64] + 100
        if t < stor6 / 5 * 10^13:
            if stor6 / 5 * 10^13 <= 0:
                revert with 0, 'SafeMath: division by zero'
            require stor6 / 5 * 10^13
            stor2[address(arg1)] = stor1[address(arg1)] / stor6 / 5 * 10^13
        else:
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if t / s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require t / s
            stor2[address(arg1)] = stor1[address(arg1)] / t / s
    stor4[address(arg1)] = 1
    stor5.length++
    stor5[stor5.length] = arg1
}

function reflectionFromToken(uint256 arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 > 5 * 10^13:
        revert with 0, 'Amount must be less than supply'
    mem[96] = 26
    mem[128] = 'SafeMath: division by zero'
    if arg2:
        if not arg1 / 100:
            mem[64] = 224
            mem[160] = 30
            mem[192] = 'SafeMath: subtraction overflow'
            if 0 > arg1:
                revert with 0, 'SafeMath: subtraction overflow'
            idx = 0
            s = 5 * 10^13
            t = stor6
            while idx < stor5.length:
                mem[0] = stor5[idx]
                mem[32] = 1
                if stor1[stor5[idx]] > t:
                    _628 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_628] = 26
                    mem[_628 + 32] = 'SafeMath: division by zero'
                    if not arg1:
                        return 0
                    require arg1
                    if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _800 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_800] = 30
                    mem[_800 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 5 * 10^13:
                        return (arg1 * stor6 / 5 * 10^13)
                    _832 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_832 + idx + 68] = mem[_800 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_832 + 68] = mem[_832 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _832 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                if stor2[stor5[idx]] > s:
                    _642 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_642] = 26
                    mem[_642 + 32] = 'SafeMath: division by zero'
                    if not arg1:
                        return 0
                    require arg1
                    if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _835 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_835] = 30
                    mem[_835 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 5 * 10^13:
                        return (arg1 * stor6 / 5 * 10^13)
                    _880 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_880 + idx + 68] = mem[_835 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_880 + 68] = mem[_880 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _880 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _638 = mem[64]
                mem[64] = mem[64] + 64
                mem[_638] = 30
                mem[_638 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _648 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_648 + idx + 68] = mem[_638 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_648 + 68] = mem[_648 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _648 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _699 = mem[64]
                mem[64] = mem[64] + 64
                mem[_699] = 30
                mem[_699 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _716 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_716 + idx + 68] = mem[_699 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_716 + 68] = mem[_716 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _716 + -mem[64] + 100
            _598 = mem[64]
            mem[64] = mem[64] + 64
            mem[_598] = 26
            mem[_598 + 32] = 'SafeMath: division by zero'
            if t < stor6 / 5 * 10^13:
                _660 = mem[64]
                mem[64] = mem[64] + 64
                mem[_660] = 26
                mem[_660 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * stor6 / 5 * 10^13:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (arg1 * stor6 / 5 * 10^13)
            _659 = mem[64]
            mem[64] = mem[64] + 64
            mem[_659] = 26
            mem[_659 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                return 0
            require arg1
            if arg1 * t / s / arg1 != t / s:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * t / s)
        require arg1 / 100
        if 3 * arg1 / 100 / arg1 / 100 != 3:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 3 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 5 * 10^13
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _625 = mem[64]
                mem[64] = mem[64] + 64
                mem[_625] = 26
                mem[_625 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _798 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_798] = 30
                    mem[_798 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= 0:
                        return (-3 * arg1 / 100 * stor6 / 5 * 10^13)
                    _825 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_825 + idx + 68] = mem[_798 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_825 + 68] = mem[_825 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _825 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _797 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_797] = 30
                    mem[_797 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 5 * 10^13:
                        return (arg1 * stor6 / 5 * 10^13)
                    _822 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_822 + idx + 68] = mem[_797 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_822 + 68] = mem[_822 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _822 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _821 = mem[64]
                mem[64] = mem[64] + 64
                mem[_821] = 30
                mem[_821 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= arg1 * stor6 / 5 * 10^13:
                    return ((arg1 * stor6 / 5 * 10^13) - (3 * arg1 / 100 * stor6 / 5 * 10^13))
                _865 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_865 + idx + 68] = mem[_821 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_865 + 68] = mem[_865 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _865 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _641 = mem[64]
                mem[64] = mem[64] + 64
                mem[_641] = 26
                mem[_641 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _829 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_829] = 30
                    mem[_829 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= 0:
                        return (-3 * arg1 / 100 * stor6 / 5 * 10^13)
                    _874 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_874 + idx + 68] = mem[_829 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_874 + 68] = mem[_874 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _874 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _828 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_828] = 30
                    mem[_828 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 5 * 10^13:
                        return (arg1 * stor6 / 5 * 10^13)
                    _871 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_871 + idx + 68] = mem[_828 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_871 + 68] = mem[_871 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _871 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _870 = mem[64]
                mem[64] = mem[64] + 64
                mem[_870] = 30
                mem[_870 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= arg1 * stor6 / 5 * 10^13:
                    return ((arg1 * stor6 / 5 * 10^13) - (3 * arg1 / 100 * stor6 / 5 * 10^13))
                _936 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_936 + idx + 68] = mem[_870 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_936 + 68] = mem[_936 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _936 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _637 = mem[64]
            mem[64] = mem[64] + 64
            mem[_637] = 30
            mem[_637 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _645 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_645 + idx + 68] = mem[_637 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_645 + 68] = mem[_645 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _645 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _697 = mem[64]
            mem[64] = mem[64] + 64
            mem[_697] = 30
            mem[_697 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _711 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_711 + idx + 68] = mem[_697 + idx + 32]
                idx = idx + 32
                continue 
            mem[_711 + 68] = mem[_711 + 70 len 30]
            revert with memory
              from mem[64]
               len _711 + -mem[64] + 100
        _593 = mem[64]
        mem[64] = mem[64] + 64
        mem[_593] = 26
        mem[_593 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 5 * 10^13:
            _658 = mem[64]
            mem[64] = mem[64] + 64
            mem[_658] = 26
            mem[_658 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if not 3 * arg1 / 100:
                    return 0
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (-3 * arg1 / 100 * stor6 / 5 * 10^13)
            require arg1
            if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 3 * arg1 / 100:
                if 0 > arg1 * stor6 / 5 * 10^13:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (arg1 * stor6 / 5 * 10^13)
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 3 * arg1 / 100 * stor6 / 5 * 10^13 > arg1 * stor6 / 5 * 10^13:
                revert with 0, 'SafeMath: subtraction overflow'
            return ((arg1 * stor6 / 5 * 10^13) - (3 * arg1 / 100 * stor6 / 5 * 10^13))
        _657 = mem[64]
        mem[64] = mem[64] + 64
        mem[_657] = 26
        mem[_657 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            if not 3 * arg1 / 100:
                return 0
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 3 * arg1 / 100 * t / s > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return (-3 * arg1 / 100 * t / s)
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not 3 * arg1 / 100:
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * t / s)
        require 3 * arg1 / 100
        if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if 3 * arg1 / 100 * t / s > arg1 * t / s:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((arg1 * t / s) - (3 * arg1 / 100 * t / s))
    if not arg1 / 100:
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 0 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 5 * 10^13
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _634 = mem[64]
                mem[64] = mem[64] + 64
                mem[_634] = 26
                mem[_634 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _805 = mem[64]
                mem[64] = mem[64] + 64
                mem[_805] = 30
                mem[_805 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= arg1 * stor6 / 5 * 10^13:
                    return (arg1 * stor6 / 5 * 10^13)
                _849 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_849 + idx + 68] = mem[_805 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_849 + 68] = mem[_849 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _849 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _644 = mem[64]
                mem[64] = mem[64] + 64
                mem[_644] = 26
                mem[_644 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    return 0
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _852 = mem[64]
                mem[64] = mem[64] + 64
                mem[_852] = 30
                mem[_852 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= arg1 * stor6 / 5 * 10^13:
                    return (arg1 * stor6 / 5 * 10^13)
                _902 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_902 + idx + 68] = mem[_852 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_902 + 68] = mem[_902 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _902 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _640 = mem[64]
            mem[64] = mem[64] + 64
            mem[_640] = 30
            mem[_640 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _654 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_654 + idx + 68] = mem[_640 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_654 + 68] = mem[_654 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _654 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _703 = mem[64]
            mem[64] = mem[64] + 64
            mem[_703] = 30
            mem[_703 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _726 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_726 + idx + 68] = mem[_703 + idx + 32]
                idx = idx + 32
                continue 
            mem[_726 + 68] = mem[_726 + 70 len 30]
            revert with memory
              from mem[64]
               len _726 + -mem[64] + 100
        _608 = mem[64]
        mem[64] = mem[64] + 64
        mem[_608] = 26
        mem[_608 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 5 * 10^13:
            _664 = mem[64]
            mem[64] = mem[64] + 64
            mem[_664] = 26
            mem[_664 + 32] = 'SafeMath: division by zero'
            if not arg1:
                return 0
            require arg1
            if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 0 > arg1 * stor6 / 5 * 10^13:
                revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * stor6 / 5 * 10^13)
        _663 = mem[64]
        mem[64] = mem[64] + 64
        mem[_663] = 26
        mem[_663 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            return 0
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if 0 > arg1 * t / s:
            revert with 0, 'SafeMath: subtraction overflow'
    else:
        require arg1 / 100
        if 3 * arg1 / 100 / arg1 / 100 != 3:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 3 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 5 * 10^13
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _631 = mem[64]
                mem[64] = mem[64] + 64
                mem[_631] = 26
                mem[_631 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _803 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_803] = 30
                    mem[_803 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= 0:
                        return 0
                    _842 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_842 + idx + 68] = mem[_803 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_842 + 68] = mem[_842 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _842 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _802 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_802] = 30
                    mem[_802 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 5 * 10^13:
                        return (arg1 * stor6 / 5 * 10^13)
                    _839 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_839 + idx + 68] = mem[_802 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_839 + 68] = mem[_839 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _839 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _838 = mem[64]
                mem[64] = mem[64] + 64
                mem[_838] = 30
                mem[_838 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= arg1 * stor6 / 5 * 10^13:
                    return (arg1 * stor6 / 5 * 10^13)
                _887 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_887 + idx + 68] = mem[_838 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_887 + 68] = mem[_887 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _887 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] > s:
                _643 = mem[64]
                mem[64] = mem[64] + 64
                mem[_643] = 26
                mem[_643 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        return 0
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _846 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_846] = 30
                    mem[_846 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= 0:
                        return 0
                    _896 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_896 + idx + 68] = mem[_846 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_896 + 68] = mem[_896 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _896 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _845 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_845] = 30
                    mem[_845 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= arg1 * stor6 / 5 * 10^13:
                        return (arg1 * stor6 / 5 * 10^13)
                    _893 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_893 + idx + 68] = mem[_845 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_893 + 68] = mem[_893 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _893 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _892 = mem[64]
                mem[64] = mem[64] + 64
                mem[_892] = 30
                mem[_892 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 <= arg1 * stor6 / 5 * 10^13:
                    return (arg1 * stor6 / 5 * 10^13)
                _970 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_970 + idx + 68] = mem[_892 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_970 + 68] = mem[_970 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _970 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 1
            _639 = mem[64]
            mem[64] = mem[64] + 64
            mem[_639] = 30
            mem[_639 + 32] = 'SafeMath: subtraction overflow'
            if stor1[stor5[idx]] > t:
                _651 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_651 + idx + 68] = mem[_639 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_651 + 68] = mem[_651 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _651 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            _701 = mem[64]
            mem[64] = mem[64] + 64
            mem[_701] = 30
            mem[_701 + 32] = 'SafeMath: subtraction overflow'
            if stor2[stor5[idx]] <= s:
                idx = idx + 1
                s = s - stor2[stor5[idx]]
                t = t - stor1[stor5[idx]]
                continue 
            _721 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_721 + idx + 68] = mem[_701 + idx + 32]
                idx = idx + 32
                continue 
            mem[_721 + 68] = mem[_721 + 70 len 30]
            revert with memory
              from mem[64]
               len _721 + -mem[64] + 100
        _603 = mem[64]
        mem[64] = mem[64] + 64
        mem[_603] = 26
        mem[_603 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 5 * 10^13:
            _662 = mem[64]
            mem[64] = mem[64] + 64
            mem[_662] = 26
            mem[_662 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 3 * arg1 / 100:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    else:
                        return 0
                else:
                    return 0
            require arg1
            if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 3 * arg1 / 100:
                if 0 > arg1 * stor6 / 5 * 10^13:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 > arg1 * stor6 / 5 * 10^13:
                    revert with 0, 'SafeMath: subtraction overflow'
            return (arg1 * stor6 / 5 * 10^13)
        _661 = mem[64]
        mem[64] = mem[64] + 64
        mem[_661] = 26
        mem[_661 + 32] = 'SafeMath: division by zero'
        if s <= 0:
            revert with 0, 'SafeMath: division by zero'
        require s
        if not arg1:
            if 3 * arg1 / 100:
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 3 * arg1 / 100 * t / s > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                else:
                    return 0
            else:
                return 0
        require arg1
        if arg1 * t / s / arg1 != t / s:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        if not 3 * arg1 / 100:
            if 0 > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
        else:
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if 3 * arg1 / 100 * t / s > arg1 * t / s:
                revert with 0, 'SafeMath: subtraction overflow'
    return (arg1 * t / s)
}

function reflect(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = msg.sender
    mem[32] = 4
    if stor4[address(msg.sender)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    44,
                    0x734578636c75646564206164647265737365732063616e6e6f742063616c6c20746869732066756e6374696f,
                    mem[208 len 20]
    mem[96] = 26
    mem[128] = 'SafeMath: division by zero'
    if not arg1 / 100:
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 0 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 5 * 10^13
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _750 = mem[64]
                mem[64] = mem[64] + 64
                mem[_750] = 26
                mem[_750 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    _828 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_828] = 30
                    mem[_828 + 32] = 'SafeMath: subtraction overflow'
                    mem[0] = msg.sender
                    mem[32] = 1
                    _896 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_896] = 30
                    mem[_896 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _945 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_945 + idx + 68] = mem[_896 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_945 + 68] = mem[_945 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _945 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1036 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1036] = 30
                    mem[_1036 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1105 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1105 + idx + 68] = mem[_1036 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1105 + 68] = mem[_1105 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1105 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _836 = mem[64]
                mem[64] = mem[64] + 64
                mem[_836] = 30
                mem[_836 + 32] = 'SafeMath: subtraction overflow'
                if 0 > arg1 * stor6 / 5 * 10^13:
                    _857 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_857 + idx + 68] = mem[_836 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_857 + 68] = mem[_857 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _857 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _944 = mem[64]
                mem[64] = mem[64] + 64
                mem[_944] = 30
                mem[_944 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                    _1008 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1008 + idx + 68] = mem[_944 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1008 + 68] = mem[_1008 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1008 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
                _1102 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1102] = 30
                mem[_1102 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 5 * 10^13
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1186 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1186 + idx + 68] = mem[_1102 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1186 + 68] = mem[_1186 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1186 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] <= s:
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _754 = mem[64]
                mem[64] = mem[64] + 64
                mem[_754] = 30
                mem[_754 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _760 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_760 + idx + 68] = mem[_754 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_760 + 68] = mem[_760 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _760 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _785 = mem[64]
                mem[64] = mem[64] + 64
                mem[_785] = 30
                mem[_785 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _796 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_796 + idx + 68] = mem[_785 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_796 + 68] = mem[_796 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _796 + -mem[64] + 100
            _756 = mem[64]
            mem[64] = mem[64] + 64
            mem[_756] = 26
            mem[_756 + 32] = 'SafeMath: division by zero'
            if not arg1:
                _837 = mem[64]
                mem[64] = mem[64] + 64
                mem[_837] = 30
                mem[_837 + 32] = 'SafeMath: subtraction overflow'
                mem[0] = msg.sender
                mem[32] = 1
                _950 = mem[64]
                mem[64] = mem[64] + 64
                mem[_950] = 30
                mem[_950 + 32] = 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    _1014 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1014 + idx + 68] = mem[_950 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1014 + 68] = mem[_1014 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1014 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _1108 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1108] = 30
                mem[_1108 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= stor6:
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1193 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1193 + idx + 68] = mem[_1108 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1193 + 68] = mem[_1193 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1193 + -mem[64] + 100
            require arg1
            if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _860 = mem[64]
            mem[64] = mem[64] + 64
            mem[_860] = 30
            mem[_860 + 32] = 'SafeMath: subtraction overflow'
            if 0 > arg1 * stor6 / 5 * 10^13:
                _886 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_886 + idx + 68] = mem[_860 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_886 + 68] = mem[_886 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _886 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            _1013 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1013] = 30
            mem[_1013 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                _1081 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1081 + idx + 68] = mem[_1013 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1081 + 68] = mem[_1081 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1081 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
            _1190 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1190] = 30
            mem[_1190 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 5 * 10^13 <= stor6:
                stor6 += -1 * arg1 * stor6 / 5 * 10^13
                if totalFees + arg1 < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += arg1
            _1280 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1280 + idx + 68] = mem[_1190 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1280 + 68] = mem[_1280 + 70 len 30]
            revert with memory
              from mem[64]
               len _1280 + -mem[64] + 100
        _736 = mem[64]
        mem[64] = mem[64] + 64
        mem[_736] = 26
        mem[_736 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 5 * 10^13:
            _766 = mem[64]
            mem[64] = mem[64] + 64
            mem[_766] = 26
            mem[_766 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * stor6 / 5 * 10^13:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
                if arg1 * stor6 / 5 * 10^13 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * stor6 / 5 * 10^13
        else:
            _765 = mem[64]
            mem[64] = mem[64] + 64
            mem[_765] = 26
            mem[_765 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * t / s / arg1 != t / s:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if 0 > arg1 * t / s:
                    revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * t / s > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * t / s
                if arg1 * t / s > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * t / s
    else:
        require arg1 / 100
        if 3 * arg1 / 100 / arg1 / 100 != 3:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        mem[64] = 224
        mem[160] = 30
        mem[192] = 'SafeMath: subtraction overflow'
        if 3 * arg1 / 100 > arg1:
            revert with 0, 'SafeMath: subtraction overflow'
        idx = 0
        s = 5 * 10^13
        t = stor6
        while idx < stor5.length:
            mem[0] = stor5[idx]
            mem[32] = 1
            if stor1[stor5[idx]] > t:
                _747 = mem[64]
                mem[64] = mem[64] + 64
                mem[_747] = 26
                mem[_747 + 32] = 'SafeMath: division by zero'
                if not arg1:
                    if not 3 * arg1 / 100:
                        _827 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_827] = 30
                        mem[_827 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 1
                        _893 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_893] = 30
                        mem[_893 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _936 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_936 + idx + 68] = mem[_893 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_936 + 68] = mem[_936 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _936 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _1027 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_1027] = 30
                        mem[_1027 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees + arg1 < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += arg1
                        _1096 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_1096 + idx + 68] = mem[_1027 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_1096 + 68] = mem[_1096 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _1096 + -mem[64] + 100
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _834 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_834] = 30
                    mem[_834 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 > 0:
                        _850 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_850 + idx + 68] = mem[_834 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_850 + 68] = mem[_850 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _850 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _935 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_935] = 30
                    mem[_935 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _990 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_990 + idx + 68] = mem[_935 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_990 + 68] = mem[_990 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _990 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1093 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1093] = 30
                    mem[_1093 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1167 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1167 + idx + 68] = mem[_1093 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1167 + 68] = mem[_1167 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1167 + -mem[64] + 100
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    _833 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_833] = 30
                    mem[_833 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > arg1 * stor6 / 5 * 10^13:
                        _847 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_847 + idx + 68] = mem[_833 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_847 + 68] = mem[_847 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _847 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _934 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_934] = 30
                    mem[_934 + 32] = 'SafeMath: subtraction overflow'
                    if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                        _987 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_987 + idx + 68] = mem[_934 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_987 + 68] = mem[_987 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _987 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
                    _1090 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1090] = 30
                    mem[_1090 + 32] = 'SafeMath: subtraction overflow'
                    if arg1 * stor6 / 5 * 10^13 <= stor6:
                        stor6 += -1 * arg1 * stor6 / 5 * 10^13
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1164 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1164 + idx + 68] = mem[_1090 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1164 + 68] = mem[_1164 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1164 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _846 = mem[64]
                mem[64] = mem[64] + 64
                mem[_846] = 30
                mem[_846 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 > arg1 * stor6 / 5 * 10^13:
                    _869 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_869 + idx + 68] = mem[_846 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_869 + 68] = mem[_869 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _869 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _986 = mem[64]
                mem[64] = mem[64] + 64
                mem[_986] = 30
                mem[_986 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                    _1053 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1053 + idx + 68] = mem[_986 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1053 + 68] = mem[_1053 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1053 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
                _1161 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1161] = 30
                mem[_1161 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 5 * 10^13
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1246 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1246 + idx + 68] = mem[_1161 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1246 + 68] = mem[_1246 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1246 + -mem[64] + 100
            require idx < stor5.length
            mem[0] = stor5[idx]
            mem[32] = 2
            if stor2[stor5[idx]] <= s:
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 1
                _753 = mem[64]
                mem[64] = mem[64] + 64
                mem[_753] = 30
                mem[_753 + 32] = 'SafeMath: subtraction overflow'
                if stor1[stor5[idx]] > t:
                    _757 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_757 + idx + 68] = mem[_753 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_757 + 68] = mem[_757 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _757 + -mem[64] + 100
                require idx < stor5.length
                mem[0] = stor5[idx]
                mem[32] = 2
                _783 = mem[64]
                mem[64] = mem[64] + 64
                mem[_783] = 30
                mem[_783 + 32] = 'SafeMath: subtraction overflow'
                if stor2[stor5[idx]] <= s:
                    idx = idx + 1
                    s = s - stor2[stor5[idx]]
                    t = t - stor1[stor5[idx]]
                    continue 
                _791 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_791 + idx + 68] = mem[_783 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_791 + 68] = mem[_791 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _791 + -mem[64] + 100
            _755 = mem[64]
            mem[64] = mem[64] + 64
            mem[_755] = 26
            mem[_755 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if not 3 * arg1 / 100:
                    _835 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_835] = 30
                    mem[_835 + 32] = 'SafeMath: subtraction overflow'
                    mem[0] = msg.sender
                    mem[32] = 1
                    _943 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_943] = 30
                    mem[_943 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > stor1[address(msg.sender)]:
                        _999 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_999 + idx + 68] = mem[_943 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_999 + 68] = mem[_999 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _999 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _1099 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1099] = 30
                    mem[_1099 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees + arg1 < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += arg1
                    _1177 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1177 + idx + 68] = mem[_1099 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1177 + 68] = mem[_1177 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1177 + -mem[64] + 100
                require 3 * arg1 / 100
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _854 = mem[64]
                mem[64] = mem[64] + 64
                mem[_854] = 30
                mem[_854 + 32] = 'SafeMath: subtraction overflow'
                if 3 * arg1 / 100 * stor6 / 5 * 10^13 > 0:
                    _879 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_879 + idx + 68] = mem[_854 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_879 + 68] = mem[_879 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _879 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _998 = mem[64]
                mem[64] = mem[64] + 64
                mem[_998] = 30
                mem[_998 + 32] = 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    _1065 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1065 + idx + 68] = mem[_998 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1065 + 68] = mem[_1065 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1065 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _1174 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1174] = 30
                mem[_1174 + 32] = 'SafeMath: subtraction overflow'
                if 0 <= stor6:
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1260 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1260 + idx + 68] = mem[_1174 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1260 + 68] = mem[_1260 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1260 + -mem[64] + 100
            require arg1
            if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if not 3 * arg1 / 100:
                _853 = mem[64]
                mem[64] = mem[64] + 64
                mem[_853] = 30
                mem[_853 + 32] = 'SafeMath: subtraction overflow'
                if 0 > arg1 * stor6 / 5 * 10^13:
                    _876 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_876 + idx + 68] = mem[_853 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_876 + 68] = mem[_876 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _876 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                _997 = mem[64]
                mem[64] = mem[64] + 64
                mem[_997] = 30
                mem[_997 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                    _1062 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_1062 + idx + 68] = mem[_997 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_1062 + 68] = mem[_1062 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _1062 + -mem[64] + 100
                mem[0] = msg.sender
                mem[32] = 1
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
                _1171 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1171] = 30
                mem[_1171 + 32] = 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 <= stor6:
                    stor6 += -1 * arg1 * stor6 / 5 * 10^13
                    if totalFees + arg1 < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += arg1
                _1257 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1257 + idx + 68] = mem[_1171 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1257 + 68] = mem[_1257 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1257 + -mem[64] + 100
            require 3 * arg1 / 100
            if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _875 = mem[64]
            mem[64] = mem[64] + 64
            mem[_875] = 30
            mem[_875 + 32] = 'SafeMath: subtraction overflow'
            if 3 * arg1 / 100 * stor6 / 5 * 10^13 > arg1 * stor6 / 5 * 10^13:
                _916 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_916 + idx + 68] = mem[_875 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_916 + 68] = mem[_916 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _916 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            _1061 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1061] = 30
            mem[_1061 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                _1133 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1133 + idx + 68] = mem[_1061 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1133 + 68] = mem[_1133 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1133 + -mem[64] + 100
            mem[0] = msg.sender
            mem[32] = 1
            stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
            _1254 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1254] = 30
            mem[_1254 + 32] = 'SafeMath: subtraction overflow'
            if arg1 * stor6 / 5 * 10^13 <= stor6:
                stor6 += -1 * arg1 * stor6 / 5 * 10^13
                if totalFees + arg1 < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += arg1
            _1332 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_1332 + idx + 68] = mem[_1254 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1332 + 68] = mem[_1332 + 70 len 30]
            revert with memory
              from mem[64]
               len _1332 + -mem[64] + 100
        _731 = mem[64]
        mem[64] = mem[64] + 64
        mem[_731] = 26
        mem[_731 + 32] = 'SafeMath: division by zero'
        if t < stor6 / 5 * 10^13:
            _764 = mem[64]
            mem[64] = mem[64] + 64
            mem[_764] = 26
            mem[_764 + 32] = 'SafeMath: division by zero'
            if not arg1:
                if 3 * arg1 / 100:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * stor6 / 5 * 10^13 / arg1 != stor6 / 5 * 10^13:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    if 0 > arg1 * stor6 / 5 * 10^13:
                        revert with 0, 'SafeMath: subtraction overflow'
                else:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 / 3 * arg1 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * stor6 / 5 * 10^13 > arg1 * stor6 / 5 * 10^13:
                        revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * stor6 / 5 * 10^13
                if arg1 * stor6 / 5 * 10^13 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * stor6 / 5 * 10^13
        else:
            _763 = mem[64]
            mem[64] = mem[64] + 64
            mem[_763] = 26
            mem[_763 + 32] = 'SafeMath: division by zero'
            if s <= 0:
                revert with 0, 'SafeMath: division by zero'
            require s
            if not arg1:
                if 3 * arg1 / 100:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * t / s > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
            else:
                require arg1
                if arg1 * t / s / arg1 != t / s:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if not 3 * arg1 / 100:
                    if 0 > arg1 * t / s:
                        revert with 0, 'SafeMath: subtraction overflow'
                else:
                    require 3 * arg1 / 100
                    if 3 * arg1 / 100 * t / s / 3 * arg1 / 100 != t / s:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if 3 * arg1 / 100 * t / s > arg1 * t / s:
                        revert with 0, 'SafeMath: subtraction overflow'
                if arg1 * t / s > stor1[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor1[address(msg.sender)] += -1 * arg1 * t / s
                if arg1 * t / s > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor6 += -1 * arg1 * t / s
    if totalFees + arg1 < totalFees:
        revert with 0, 'SafeMath: addition overflow'
    totalFees += arg1
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    37,
                    0x6f45524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                    mem[201 len 27]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    35,
                    0xfe45524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                    mem[199 len 29]
    if arg2 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    41,
                    0x655472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a6572,
                    mem[205 len 23]
    if not stor4[address(msg.sender)]:
        if stor4[address(msg.sender)]:
            if stor4[address(msg.sender)]:
                mem[0] = msg.sender
                mem[32] = 4
                if not stor4[address(msg.sender)]:
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not arg2 / 100:
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 5 * 10^13
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32145 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32145] = 26
                                mem[_32145 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34623 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34623] = 30
                                    mem[_34623 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36551 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36551] = 30
                                    mem[_36551 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _37890 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37890 + idx + 68] = mem[_36551 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37890 + 68] = mem[_37890 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37890 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _45407 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45407] = 30
                                    mem[_45407 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _47854 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_47854 + idx + 68] = mem[_45407 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_47854 + 68] = mem[_47854 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _47854 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34811 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34811] = 30
                                mem[_34811 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35162 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35162 + idx + 68] = mem[_34811 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35162 + 68] = mem[_35162 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35162 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _37889 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37889] = 30
                                mem[_37889 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _39274 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39274 + idx + 68] = mem[_37889 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39274 + 68] = mem[_39274 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39274 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _47853 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_47853] = 30
                                mem[_47853 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _49974 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_49974 + idx + 68] = mem[_47853 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_49974 + 68] = mem[_49974 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _49974 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32329 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32329] = 30
                                mem[_32329 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32455 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32455 + idx + 68] = mem[_32329 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32455 + 68] = mem[_32455 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32455 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33260 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33260] = 30
                                mem[_33260 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33451 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33451 + idx + 68] = mem[_33260 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33451 + 68] = mem[_33451 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33451 + -mem[64] + 100
                            _32391 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32391] = 26
                            mem[_32391 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34812 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34812] = 30
                                mem[_34812 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _37895 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37895] = 30
                                mem[_37895 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39281 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39281 + idx + 68] = mem[_37895 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39281 + 68] = mem[_39281 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39281 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _47858 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_47858] = 30
                                mem[_47858 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _49979 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_49979 + idx + 68] = mem[_47858 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_49979 + 68] = mem[_49979 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _49979 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35165 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35165] = 30
                            mem[_35165 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                _35821 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35821 + idx + 68] = mem[_35165 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35821 + 68] = mem[_35821 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35821 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39280 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39280] = 30
                            mem[_39280 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _41244 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_41244 + idx + 68] = mem[_39280 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_41244 + 68] = mem[_41244 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _41244 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            _49978 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49978] = 30
                            mem[_49978 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _51737 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_51737 + idx + 68] = mem[_49978 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_51737 + 68] = mem[_51737 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _51737 + -mem[64] + 100
                        _31651 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31651] = 26
                        mem[_31651 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 5 * 10^13:
                            _32641 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32641] = 26
                            mem[_32641 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                        else:
                            _32640 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32640] = 26
                            mem[_32640 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        require arg2 / 100
                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 5 * 10^13
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32142 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32142] = 26
                                mem[_32142 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34622 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34622] = 30
                                        mem[_34622 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36548 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36548] = 30
                                        mem[_36548 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37881 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37881 + idx + 68] = mem[_36548 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37881 + 68] = mem[_37881 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37881 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45396 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45396] = 30
                                        mem[_45396 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _47839 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47839 + idx + 68] = mem[_45396 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47839 + 68] = mem[_47839 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47839 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34809 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34809] = 30
                                    mem[_34809 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _35155 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35155 + idx + 68] = mem[_34809 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35155 + 68] = mem[_35155 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35155 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37880] = 30
                                    mem[_37880 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39255 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39255 + idx + 68] = mem[_37880 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39255 + 68] = mem[_39255 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39255 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _47838 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47838] = 30
                                    mem[_47838 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _49960 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49960 + idx + 68] = mem[_47838 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49960 + 68] = mem[_49960 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49960 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _34808 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34808] = 30
                                    mem[_34808 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35152 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35152 + idx + 68] = mem[_34808 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35152 + 68] = mem[_35152 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35152 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37879 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37879] = 30
                                    mem[_37879 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39252 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39252 + idx + 68] = mem[_37879 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39252 + 68] = mem[_39252 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39252 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _47837 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47837] = 30
                                    mem[_47837 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _49957 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49957 + idx + 68] = mem[_47837 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49957 + 68] = mem[_49957 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49957 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35151 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35151] = 30
                                mem[_35151 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _35804 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35804 + idx + 68] = mem[_35151 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35804 + 68] = mem[_35804 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35804 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39251 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39251] = 30
                                mem[_39251 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41208 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41208 + idx + 68] = mem[_39251 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41208 + 68] = mem[_41208 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41208 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _49956 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49956] = 30
                                mem[_49956 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51709 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51709 + idx + 68] = mem[_49956 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51709 + 68] = mem[_51709 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51709 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32328 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32328] = 30
                                mem[_32328 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32452 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32452 + idx + 68] = mem[_32328 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32452 + 68] = mem[_32452 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32452 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33258 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33258] = 30
                                mem[_33258 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33446 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33446 + idx + 68] = mem[_33258 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33446 + 68] = mem[_33446 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33446 + -mem[64] + 100
                            _32390 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32390] = 26
                            mem[_32390 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _34810 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34810] = 30
                                    mem[_34810 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37888 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37888] = 30
                                    mem[_37888 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39265 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39265 + idx + 68] = mem[_37888 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39265 + 68] = mem[_39265 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39265 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _47846 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47846] = 30
                                    mem[_47846 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _49967 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_49967 + idx + 68] = mem[_47846 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_49967 + 68] = mem[_49967 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _49967 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35159 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35159] = 30
                                mem[_35159 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                    _35814 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35814 + idx + 68] = mem[_35159 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35814 + 68] = mem[_35814 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35814 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39264 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39264] = 30
                                mem[_39264 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _41224 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41224 + idx + 68] = mem[_39264 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41224 + 68] = mem[_41224 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41224 + -mem[64] + 100
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                _49966 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49966] = 30
                                mem[_49966 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51721 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51721 + idx + 68] = mem[_49966 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51721 + 68] = mem[_51721 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51721 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _35158 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35158] = 30
                                mem[_35158 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35811 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35811 + idx + 68] = mem[_35158 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35811 + 68] = mem[_35811 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35811 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39263 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39263] = 30
                                mem[_39263 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41221 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41221 + idx + 68] = mem[_39263 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41221 + 68] = mem[_41221 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41221 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _49965 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49965] = 30
                                mem[_49965 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51718 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51718 + idx + 68] = mem[_49965 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51718 + 68] = mem[_51718 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51718 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35810 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35810] = 30
                            mem[_35810 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                _36811 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36811 + idx + 68] = mem[_35810 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36811 + 68] = mem[_36811 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36811 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41220 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41220] = 30
                            mem[_41220 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _43477 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43477 + idx + 68] = mem[_41220 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43477 + 68] = mem[_43477 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43477 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                            _51717 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51717] = 30
                            mem[_51717 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _53595 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53595 + idx + 68] = mem[_51717 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53595 + 68] = mem[_53595 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53595 + -mem[64] + 100
                        _31646 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31646] = 26
                        mem[_31646 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 5 * 10^13:
                            _32639 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32639] = 26
                            mem[_32639 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                        else:
                            _32638 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32638] = 26
                            mem[_32638 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                        if totalFees + (3 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 3 * arg2 / 100
                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not stor4[address(arg1)]:
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32151 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32151] = 26
                                    mem[_32151 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34625 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34625] = 30
                                        mem[_34625 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36559 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36559] = 30
                                        mem[_36559 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37909 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37909 + idx + 68] = mem[_36559 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37909 + 68] = mem[_37909 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37909 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45430 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45430] = 30
                                        mem[_45430 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _47887 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47887 + idx + 68] = mem[_45430 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47887 + 68] = mem[_47887 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47887 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34816 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34816] = 30
                                    mem[_34816 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35179 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35179 + idx + 68] = mem[_34816 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35179 + 68] = mem[_35179 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35179 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37908 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37908] = 30
                                    mem[_37908 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39317 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39317 + idx + 68] = mem[_37908 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39317 + 68] = mem[_39317 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39317 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _47886 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47886] = 30
                                    mem[_47886 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50010 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50010 + idx + 68] = mem[_47886 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50010 + 68] = mem[_50010 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50010 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32331 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32331] = 30
                                    mem[_32331 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32461 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32461 + idx + 68] = mem[_32331 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32461 + 68] = mem[_32461 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32461 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33264 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33264] = 30
                                    mem[_33264 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33461 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33461 + idx + 68] = mem[_33264 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33461 + 68] = mem[_33461 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33461 + -mem[64] + 100
                                _32393 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32393] = 26
                                mem[_32393 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34817 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34817] = 30
                                    mem[_34817 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37914 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37914] = 30
                                    mem[_37914 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39324 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39324 + idx + 68] = mem[_37914 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39324 + 68] = mem[_39324 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39324 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _47891 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47891] = 30
                                    mem[_47891 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50015 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50015 + idx + 68] = mem[_47891 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50015 + 68] = mem[_50015 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50015 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35182 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35182] = 30
                                mem[_35182 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35845 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35845 + idx + 68] = mem[_35182 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35845 + 68] = mem[_35845 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35845 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39323 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39323] = 30
                                mem[_39323 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41300 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41300 + idx + 68] = mem[_39323 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41300 + 68] = mem[_41300 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41300 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _50014 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50014] = 30
                                mem[_50014 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _51781 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51781 + idx + 68] = mem[_50014 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51781 + 68] = mem[_51781 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51781 + -mem[64] + 100
                            _31661 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31661] = 26
                            mem[_31661 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32645 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32645] = 26
                                mem[_32645 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            else:
                                _32644 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32644] = 26
                                mem[_32644 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32148 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32148] = 26
                                    mem[_32148 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34624 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34624] = 30
                                            mem[_34624 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36556 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36556] = 30
                                            mem[_36556 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37900 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37900 + idx + 68] = mem[_36556 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37900 + 68] = mem[_37900 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37900 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45419 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45419] = 30
                                            mem[_45419 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _47872 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47872 + idx + 68] = mem[_45419 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47872 + 68] = mem[_47872 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47872 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34814 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34814] = 30
                                        mem[_34814 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35172 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35172 + idx + 68] = mem[_34814 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35172 + 68] = mem[_35172 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35172 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37899 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37899] = 30
                                        mem[_37899 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39298 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39298 + idx + 68] = mem[_37899 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39298 + 68] = mem[_39298 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39298 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _47871 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47871] = 30
                                        mem[_47871 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _49996 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49996 + idx + 68] = mem[_47871 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49996 + 68] = mem[_49996 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49996 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _34813 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34813] = 30
                                        mem[_34813 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35169 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35169 + idx + 68] = mem[_34813 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35169 + 68] = mem[_35169 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35169 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37898 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37898] = 30
                                        mem[_37898 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39295 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39295 + idx + 68] = mem[_37898 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39295 + 68] = mem[_39295 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39295 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _47870 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47870] = 30
                                        mem[_47870 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _49993 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_49993 + idx + 68] = mem[_47870 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_49993 + 68] = mem[_49993 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _49993 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35168 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35168] = 30
                                    mem[_35168 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _35828 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35828 + idx + 68] = mem[_35168 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35828 + 68] = mem[_35828 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35828 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39294 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39294] = 30
                                    mem[_39294 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41264 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41264 + idx + 68] = mem[_39294 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41264 + 68] = mem[_41264 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41264 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _49992 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49992] = 30
                                    mem[_49992 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51753 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51753 + idx + 68] = mem[_49992 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51753 + 68] = mem[_51753 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51753 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32330 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32330] = 30
                                    mem[_32330 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32458 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32458 + idx + 68] = mem[_32330 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32458 + 68] = mem[_32458 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32458 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33262 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33262] = 30
                                    mem[_33262 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33456 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33456 + idx + 68] = mem[_33262 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33456 + 68] = mem[_33456 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33456 + -mem[64] + 100
                                _32392 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32392] = 26
                                mem[_32392 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34815 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34815] = 30
                                        mem[_34815 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37907 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37907] = 30
                                        mem[_37907 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39308 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39308 + idx + 68] = mem[_37907 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39308 + 68] = mem[_39308 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39308 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47879 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47879] = 30
                                        mem[_47879 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50003 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50003 + idx + 68] = mem[_47879 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50003 + 68] = mem[_50003 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50003 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35176 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35176] = 30
                                    mem[_35176 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _35838 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35838 + idx + 68] = mem[_35176 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35838 + 68] = mem[_35838 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35838 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39307 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39307] = 30
                                    mem[_39307 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41280 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41280 + idx + 68] = mem[_39307 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41280 + 68] = mem[_41280 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41280 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _50002 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50002] = 30
                                    mem[_50002 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51765 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51765 + idx + 68] = mem[_50002 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51765 + 68] = mem[_51765 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51765 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _35175 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35175] = 30
                                    mem[_35175 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35835 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35835 + idx + 68] = mem[_35175 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35835 + 68] = mem[_35835 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35835 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39306 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39306] = 30
                                    mem[_39306 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41277 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41277 + idx + 68] = mem[_39306 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41277 + 68] = mem[_41277 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41277 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50001 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50001] = 30
                                    mem[_50001 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51762 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51762 + idx + 68] = mem[_50001 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51762 + 68] = mem[_51762 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51762 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35834 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35834] = 30
                                mem[_35834 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _36846 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36846 + idx + 68] = mem[_35834 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36846 + 68] = mem[_36846 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36846 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41276 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41276] = 30
                                mem[_41276 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _43539 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43539 + idx + 68] = mem[_41276 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43539 + 68] = mem[_43539 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43539 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _51761 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51761] = 30
                                mem[_51761 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53645 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53645 + idx + 68] = mem[_51761 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53645 + 68] = mem[_53645 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53645 + -mem[64] + 100
                            _31656 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31656] = 26
                            mem[_31656 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32643 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32643] = 26
                                mem[_32643 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                _32642 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32642] = 26
                                mem[_32642 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                    else:
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32157 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32157] = 26
                                    mem[_32157 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34627 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34627] = 30
                                        mem[_34627 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36567 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36567] = 30
                                        mem[_36567 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37928 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37928 + idx + 68] = mem[_36567 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37928 + 68] = mem[_37928 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37928 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _43629 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43629] = 30
                                        mem[_43629 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _46299 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_46299 + idx + 68] = mem[_43629 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_46299 + 68] = mem[_46299 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _46299 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _53689 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_53689] = 30
                                        mem[_53689 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _55777 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_55777 + idx + 68] = mem[_53689 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_55777 + 68] = mem[_55777 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _55777 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34821 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34821] = 30
                                    mem[_34821 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35196 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35196 + idx + 68] = mem[_34821 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35196 + 68] = mem[_35196 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35196 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37927 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37927] = 30
                                    mem[_37927 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39360 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39360 + idx + 68] = mem[_37927 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39360 + 68] = mem[_39360 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39360 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _46298 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46298] = 30
                                    mem[_46298 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _48936 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48936 + idx + 68] = mem[_46298 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48936 + 68] = mem[_48936 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48936 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] += arg2
                                    _55776 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55776] = 30
                                    mem[_55776 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _57652 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_57652 + idx + 68] = mem[_55776 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_57652 + 68] = mem[_57652 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _57652 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32333 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32333] = 30
                                    mem[_32333 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32467 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32467 + idx + 68] = mem[_32333 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32467 + 68] = mem[_32467 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32467 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33268 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33268] = 30
                                    mem[_33268 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33471 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33471 + idx + 68] = mem[_33268 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33471 + 68] = mem[_33471 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33471 + -mem[64] + 100
                                _32395 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32395] = 26
                                mem[_32395 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34822 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34822] = 30
                                    mem[_34822 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37933 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37933] = 30
                                    mem[_37933 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39367 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39367 + idx + 68] = mem[_37933 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39367 + 68] = mem[_39367 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39367 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _46305 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_46305] = 30
                                    mem[_46305 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _48943 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48943 + idx + 68] = mem[_46305 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48943 + 68] = mem[_48943 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48943 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] += arg2
                                    _55781 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_55781] = 30
                                    mem[_55781 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _57657 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_57657 + idx + 68] = mem[_55781 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_57657 + 68] = mem[_57657 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _57657 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35199 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35199] = 30
                                mem[_35199 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35869 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35869 + idx + 68] = mem[_35199 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35869 + 68] = mem[_35869 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35869 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39366 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39366] = 30
                                mem[_39366 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41356 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41356 + idx + 68] = mem[_39366 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41356 + 68] = mem[_41356 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41356 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                mem[0] = msg.sender
                                mem[32] = 2
                                _48942 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_48942] = 30
                                mem[_48942 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _51004 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51004 + idx + 68] = mem[_48942 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51004 + 68] = mem[_51004 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51004 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] += arg2
                                _57656 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_57656] = 30
                                mem[_57656 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _59046 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_59046 + idx + 68] = mem[_57656 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_59046 + 68] = mem[_59046 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _59046 + -mem[64] + 100
                            _31671 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31671] = 26
                            mem[_31671 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32649 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32649] = 26
                                mem[_32649 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            else:
                                _32648 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32648] = 26
                                mem[_32648 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor2[address(arg1)] += arg2
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32154 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32154] = 26
                                    mem[_32154 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34626 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34626] = 30
                                            mem[_34626 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36564 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36564] = 30
                                            mem[_36564 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37919 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37919 + idx + 68] = mem[_36564 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37919 + 68] = mem[_37919 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37919 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43601 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43601] = 30
                                            mem[_43601 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _46273 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46273 + idx + 68] = mem[_43601 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46273 + 68] = mem[_46273 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46273 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _53678 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53678] = 30
                                            mem[_53678 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _55762 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_55762 + idx + 68] = mem[_53678 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_55762 + 68] = mem[_55762 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _55762 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34819 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34819] = 30
                                        mem[_34819 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35189 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35189 + idx + 68] = mem[_34819 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35189 + 68] = mem[_35189 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35189 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37918 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37918] = 30
                                        mem[_37918 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39341 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39341 + idx + 68] = mem[_37918 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39341 + 68] = mem[_39341 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39341 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _46272 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46272] = 30
                                        mem[_46272 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _48914 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48914 + idx + 68] = mem[_46272 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48914 + 68] = mem[_48914 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48914 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _55761 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55761] = 30
                                        mem[_55761 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _57638 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57638 + idx + 68] = mem[_55761 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57638 + 68] = mem[_57638 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57638 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _34818 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34818] = 30
                                        mem[_34818 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35186 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35186 + idx + 68] = mem[_34818 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35186 + 68] = mem[_35186 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35186 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37917 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37917] = 30
                                        mem[_37917 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39338 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39338 + idx + 68] = mem[_37917 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39338 + 68] = mem[_39338 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39338 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _46271 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46271] = 30
                                        mem[_46271 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _48911 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48911 + idx + 68] = mem[_46271 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48911 + 68] = mem[_48911 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48911 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _55760 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55760] = 30
                                        mem[_55760 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _57635 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57635 + idx + 68] = mem[_55760 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57635 + 68] = mem[_57635 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57635 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35185 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35185] = 30
                                    mem[_35185 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _35852 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35852 + idx + 68] = mem[_35185 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35852 + 68] = mem[_35852 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35852 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39337 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39337] = 30
                                    mem[_39337 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41320 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41320 + idx + 68] = mem[_39337 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41320 + 68] = mem[_41320 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41320 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _48910 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48910] = 30
                                    mem[_48910 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _50968 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50968 + idx + 68] = mem[_48910 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50968 + 68] = mem[_50968 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50968 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _57634 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57634] = 30
                                    mem[_57634 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _59018 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59018 + idx + 68] = mem[_57634 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59018 + 68] = mem[_59018 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59018 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32332 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32332] = 30
                                    mem[_32332 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32464 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32464 + idx + 68] = mem[_32332 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32464 + 68] = mem[_32464 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32464 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33266 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33266] = 30
                                    mem[_33266 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33466 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33466 + idx + 68] = mem[_33266 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33466 + 68] = mem[_33466 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33466 + -mem[64] + 100
                                _32394 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32394] = 26
                                mem[_32394 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34820 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34820] = 30
                                        mem[_34820 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37926 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37926] = 30
                                        mem[_37926 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39351 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39351 + idx + 68] = mem[_37926 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39351 + 68] = mem[_39351 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39351 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _46285 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46285] = 30
                                        mem[_46285 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _48925 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48925 + idx + 68] = mem[_46285 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48925 + 68] = mem[_48925 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48925 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _55769 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55769] = 30
                                        mem[_55769 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _57645 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57645 + idx + 68] = mem[_55769 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57645 + 68] = mem[_57645 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57645 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35193 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35193] = 30
                                    mem[_35193 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _35862 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35862 + idx + 68] = mem[_35193 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35862 + 68] = mem[_35862 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35862 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39350 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39350] = 30
                                    mem[_39350 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41336 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41336 + idx + 68] = mem[_39350 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41336 + 68] = mem[_41336 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41336 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _48924 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48924] = 30
                                    mem[_48924 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _50984 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50984 + idx + 68] = mem[_48924 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50984 + 68] = mem[_50984 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50984 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _57644 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57644] = 30
                                    mem[_57644 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _59030 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59030 + idx + 68] = mem[_57644 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59030 + 68] = mem[_59030 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59030 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _35192 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35192] = 30
                                    mem[_35192 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35859 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35859 + idx + 68] = mem[_35192 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35859 + 68] = mem[_35859 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35859 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39349 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39349] = 30
                                    mem[_39349 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41333 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41333 + idx + 68] = mem[_39349 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41333 + 68] = mem[_41333 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41333 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _48923 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48923] = 30
                                    mem[_48923 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _50981 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50981 + idx + 68] = mem[_48923 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50981 + 68] = mem[_50981 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50981 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _57643 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57643] = 30
                                    mem[_57643 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _59027 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59027 + idx + 68] = mem[_57643 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59027 + 68] = mem[_59027 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59027 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35858 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35858] = 30
                                mem[_35858 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _36881 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36881 + idx + 68] = mem[_35858 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36881 + 68] = mem[_36881 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36881 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41332 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41332] = 30
                                mem[_41332 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _43602 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43602 + idx + 68] = mem[_41332 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43602 + 68] = mem[_43602 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43602 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                mem[0] = msg.sender
                                mem[32] = 2
                                _50980 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50980] = 30
                                mem[_50980 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _52804 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52804 + idx + 68] = mem[_50980 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52804 + 68] = mem[_52804 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52804 + -mem[64] + 100
                                stor2[address(msg.sender)] -= arg2
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                _59026 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_59026] = 30
                                mem[_59026 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _60080 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_60080 + idx + 68] = mem[_59026 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_60080 + 68] = mem[_60080 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _60080 + -mem[64] + 100
                            _31666 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31666] = 26
                            mem[_31666 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32647 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32647] = 26
                                mem[_32647 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                _32646 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32646] = 26
                                mem[_32646 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
            else:
                mem[0] = arg1
                mem[32] = 4
                if not stor4[address(arg1)]:
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not arg2 / 100:
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 5 * 10^13
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32181 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32181] = 26
                                mem[_32181 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34635 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34635] = 30
                                    mem[_34635 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36599 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36599] = 30
                                    mem[_36599 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _38004 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38004 + idx + 68] = mem[_36599 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38004 + 68] = mem[_38004 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38004 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _45551 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_45551] = 30
                                    mem[_45551 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _48046 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_48046 + idx + 68] = mem[_45551 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_48046 + 68] = mem[_48046 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _48046 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34841 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34841] = 30
                                mem[_34841 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35264 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35264 + idx + 68] = mem[_34841 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35264 + 68] = mem[_35264 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35264 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38003 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38003] = 30
                                mem[_38003 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _39532 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39532 + idx + 68] = mem[_38003 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39532 + 68] = mem[_39532 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39532 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _48045 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_48045] = 30
                                mem[_48045 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _50162 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_50162 + idx + 68] = mem[_48045 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_50162 + 68] = mem[_50162 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _50162 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32341 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32341] = 30
                                mem[_32341 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32491 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32491 + idx + 68] = mem[_32341 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32491 + 68] = mem[_32491 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32491 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33284 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33284] = 30
                                mem[_33284 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33511 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33511 + idx + 68] = mem[_33284 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33511 + 68] = mem[_33511 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33511 + -mem[64] + 100
                            _32403 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32403] = 26
                            mem[_32403 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34842 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34842] = 30
                                mem[_34842 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38009 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38009] = 30
                                mem[_38009 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39539 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39539 + idx + 68] = mem[_38009 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39539 + 68] = mem[_39539 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39539 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                _48050 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_48050] = 30
                                mem[_48050 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _50167 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_50167 + idx + 68] = mem[_48050 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_50167 + 68] = mem[_50167 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _50167 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35267 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35267] = 30
                            mem[_35267 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                _35965 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35965 + idx + 68] = mem[_35267 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35965 + 68] = mem[_35965 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35965 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39538 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39538] = 30
                            mem[_39538 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _41580 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_41580 + idx + 68] = mem[_39538 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_41580 + 68] = mem[_41580 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _41580 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            _50166 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_50166] = 30
                            mem[_50166 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _51945 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_51945 + idx + 68] = mem[_50166 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_51945 + 68] = mem[_51945 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _51945 + -mem[64] + 100
                        _31711 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31711] = 26
                        mem[_31711 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 5 * 10^13:
                            _32665 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32665] = 26
                            mem[_32665 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                        else:
                            _32664 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32664] = 26
                            mem[_32664 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        require arg2 / 100
                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 5 * 10^13
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32178 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32178] = 26
                                mem[_32178 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34634 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34634] = 30
                                        mem[_34634 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36596 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36596] = 30
                                        mem[_36596 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37995 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37995 + idx + 68] = mem[_36596 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37995 + 68] = mem[_37995 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37995 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45540 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45540] = 30
                                        mem[_45540 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _48031 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48031 + idx + 68] = mem[_45540 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48031 + 68] = mem[_48031 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48031 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34839 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34839] = 30
                                    mem[_34839 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _35257 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35257 + idx + 68] = mem[_34839 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35257 + 68] = mem[_35257 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35257 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37994 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37994] = 30
                                    mem[_37994 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39513 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39513 + idx + 68] = mem[_37994 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39513 + 68] = mem[_39513 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39513 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _48030 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48030] = 30
                                    mem[_48030 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _50148 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50148 + idx + 68] = mem[_48030 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50148 + 68] = mem[_50148 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50148 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _34838 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34838] = 30
                                    mem[_34838 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35254 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35254 + idx + 68] = mem[_34838 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35254 + 68] = mem[_35254 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35254 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37993 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37993] = 30
                                    mem[_37993 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39510 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39510 + idx + 68] = mem[_37993 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39510 + 68] = mem[_39510 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39510 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _48029 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48029] = 30
                                    mem[_48029 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _50145 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50145 + idx + 68] = mem[_48029 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50145 + 68] = mem[_50145 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50145 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35253 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35253] = 30
                                mem[_35253 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _35948 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35948 + idx + 68] = mem[_35253 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35948 + 68] = mem[_35948 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35948 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39509 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39509] = 30
                                mem[_39509 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41544 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41544 + idx + 68] = mem[_39509 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41544 + 68] = mem[_41544 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41544 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _50144 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50144] = 30
                                mem[_50144 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51917 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51917 + idx + 68] = mem[_50144 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51917 + 68] = mem[_51917 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51917 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32340 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32340] = 30
                                mem[_32340 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32488 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32488 + idx + 68] = mem[_32340 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32488 + 68] = mem[_32488 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32488 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33282 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33282] = 30
                                mem[_33282 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33506 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33506 + idx + 68] = mem[_33282 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33506 + 68] = mem[_33506 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33506 + -mem[64] + 100
                            _32402 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32402] = 26
                            mem[_32402 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _34840 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34840] = 30
                                    mem[_34840 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38002 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38002] = 30
                                    mem[_38002 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39523 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39523 + idx + 68] = mem[_38002 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39523 + 68] = mem[_39523 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39523 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48038 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48038] = 30
                                    mem[_48038 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _50155 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50155 + idx + 68] = mem[_48038 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50155 + 68] = mem[_50155 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50155 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35261 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35261] = 30
                                mem[_35261 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                    _35958 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35958 + idx + 68] = mem[_35261 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35958 + 68] = mem[_35958 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35958 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39522 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39522] = 30
                                mem[_39522 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _41560 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41560 + idx + 68] = mem[_39522 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41560 + 68] = mem[_41560 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41560 + -mem[64] + 100
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                _50154 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50154] = 30
                                mem[_50154 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51929 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51929 + idx + 68] = mem[_50154 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51929 + 68] = mem[_51929 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51929 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _35260 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35260] = 30
                                mem[_35260 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35955 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35955 + idx + 68] = mem[_35260 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35955 + 68] = mem[_35955 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35955 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39521 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39521] = 30
                                mem[_39521 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41557 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41557 + idx + 68] = mem[_39521 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41557 + 68] = mem[_41557 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41557 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _50153 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50153] = 30
                                mem[_50153 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _51926 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51926 + idx + 68] = mem[_50153 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51926 + 68] = mem[_51926 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51926 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35954 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35954] = 30
                            mem[_35954 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                _37021 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37021 + idx + 68] = mem[_35954 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37021 + 68] = mem[_37021 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37021 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _41556 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41556] = 30
                            mem[_41556 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _43853 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_43853 + idx + 68] = mem[_41556 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_43853 + 68] = mem[_43853 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _43853 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 1
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                            _51925 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51925] = 30
                            mem[_51925 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _53841 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53841 + idx + 68] = mem[_51925 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53841 + 68] = mem[_53841 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53841 + -mem[64] + 100
                        _31706 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31706] = 26
                        mem[_31706 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 5 * 10^13:
                            _32663 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32663] = 26
                            mem[_32663 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                        else:
                            _32662 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32662] = 26
                            mem[_32662 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                        if totalFees + (3 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 3 * arg2 / 100
                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32163 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32163] = 26
                                    mem[_32163 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34629 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34629] = 30
                                        mem[_34629 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36575 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36575] = 30
                                        mem[_36575 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _37947 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37947 + idx + 68] = mem[_36575 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37947 + 68] = mem[_37947 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37947 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45479 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45479] = 30
                                        mem[_45479 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _47950 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_47950 + idx + 68] = mem[_45479 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_47950 + 68] = mem[_47950 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _47950 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34826 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34826] = 30
                                    mem[_34826 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35213 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35213 + idx + 68] = mem[_34826 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35213 + 68] = mem[_35213 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35213 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37946 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37946] = 30
                                    mem[_37946 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39403 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39403 + idx + 68] = mem[_37946 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39403 + 68] = mem[_39403 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39403 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _47949 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47949] = 30
                                    mem[_47949 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50068 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50068 + idx + 68] = mem[_47949 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50068 + 68] = mem[_50068 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50068 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32335 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32335] = 30
                                    mem[_32335 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32473 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32473 + idx + 68] = mem[_32335 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32473 + 68] = mem[_32473 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32473 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33272 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33272] = 30
                                    mem[_33272 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33481 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33481 + idx + 68] = mem[_33272 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33481 + 68] = mem[_33481 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33481 + -mem[64] + 100
                                _32397 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32397] = 26
                                mem[_32397 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34827 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34827] = 30
                                    mem[_34827 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _37952 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37952] = 30
                                    mem[_37952 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39410 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39410 + idx + 68] = mem[_37952 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39410 + 68] = mem[_39410 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39410 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _47954 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_47954] = 30
                                    mem[_47954 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50073 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50073 + idx + 68] = mem[_47954 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50073 + 68] = mem[_50073 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50073 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35216 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35216] = 30
                                mem[_35216 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35893 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35893 + idx + 68] = mem[_35216 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35893 + 68] = mem[_35893 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35893 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39409 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39409] = 30
                                mem[_39409 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41412 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41412 + idx + 68] = mem[_39409 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41412 + 68] = mem[_41412 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41412 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _50072 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50072] = 30
                                mem[_50072 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _51841 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51841 + idx + 68] = mem[_50072 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51841 + 68] = mem[_51841 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51841 + -mem[64] + 100
                            _31681 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31681] = 26
                            mem[_31681 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32653 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32653] = 26
                                mem[_32653 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            else:
                                _32652 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32652] = 26
                                mem[_32652 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32160 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32160] = 26
                                    mem[_32160 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34628 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34628] = 30
                                            mem[_34628 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36572 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36572] = 30
                                            mem[_36572 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37938 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37938 + idx + 68] = mem[_36572 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37938 + 68] = mem[_37938 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37938 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45468 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45468] = 30
                                            mem[_45468 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _47935 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47935 + idx + 68] = mem[_45468 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47935 + 68] = mem[_47935 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47935 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34824 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34824] = 30
                                        mem[_34824 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35206 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35206 + idx + 68] = mem[_34824 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35206 + 68] = mem[_35206 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35206 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37937 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37937] = 30
                                        mem[_37937 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39384 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39384 + idx + 68] = mem[_37937 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39384 + 68] = mem[_39384 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39384 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _47934 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47934] = 30
                                        mem[_47934 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50054 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50054 + idx + 68] = mem[_47934 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50054 + 68] = mem[_50054 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50054 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _34823 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34823] = 30
                                        mem[_34823 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35203 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35203 + idx + 68] = mem[_34823 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35203 + 68] = mem[_35203 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35203 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37936 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37936] = 30
                                        mem[_37936 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39381 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39381 + idx + 68] = mem[_37936 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39381 + 68] = mem[_39381 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39381 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _47933 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47933] = 30
                                        mem[_47933 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50051 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50051 + idx + 68] = mem[_47933 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50051 + 68] = mem[_50051 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50051 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35202 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35202] = 30
                                    mem[_35202 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _35876 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35876 + idx + 68] = mem[_35202 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35876 + 68] = mem[_35876 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35876 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39380 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39380] = 30
                                    mem[_39380 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41376 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41376 + idx + 68] = mem[_39380 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41376 + 68] = mem[_41376 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41376 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _50050 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50050] = 30
                                    mem[_50050 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51813 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51813 + idx + 68] = mem[_50050 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51813 + 68] = mem[_51813 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51813 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32334 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32334] = 30
                                    mem[_32334 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32470 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32470 + idx + 68] = mem[_32334 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32470 + 68] = mem[_32470 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32470 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33270 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33270] = 30
                                    mem[_33270 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33476 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33476 + idx + 68] = mem[_33270 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33476 + 68] = mem[_33476 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33476 + -mem[64] + 100
                                _32396 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32396] = 26
                                mem[_32396 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34825 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34825] = 30
                                        mem[_34825 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37945 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37945] = 30
                                        mem[_37945 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39394 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39394 + idx + 68] = mem[_37945 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39394 + 68] = mem[_39394 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39394 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47942 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47942] = 30
                                        mem[_47942 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50061 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50061 + idx + 68] = mem[_47942 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50061 + 68] = mem[_50061 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50061 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35210 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35210] = 30
                                    mem[_35210 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _35886 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35886 + idx + 68] = mem[_35210 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35886 + 68] = mem[_35886 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35886 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39393 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39393] = 30
                                    mem[_39393 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41392 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41392 + idx + 68] = mem[_39393 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41392 + 68] = mem[_41392 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41392 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _50060 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50060] = 30
                                    mem[_50060 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51825 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51825 + idx + 68] = mem[_50060 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51825 + 68] = mem[_51825 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51825 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _35209 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35209] = 30
                                    mem[_35209 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35883 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35883 + idx + 68] = mem[_35209 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35883 + 68] = mem[_35883 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35883 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39392 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39392] = 30
                                    mem[_39392 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41389 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41389 + idx + 68] = mem[_39392 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41389 + 68] = mem[_41389 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41389 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50059 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50059] = 30
                                    mem[_50059 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51822 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51822 + idx + 68] = mem[_50059 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51822 + 68] = mem[_51822 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51822 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35882 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35882] = 30
                                mem[_35882 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _36916 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36916 + idx + 68] = mem[_35882 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36916 + 68] = mem[_36916 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36916 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41388 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41388] = 30
                                mem[_41388 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _43665 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43665 + idx + 68] = mem[_41388 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43665 + 68] = mem[_43665 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43665 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _51821 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51821] = 30
                                mem[_51821 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53718 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53718 + idx + 68] = mem[_51821 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53718 + 68] = mem[_53718 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53718 + -mem[64] + 100
                            _31676 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31676] = 26
                            mem[_31676 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32651 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32651] = 26
                                mem[_32651 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                _32650 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32650] = 26
                                mem[_32650 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not stor4[address(arg1)]:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32169 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32169] = 26
                                        mem[_32169 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34631 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34631] = 30
                                            mem[_34631 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36583 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36583] = 30
                                            mem[_36583 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37966 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37966 + idx + 68] = mem[_36583 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37966 + 68] = mem[_37966 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37966 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45502 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45502] = 30
                                            mem[_45502 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _47983 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_47983 + idx + 68] = mem[_45502 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_47983 + 68] = mem[_47983 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _47983 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34831 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34831] = 30
                                        mem[_34831 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35230 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35230 + idx + 68] = mem[_34831 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35230 + 68] = mem[_35230 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35230 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37965 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37965] = 30
                                        mem[_37965 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39446 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39446 + idx + 68] = mem[_37965 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39446 + 68] = mem[_39446 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39446 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _47982 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47982] = 30
                                        mem[_47982 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50104 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50104 + idx + 68] = mem[_47982 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50104 + 68] = mem[_50104 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50104 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32337 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32337] = 30
                                        mem[_32337 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32479 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32479 + idx + 68] = mem[_32337 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32479 + 68] = mem[_32479 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32479 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33276 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33276] = 30
                                        mem[_33276 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33491 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33491 + idx + 68] = mem[_33276 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33491 + 68] = mem[_33491 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33491 + -mem[64] + 100
                                    _32399 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32399] = 26
                                    mem[_32399 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34832 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34832] = 30
                                        mem[_34832 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37971 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37971] = 30
                                        mem[_37971 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39453 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39453 + idx + 68] = mem[_37971 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39453 + 68] = mem[_39453 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39453 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _47987 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47987] = 30
                                        mem[_47987 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50109 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50109 + idx + 68] = mem[_47987 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50109 + 68] = mem[_50109 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50109 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35233 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35233] = 30
                                    mem[_35233 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35917 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35917 + idx + 68] = mem[_35233 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35917 + 68] = mem[_35917 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35917 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39452 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39452] = 30
                                    mem[_39452 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41468 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41468 + idx + 68] = mem[_39452 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41468 + 68] = mem[_41468 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41468 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50108 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50108] = 30
                                    mem[_50108 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _51885 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51885 + idx + 68] = mem[_50108 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51885 + 68] = mem[_51885 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51885 + -mem[64] + 100
                                _31691 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31691] = 26
                                mem[_31691 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32657 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32657] = 26
                                    mem[_32657 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32656 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32656] = 26
                                    mem[_32656 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32166 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32166] = 26
                                        mem[_32166 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34630 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34630] = 30
                                                mem[_34630 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36580 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36580] = 30
                                                mem[_36580 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _37957 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37957 + idx + 68] = mem[_36580 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37957 + 68] = mem[_37957 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37957 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45491 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45491] = 30
                                                mem[_45491 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _47968 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47968 + idx + 68] = mem[_45491 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47968 + 68] = mem[_47968 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47968 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34829 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34829] = 30
                                            mem[_34829 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35223 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35223 + idx + 68] = mem[_34829 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35223 + 68] = mem[_35223 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35223 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37956 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37956] = 30
                                            mem[_37956 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39427 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39427 + idx + 68] = mem[_37956 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39427 + 68] = mem[_39427 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39427 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _47967 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47967] = 30
                                            mem[_47967 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50090 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50090 + idx + 68] = mem[_47967 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50090 + 68] = mem[_50090 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50090 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34828 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34828] = 30
                                            mem[_34828 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35220 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35220 + idx + 68] = mem[_34828 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35220 + 68] = mem[_35220 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35220 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37955 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37955] = 30
                                            mem[_37955 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39424 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39424 + idx + 68] = mem[_37955 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39424 + 68] = mem[_39424 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39424 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _47966 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47966] = 30
                                            mem[_47966 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50087 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50087 + idx + 68] = mem[_47966 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50087 + 68] = mem[_50087 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50087 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35219 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35219] = 30
                                        mem[_35219 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _35900 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35900 + idx + 68] = mem[_35219 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35900 + 68] = mem[_35900 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35900 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39423 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39423] = 30
                                        mem[_39423 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41432 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41432 + idx + 68] = mem[_39423 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41432 + 68] = mem[_41432 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41432 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _50086 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50086] = 30
                                        mem[_50086 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _51857 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51857 + idx + 68] = mem[_50086 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51857 + 68] = mem[_51857 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51857 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32336 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32336] = 30
                                        mem[_32336 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32476 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32476 + idx + 68] = mem[_32336 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32476 + 68] = mem[_32476 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32476 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33274 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33274] = 30
                                        mem[_33274 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33486 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33486 + idx + 68] = mem[_33274 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33486 + 68] = mem[_33486 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33486 + -mem[64] + 100
                                    _32398 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32398] = 26
                                    mem[_32398 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34830 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34830] = 30
                                            mem[_34830 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37964 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37964] = 30
                                            mem[_37964 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39437 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39437 + idx + 68] = mem[_37964 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39437 + 68] = mem[_39437 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39437 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _47975 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47975] = 30
                                            mem[_47975 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50097 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50097 + idx + 68] = mem[_47975 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50097 + 68] = mem[_50097 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50097 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35227 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35227] = 30
                                        mem[_35227 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35910 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35910 + idx + 68] = mem[_35227 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35910 + 68] = mem[_35910 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35910 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39436 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39436] = 30
                                        mem[_39436 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41448 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41448 + idx + 68] = mem[_39436 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41448 + 68] = mem[_41448 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41448 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _50096 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50096] = 30
                                        mem[_50096 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _51869 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51869 + idx + 68] = mem[_50096 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51869 + 68] = mem[_51869 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51869 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35226 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35226] = 30
                                        mem[_35226 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35907 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35907 + idx + 68] = mem[_35226 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35907 + 68] = mem[_35907 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35907 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39435 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39435] = 30
                                        mem[_39435 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41445 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41445 + idx + 68] = mem[_39435 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41445 + 68] = mem[_41445 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41445 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50095 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50095] = 30
                                        mem[_50095 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _51866 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51866 + idx + 68] = mem[_50095 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51866 + 68] = mem[_51866 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51866 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35906 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35906] = 30
                                    mem[_35906 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _36951 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36951 + idx + 68] = mem[_35906 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36951 + 68] = mem[_36951 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36951 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41444 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41444] = 30
                                    mem[_41444 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _43727 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43727 + idx + 68] = mem[_41444 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43727 + 68] = mem[_43727 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43727 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _51865 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51865] = 30
                                    mem[_51865 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53768 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53768 + idx + 68] = mem[_51865 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53768 + 68] = mem[_53768 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53768 + -mem[64] + 100
                                _31686 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31686] = 26
                                mem[_31686 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32655 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32655] = 26
                                    mem[_32655 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32654 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32654] = 26
                                    mem[_32654 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        else:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32175 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32175] = 26
                                        mem[_32175 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34633 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34633] = 30
                                            mem[_34633 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36591 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36591] = 30
                                            mem[_36591 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _37985 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37985 + idx + 68] = mem[_36591 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37985 + 68] = mem[_37985 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37985 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _43817 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43817] = 30
                                            mem[_43817 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _46463 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46463 + idx + 68] = mem[_43817 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46463 + 68] = mem[_46463 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46463 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _53812 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53812] = 30
                                            mem[_53812 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _55904 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_55904 + idx + 68] = mem[_53812 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_55904 + 68] = mem[_55904 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _55904 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34836 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34836] = 30
                                        mem[_34836 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35247 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35247 + idx + 68] = mem[_34836 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35247 + 68] = mem[_35247 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35247 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37984 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37984] = 30
                                        mem[_37984 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39489 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39489 + idx + 68] = mem[_37984 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39489 + 68] = mem[_39489 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39489 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _46462 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46462] = 30
                                        mem[_46462 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _49046 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49046 + idx + 68] = mem[_46462 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49046 + 68] = mem[_49046 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49046 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _55903 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55903] = 30
                                        mem[_55903 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57766 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57766 + idx + 68] = mem[_55903 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57766 + 68] = mem[_57766 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57766 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32339 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32339] = 30
                                        mem[_32339 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32485 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32485 + idx + 68] = mem[_32339 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32485 + 68] = mem[_32485 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32485 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33280 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33280] = 30
                                        mem[_33280 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33501 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33501 + idx + 68] = mem[_33280 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33501 + 68] = mem[_33501 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33501 + -mem[64] + 100
                                    _32401 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32401] = 26
                                    mem[_32401 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34837 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34837] = 30
                                        mem[_34837 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _37990 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37990] = 30
                                        mem[_37990 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39496 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39496 + idx + 68] = mem[_37990 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39496 + 68] = mem[_39496 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39496 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _46469 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46469] = 30
                                        mem[_46469 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _49053 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49053 + idx + 68] = mem[_46469 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49053 + 68] = mem[_49053 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49053 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _55908 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_55908] = 30
                                        mem[_55908 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57771 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57771 + idx + 68] = mem[_55908 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57771 + 68] = mem[_57771 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57771 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35250 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35250] = 30
                                    mem[_35250 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35941 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35941 + idx + 68] = mem[_35250 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35941 + 68] = mem[_35941 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35941 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39495 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39495] = 30
                                    mem[_39495 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41524 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41524 + idx + 68] = mem[_39495 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41524 + 68] = mem[_41524 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41524 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _49052 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49052] = 30
                                    mem[_49052 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _51082 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51082 + idx + 68] = mem[_49052 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51082 + 68] = mem[_51082 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51082 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] += arg2
                                    _57770 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57770] = 30
                                    mem[_57770 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _59130 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59130 + idx + 68] = mem[_57770 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59130 + 68] = mem[_59130 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59130 + -mem[64] + 100
                                _31701 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31701] = 26
                                mem[_31701 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32661 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32661] = 26
                                    mem[_32661 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32660 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32660] = 26
                                    mem[_32660 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if arg2 > stor2[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor2[address(msg.sender)] -= arg2
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32172 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32172] = 26
                                        mem[_32172 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34632 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34632] = 30
                                                mem[_34632 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36588 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36588] = 30
                                                mem[_36588 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _37976 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_37976 + idx + 68] = mem[_36588 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37976 + 68] = mem[_37976 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _37976 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _43789 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_43789] = 30
                                                mem[_43789 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _46437 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46437 + idx + 68] = mem[_43789 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46437 + 68] = mem[_46437 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46437 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _53801 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53801] = 30
                                                mem[_53801 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _55889 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_55889 + idx + 68] = mem[_53801 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_55889 + 68] = mem[_55889 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _55889 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34834 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34834] = 30
                                            mem[_34834 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35240 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35240 + idx + 68] = mem[_34834 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35240 + 68] = mem[_35240 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35240 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37975 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37975] = 30
                                            mem[_37975 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39470 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39470 + idx + 68] = mem[_37975 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39470 + 68] = mem[_39470 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39470 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46436] = 30
                                            mem[_46436 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49024 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49024 + idx + 68] = mem[_46436 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49024 + 68] = mem[_49024 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49024 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _55888 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55888] = 30
                                            mem[_55888 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57752 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57752 + idx + 68] = mem[_55888 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57752 + 68] = mem[_57752 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57752 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34833 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34833] = 30
                                            mem[_34833 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35237 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35237 + idx + 68] = mem[_34833 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35237 + 68] = mem[_35237 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35237 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37974 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37974] = 30
                                            mem[_37974 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39467 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39467 + idx + 68] = mem[_37974 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39467 + 68] = mem[_39467 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39467 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46435 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46435] = 30
                                            mem[_46435 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49021 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49021 + idx + 68] = mem[_46435 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49021 + 68] = mem[_49021 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49021 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _55887 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55887] = 30
                                            mem[_55887 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57749 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57749 + idx + 68] = mem[_55887 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57749 + 68] = mem[_57749 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57749 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35236 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35236] = 30
                                        mem[_35236 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _35924 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35924 + idx + 68] = mem[_35236 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35924 + 68] = mem[_35924 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35924 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39466 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39466] = 30
                                        mem[_39466 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41488 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41488 + idx + 68] = mem[_39466 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41488 + 68] = mem[_41488 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41488 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49020 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49020] = 30
                                        mem[_49020 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51046 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51046 + idx + 68] = mem[_49020 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51046 + 68] = mem[_51046 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51046 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _57748 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57748] = 30
                                        mem[_57748 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59102 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59102 + idx + 68] = mem[_57748 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59102 + 68] = mem[_59102 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59102 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32338 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32338] = 30
                                        mem[_32338 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32482 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32482 + idx + 68] = mem[_32338 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32482 + 68] = mem[_32482 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32482 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33278 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33278] = 30
                                        mem[_33278 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33496 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33496 + idx + 68] = mem[_33278 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33496 + 68] = mem[_33496 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33496 + -mem[64] + 100
                                    _32400 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32400] = 26
                                    mem[_32400 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34835 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34835] = 30
                                            mem[_34835 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _37983 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_37983] = 30
                                            mem[_37983 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39480 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39480 + idx + 68] = mem[_37983 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39480 + 68] = mem[_39480 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39480 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46449 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46449] = 30
                                            mem[_46449 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49035 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49035 + idx + 68] = mem[_46449 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49035 + 68] = mem[_49035 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49035 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _55896 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_55896] = 30
                                            mem[_55896 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57759 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57759 + idx + 68] = mem[_55896 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57759 + 68] = mem[_57759 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57759 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35244 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35244] = 30
                                        mem[_35244 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35934 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35934 + idx + 68] = mem[_35244 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35934 + 68] = mem[_35934 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35934 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39479 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39479] = 30
                                        mem[_39479 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41504 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41504 + idx + 68] = mem[_39479 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41504 + 68] = mem[_41504 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41504 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49034 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49034] = 30
                                        mem[_49034 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51062 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51062 + idx + 68] = mem[_49034 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51062 + 68] = mem[_51062 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51062 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _57758 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57758] = 30
                                        mem[_57758 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59114 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59114 + idx + 68] = mem[_57758 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59114 + 68] = mem[_59114 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59114 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35243 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35243] = 30
                                        mem[_35243 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35931 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35931 + idx + 68] = mem[_35243 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35931 + 68] = mem[_35931 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35931 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39478 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39478] = 30
                                        mem[_39478 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41501 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41501 + idx + 68] = mem[_39478 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41501 + 68] = mem[_41501 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41501 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49033 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49033] = 30
                                        mem[_49033 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51059 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51059 + idx + 68] = mem[_49033 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51059 + 68] = mem[_51059 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51059 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _57757 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57757] = 30
                                        mem[_57757 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59111 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59111 + idx + 68] = mem[_57757 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59111 + 68] = mem[_59111 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59111 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35930 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35930] = 30
                                    mem[_35930 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _36986 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36986 + idx + 68] = mem[_35930 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36986 + 68] = mem[_36986 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36986 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41500 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41500] = 30
                                    mem[_41500 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _43790 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43790 + idx + 68] = mem[_41500 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43790 + 68] = mem[_43790 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43790 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _51058 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51058] = 30
                                    mem[_51058 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _52886 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52886 + idx + 68] = mem[_51058 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52886 + 68] = mem[_52886 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52886 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _59110 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59110] = 30
                                    mem[_59110 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _60138 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_60138 + idx + 68] = mem[_59110 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_60138 + 68] = mem[_60138 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _60138 + -mem[64] + 100
                                _31696 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31696] = 26
                                mem[_31696 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32659 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32659] = 26
                                    mem[_32659 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32658 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32658] = 26
                                    mem[_32658 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
        else:
            mem[0] = arg1
            mem[32] = 4
            if stor4[address(arg1)]:
                mem[96] = 26
                mem[128] = 'SafeMath: division by zero'
                if not arg2 / 100:
                    mem[64] = 224
                    mem[160] = 30
                    mem[192] = 'SafeMath: subtraction overflow'
                    if 0 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow'
                    idx = 0
                    s = 5 * 10^13
                    t = stor6
                    while idx < stor5.length:
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        if stor1[stor5[idx]] > t:
                            _32229 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32229] = 26
                            mem[_32229 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34651 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34651] = 30
                                mem[_34651 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _36663 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36663] = 30
                                mem[_36663 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _38156 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38156 + idx + 68] = mem[_36663 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38156 + 68] = mem[_38156 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38156 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] += arg2
                                _49362 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_49362] = 30
                                mem[_49362 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _51284 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51284 + idx + 68] = mem[_49362 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51284 + 68] = mem[_51284 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51284 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _34881 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34881] = 30
                            mem[_34881 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                _35400 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35400 + idx + 68] = mem[_34881 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35400 + 68] = mem[_35400 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35400 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _38155 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38155] = 30
                            mem[_38155 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _39876 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_39876 + idx + 68] = mem[_38155 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_39876 + 68] = mem[_39876 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _39876 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 2
                            stor2[address(arg1)] += arg2
                            _51283 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51283] = 30
                            mem[_51283 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _53127 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53127 + idx + 68] = mem[_51283 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53127 + 68] = mem[_53127 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53127 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        if stor2[stor5[idx]] <= s:
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            _32357 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32357] = 30
                            mem[_32357 + 32] = 'SafeMath: subtraction overflow'
                            if stor1[stor5[idx]] > t:
                                _32539 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_32539 + idx + 68] = mem[_32357 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_32539 + 68] = mem[_32539 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _32539 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            _33316 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33316] = 30
                            mem[_33316 + 32] = 'SafeMath: subtraction overflow'
                            if stor2[stor5[idx]] <= s:
                                idx = idx + 1
                                s = s - stor2[stor5[idx]]
                                t = t - stor1[stor5[idx]]
                                continue 
                            _33591 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_33591 + idx + 68] = mem[_33316 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_33591 + 68] = mem[_33591 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _33591 + -mem[64] + 100
                        _32419 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32419] = 26
                        mem[_32419 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            _34882 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34882] = 30
                            mem[_34882 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _38161 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38161] = 30
                            mem[_38161 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _39883 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_39883 + idx + 68] = mem[_38161 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_39883 + 68] = mem[_39883 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _39883 + -mem[64] + 100
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 2
                            stor2[address(arg1)] += arg2
                            _51288 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51288] = 30
                            mem[_51288 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _53132 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53132 + idx + 68] = mem[_51288 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53132 + 68] = mem[_53132 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53132 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _35403 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35403] = 30
                        mem[_35403 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 5 * 10^13:
                            _36157 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36157 + idx + 68] = mem[_35403 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36157 + 68] = mem[_36157 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36157 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _39882 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_39882] = 30
                        mem[_39882 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                            _42028 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42028 + idx + 68] = mem[_39882 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42028 + 68] = mem[_42028 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42028 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 2
                        stor2[address(arg1)] += arg2
                        _53131 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_53131] = 30
                        mem[_53131 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            return 1
                        _55190 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_55190 + idx + 68] = mem[_53131 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_55190 + 68] = mem[_55190 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _55190 + -mem[64] + 100
                    _31791 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_31791] = 26
                    mem[_31791 + 32] = 'SafeMath: division by zero'
                    if t < stor6 / 5 * 10^13:
                        _32697 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32697] = 26
                        mem[_32697 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                    else:
                        _32696 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32696] = 26
                        mem[_32696 + 32] = 'SafeMath: division by zero'
                        if s <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require s
                        if not arg2:
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require arg2
                            if arg2 * t / s / arg2 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 0 > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * t / s
                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    stor2[address(arg1)] += arg2
                    if 0 > stor6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if totalFees < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    require arg2 / 100
                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    mem[64] = 224
                    mem[160] = 30
                    mem[192] = 'SafeMath: subtraction overflow'
                    if 3 * arg2 / 100 > arg2:
                        revert with 0, 'SafeMath: subtraction overflow'
                    idx = 0
                    s = 5 * 10^13
                    t = stor6
                    while idx < stor5.length:
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        if stor1[stor5[idx]] > t:
                            _32226 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32226] = 26
                            mem[_32226 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _34650 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34650] = 30
                                    mem[_34650 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36660 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36660] = 30
                                    mem[_36660 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _38147 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38147 + idx + 68] = mem[_36660 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38147 + 68] = mem[_38147 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38147 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _49350 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49350] = 30
                                    mem[_49350 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51275 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51275 + idx + 68] = mem[_49350 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51275 + 68] = mem[_51275 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51275 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34879 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34879] = 30
                                mem[_34879 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                    _35393 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35393 + idx + 68] = mem[_34879 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35393 + 68] = mem[_35393 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35393 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38146 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38146] = 30
                                mem[_38146 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39857 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39857 + idx + 68] = mem[_38146 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39857 + 68] = mem[_39857 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39857 + -mem[64] + 100
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                _51274 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51274] = 30
                                mem[_51274 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53113 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53113 + idx + 68] = mem[_51274 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53113 + 68] = mem[_53113 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53113 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _34878 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34878] = 30
                                mem[_34878 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35390 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35390 + idx + 68] = mem[_34878 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35390 + 68] = mem[_35390 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35390 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38145 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38145] = 30
                                mem[_38145 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _39854 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39854 + idx + 68] = mem[_38145 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39854 + 68] = mem[_39854 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39854 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                _51273 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51273] = 30
                                mem[_51273 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53110 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53110 + idx + 68] = mem[_51273 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53110 + 68] = mem[_53110 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53110 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35389 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35389] = 30
                            mem[_35389 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                _36140 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36140 + idx + 68] = mem[_35389 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36140 + 68] = mem[_36140 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36140 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39853 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39853] = 30
                            mem[_39853 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _41992 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_41992 + idx + 68] = mem[_39853 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_41992 + 68] = mem[_41992 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _41992 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 2
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            _53109 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53109] = 30
                            mem[_53109 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55162 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55162 + idx + 68] = mem[_53109 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55162 + 68] = mem[_55162 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55162 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        if stor2[stor5[idx]] <= s:
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            _32356 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32356] = 30
                            mem[_32356 + 32] = 'SafeMath: subtraction overflow'
                            if stor1[stor5[idx]] > t:
                                _32536 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_32536 + idx + 68] = mem[_32356 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_32536 + 68] = mem[_32536 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _32536 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            _33314 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_33314] = 30
                            mem[_33314 + 32] = 'SafeMath: subtraction overflow'
                            if stor2[stor5[idx]] <= s:
                                idx = idx + 1
                                s = s - stor2[stor5[idx]]
                                t = t - stor1[stor5[idx]]
                                continue 
                            _33586 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_33586 + idx + 68] = mem[_33314 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_33586 + 68] = mem[_33586 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _33586 + -mem[64] + 100
                        _32418 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32418] = 26
                        mem[_32418 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 3 * arg2 / 100:
                                _34880 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34880] = 30
                                mem[_34880 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38154 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38154] = 30
                                mem[_38154 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _39867 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_39867 + idx + 68] = mem[_38154 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_39867 + 68] = mem[_39867 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _39867 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                _51280 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51280] = 30
                                mem[_51280 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53120 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53120 + idx + 68] = mem[_51280 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53120 + 68] = mem[_53120 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53120 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35397 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35397] = 30
                            mem[_35397 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                _36150 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36150 + idx + 68] = mem[_35397 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36150 + 68] = mem[_36150 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36150 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39866 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39866] = 30
                            mem[_39866 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _42008 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42008 + idx + 68] = mem[_39866 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42008 + 68] = mem[_42008 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42008 + -mem[64] + 100
                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 2
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            _53119 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53119] = 30
                            mem[_53119 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55174 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55174 + idx + 68] = mem[_53119 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55174 + 68] = mem[_55174 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55174 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            _35396 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35396] = 30
                            mem[_35396 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                _36147 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36147 + idx + 68] = mem[_35396 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36147 + 68] = mem[_36147 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36147 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _39865 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_39865] = 30
                            mem[_39865 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _42005 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42005 + idx + 68] = mem[_39865 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42005 + 68] = mem[_42005 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42005 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 2
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            _53118 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53118] = 30
                            mem[_53118 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55171 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55171 + idx + 68] = mem[_53118 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55171 + 68] = mem[_55171 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55171 + -mem[64] + 100
                        require 3 * arg2 / 100
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _36146 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_36146] = 30
                        mem[_36146 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                            _37301 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37301 + idx + 68] = mem[_36146 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37301 + 68] = mem[_37301 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37301 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _42004 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_42004] = 30
                        mem[_42004 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                            _44353 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_44353 + idx + 68] = mem[_42004 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_44353 + 68] = mem[_44353 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _44353 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = arg1
                        mem[32] = 2
                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                        _55170 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55170] = 30
                        mem[_55170 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57170 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57170 + idx + 68] = mem[_55170 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57170 + 68] = mem[_57170 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57170 + -mem[64] + 100
                    _31786 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_31786] = 26
                    mem[_31786 + 32] = 'SafeMath: division by zero'
                    if t < stor6 / 5 * 10^13:
                        _32695 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32695] = 26
                        mem[_32695 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 3 * arg2 / 100:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                        else:
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                    else:
                        _32694 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32694] = 26
                        mem[_32694 + 32] = 'SafeMath: division by zero'
                        if s <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require s
                        if not arg2:
                            if not 3 * arg2 / 100:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 3 * arg2 / 100 * t / s > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 3 * arg2 / 100 * t / s > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * t / s
                        else:
                            require arg2
                            if arg2 * t / s / arg2 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                if 3 * arg2 / 100 * t / s > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor6 += -3 * arg2 / 100 * t / s
                    if totalFees + (3 * arg2 / 100) < totalFees:
                        revert with 0, 'SafeMath: addition overflow'
                    totalFees += 3 * arg2 / 100
                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
            else:
                if stor4[address(msg.sender)]:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32187 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32187] = 26
                                    mem[_32187 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34637 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34637] = 30
                                        mem[_34637 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36607 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36607] = 30
                                        mem[_36607 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38023 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38023 + idx + 68] = mem[_36607 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38023 + 68] = mem[_38023 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38023 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45574 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45574] = 30
                                        mem[_45574 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48079 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48079 + idx + 68] = mem[_45574 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48079 + 68] = mem[_48079 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48079 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34846 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34846] = 30
                                    mem[_34846 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35281 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35281 + idx + 68] = mem[_34846 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35281 + 68] = mem[_35281 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35281 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38022 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38022] = 30
                                    mem[_38022 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39575 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39575 + idx + 68] = mem[_38022 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39575 + 68] = mem[_39575 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39575 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _48078 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48078] = 30
                                    mem[_48078 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50198 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50198 + idx + 68] = mem[_48078 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50198 + 68] = mem[_50198 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50198 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32343 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32343] = 30
                                    mem[_32343 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32497 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32497 + idx + 68] = mem[_32343 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32497 + 68] = mem[_32497 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32497 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33288 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33288] = 30
                                    mem[_33288 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33521 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33521 + idx + 68] = mem[_33288 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33521 + 68] = mem[_33521 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33521 + -mem[64] + 100
                                _32405 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32405] = 26
                                mem[_32405 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34847 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34847] = 30
                                    mem[_34847 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38028 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38028] = 30
                                    mem[_38028 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39582 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39582 + idx + 68] = mem[_38028 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39582 + 68] = mem[_39582 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39582 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48083 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48083] = 30
                                    mem[_48083 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50203 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50203 + idx + 68] = mem[_48083 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50203 + 68] = mem[_50203 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50203 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35284 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35284] = 30
                                mem[_35284 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35989 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35989 + idx + 68] = mem[_35284 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35989 + 68] = mem[_35989 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35989 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39581 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39581] = 30
                                mem[_39581 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41636 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41636 + idx + 68] = mem[_39581 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41636 + 68] = mem[_41636 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41636 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _50202 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50202] = 30
                                mem[_50202 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _51989 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_51989 + idx + 68] = mem[_50202 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_51989 + 68] = mem[_51989 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _51989 + -mem[64] + 100
                            _31721 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31721] = 26
                            mem[_31721 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32669 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32669] = 26
                                mem[_32669 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            else:
                                _32668 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32668] = 26
                                mem[_32668 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32184 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32184] = 26
                                    mem[_32184 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34636 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34636] = 30
                                            mem[_34636 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36604 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36604] = 30
                                            mem[_36604 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38014 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38014 + idx + 68] = mem[_36604 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38014 + 68] = mem[_38014 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38014 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45563 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45563] = 30
                                            mem[_45563 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48064 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48064 + idx + 68] = mem[_45563 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48064 + 68] = mem[_48064 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48064 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34844 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34844] = 30
                                        mem[_34844 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35274 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35274 + idx + 68] = mem[_34844 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35274 + 68] = mem[_35274 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35274 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38013 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38013] = 30
                                        mem[_38013 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39556 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39556 + idx + 68] = mem[_38013 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39556 + 68] = mem[_39556 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39556 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _48063 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48063] = 30
                                        mem[_48063 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50184 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50184 + idx + 68] = mem[_48063 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50184 + 68] = mem[_50184 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50184 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _34843 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34843] = 30
                                        mem[_34843 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35271 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35271 + idx + 68] = mem[_34843 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35271 + 68] = mem[_35271 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35271 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38012 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38012] = 30
                                        mem[_38012 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39553 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39553 + idx + 68] = mem[_38012 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39553 + 68] = mem[_39553 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39553 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48062 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48062] = 30
                                        mem[_48062 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50181 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50181 + idx + 68] = mem[_48062 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50181 + 68] = mem[_50181 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50181 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35270 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35270] = 30
                                    mem[_35270 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _35972 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35972 + idx + 68] = mem[_35270 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35972 + 68] = mem[_35972 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35972 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39552 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39552] = 30
                                    mem[_39552 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41600 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41600 + idx + 68] = mem[_39552 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41600 + 68] = mem[_41600 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41600 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _50180 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50180] = 30
                                    mem[_50180 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51961 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51961 + idx + 68] = mem[_50180 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51961 + 68] = mem[_51961 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51961 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32342 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32342] = 30
                                    mem[_32342 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32494 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32494 + idx + 68] = mem[_32342 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32494 + 68] = mem[_32494 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32494 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33286 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33286] = 30
                                    mem[_33286 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33516 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33516 + idx + 68] = mem[_33286 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33516 + 68] = mem[_33516 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33516 + -mem[64] + 100
                                _32404 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32404] = 26
                                mem[_32404 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34845 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34845] = 30
                                        mem[_34845 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38021 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38021] = 30
                                        mem[_38021 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39566 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39566 + idx + 68] = mem[_38021 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39566 + 68] = mem[_39566 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39566 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48071 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48071] = 30
                                        mem[_48071 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50191 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50191 + idx + 68] = mem[_48071 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50191 + 68] = mem[_50191 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50191 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35278 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35278] = 30
                                    mem[_35278 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _35982 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35982 + idx + 68] = mem[_35278 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35982 + 68] = mem[_35982 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35982 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39565 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39565] = 30
                                    mem[_39565 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41616 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41616 + idx + 68] = mem[_39565 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41616 + 68] = mem[_41616 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41616 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _50190 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50190] = 30
                                    mem[_50190 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51973 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51973 + idx + 68] = mem[_50190 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51973 + 68] = mem[_51973 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51973 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _35277 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35277] = 30
                                    mem[_35277 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35979 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35979 + idx + 68] = mem[_35277 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35979 + 68] = mem[_35979 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35979 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39564 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39564] = 30
                                    mem[_39564 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41613 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41613 + idx + 68] = mem[_39564 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41613 + 68] = mem[_41613 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41613 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50189 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50189] = 30
                                    mem[_50189 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _51970 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51970 + idx + 68] = mem[_50189 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51970 + 68] = mem[_51970 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51970 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35978 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35978] = 30
                                mem[_35978 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _37056 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37056 + idx + 68] = mem[_35978 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37056 + 68] = mem[_37056 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37056 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41612 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41612] = 30
                                mem[_41612 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _43915 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_43915 + idx + 68] = mem[_41612 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_43915 + 68] = mem[_43915 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _43915 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _51969 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51969] = 30
                                mem[_51969 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53891 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53891 + idx + 68] = mem[_51969 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53891 + 68] = mem[_53891 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53891 + -mem[64] + 100
                            _31716 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31716] = 26
                            mem[_31716 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32667 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32667] = 26
                                mem[_32667 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                _32666 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32666] = 26
                                mem[_32666 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not stor4[address(arg1)]:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32193 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32193] = 26
                                        mem[_32193 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34639 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34639] = 30
                                            mem[_34639 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36615 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36615] = 30
                                            mem[_36615 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38042 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38042 + idx + 68] = mem[_36615 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38042 + 68] = mem[_38042 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38042 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45597 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45597] = 30
                                            mem[_45597 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48112 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48112 + idx + 68] = mem[_45597 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48112 + 68] = mem[_48112 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48112 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34851 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34851] = 30
                                        mem[_34851 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35298 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35298 + idx + 68] = mem[_34851 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35298 + 68] = mem[_35298 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35298 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38041 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38041] = 30
                                        mem[_38041 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39618 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39618 + idx + 68] = mem[_38041 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39618 + 68] = mem[_39618 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39618 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48111 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48111] = 30
                                        mem[_48111 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50234 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50234 + idx + 68] = mem[_48111 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50234 + 68] = mem[_50234 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50234 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32345 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32345] = 30
                                        mem[_32345 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32503 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32503 + idx + 68] = mem[_32345 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32503 + 68] = mem[_32503 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32503 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33292 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33292] = 30
                                        mem[_33292 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33531 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33531 + idx + 68] = mem[_33292 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33531 + 68] = mem[_33531 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33531 + -mem[64] + 100
                                    _32407 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32407] = 26
                                    mem[_32407 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34852 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34852] = 30
                                        mem[_34852 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38047 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38047] = 30
                                        mem[_38047 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39625 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39625 + idx + 68] = mem[_38047 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39625 + 68] = mem[_39625 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39625 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48116 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48116] = 30
                                        mem[_48116 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50239 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50239 + idx + 68] = mem[_48116 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50239 + 68] = mem[_50239 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50239 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35301 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35301] = 30
                                    mem[_35301 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36013 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36013 + idx + 68] = mem[_35301 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36013 + 68] = mem[_36013 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36013 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39624 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39624] = 30
                                    mem[_39624 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41692 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41692 + idx + 68] = mem[_39624 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41692 + 68] = mem[_41692 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41692 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50238 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50238] = 30
                                    mem[_50238 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52033 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52033 + idx + 68] = mem[_50238 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52033 + 68] = mem[_52033 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52033 + -mem[64] + 100
                                _31731 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31731] = 26
                                mem[_31731 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32673 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32673] = 26
                                    mem[_32673 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32672 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32672] = 26
                                    mem[_32672 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32190 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32190] = 26
                                        mem[_32190 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34638 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34638] = 30
                                                mem[_34638 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36612 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36612] = 30
                                                mem[_36612 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38033 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38033 + idx + 68] = mem[_36612 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38033 + 68] = mem[_38033 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38033 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45586 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45586] = 30
                                                mem[_45586 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48097 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48097 + idx + 68] = mem[_45586 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48097 + 68] = mem[_48097 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48097 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34849 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34849] = 30
                                            mem[_34849 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35291 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35291 + idx + 68] = mem[_34849 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35291 + 68] = mem[_35291 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35291 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38032 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38032] = 30
                                            mem[_38032 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39599 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39599 + idx + 68] = mem[_38032 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39599 + 68] = mem[_39599 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39599 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _48096 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48096] = 30
                                            mem[_48096 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50220 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50220 + idx + 68] = mem[_48096 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50220 + 68] = mem[_50220 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50220 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34848 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34848] = 30
                                            mem[_34848 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35288 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35288 + idx + 68] = mem[_34848 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35288 + 68] = mem[_35288 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35288 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38031 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38031] = 30
                                            mem[_38031 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39596 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39596 + idx + 68] = mem[_38031 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39596 + 68] = mem[_39596 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39596 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48095 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48095] = 30
                                            mem[_48095 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50217 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50217 + idx + 68] = mem[_48095 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50217 + 68] = mem[_50217 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50217 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35287 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35287] = 30
                                        mem[_35287 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _35996 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35996 + idx + 68] = mem[_35287 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35996 + 68] = mem[_35996 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35996 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39595 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39595] = 30
                                        mem[_39595 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41656 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41656 + idx + 68] = mem[_39595 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41656 + 68] = mem[_41656 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41656 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _50216 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50216] = 30
                                        mem[_50216 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52005 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52005 + idx + 68] = mem[_50216 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52005 + 68] = mem[_52005 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52005 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32344 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32344] = 30
                                        mem[_32344 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32500 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32500 + idx + 68] = mem[_32344 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32500 + 68] = mem[_32500 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32500 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33290 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33290] = 30
                                        mem[_33290 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33526 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33526 + idx + 68] = mem[_33290 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33526 + 68] = mem[_33526 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33526 + -mem[64] + 100
                                    _32406 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32406] = 26
                                    mem[_32406 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34850 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34850] = 30
                                            mem[_34850 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38040 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38040] = 30
                                            mem[_38040 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39609 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39609 + idx + 68] = mem[_38040 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39609 + 68] = mem[_39609 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39609 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48104 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48104] = 30
                                            mem[_48104 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50227 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50227 + idx + 68] = mem[_48104 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50227 + 68] = mem[_50227 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50227 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35295 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35295] = 30
                                        mem[_35295 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36006 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36006 + idx + 68] = mem[_35295 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36006 + 68] = mem[_36006 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36006 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39608 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39608] = 30
                                        mem[_39608 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41672 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41672 + idx + 68] = mem[_39608 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41672 + 68] = mem[_41672 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41672 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _50226 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50226] = 30
                                        mem[_50226 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52017 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52017 + idx + 68] = mem[_50226 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52017 + 68] = mem[_52017 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52017 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35294 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35294] = 30
                                        mem[_35294 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36003 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36003 + idx + 68] = mem[_35294 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36003 + 68] = mem[_36003 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36003 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39607 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39607] = 30
                                        mem[_39607 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41669 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41669 + idx + 68] = mem[_39607 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41669 + 68] = mem[_41669 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41669 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50225 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50225] = 30
                                        mem[_50225 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52014 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52014 + idx + 68] = mem[_50225 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52014 + 68] = mem[_52014 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52014 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36002 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36002] = 30
                                    mem[_36002 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37091 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37091 + idx + 68] = mem[_36002 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37091 + 68] = mem[_37091 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37091 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41668 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41668] = 30
                                    mem[_41668 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _43977 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_43977 + idx + 68] = mem[_41668 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_43977 + 68] = mem[_43977 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _43977 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _52013 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52013] = 30
                                    mem[_52013 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53941 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53941 + idx + 68] = mem[_52013 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53941 + 68] = mem[_53941 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53941 + -mem[64] + 100
                                _31726 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31726] = 26
                                mem[_31726 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32671 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32671] = 26
                                    mem[_32671 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32670 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32670] = 26
                                    mem[_32670 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        else:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32199 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32199] = 26
                                        mem[_32199 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34641 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34641] = 30
                                            mem[_34641 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36623 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36623] = 30
                                            mem[_36623 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38061 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38061 + idx + 68] = mem[_36623 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38061 + 68] = mem[_38061 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38061 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _44067 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44067] = 30
                                            mem[_44067 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _46678 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_46678 + idx + 68] = mem[_44067 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_46678 + 68] = mem[_46678 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _46678 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _53985 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_53985] = 30
                                            mem[_53985 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _56078 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_56078 + idx + 68] = mem[_53985 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_56078 + 68] = mem[_56078 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _56078 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34856 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34856] = 30
                                        mem[_34856 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35315 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35315 + idx + 68] = mem[_34856 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35315 + 68] = mem[_35315 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35315 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38060 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38060] = 30
                                        mem[_38060 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39661 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39661 + idx + 68] = mem[_38060 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39661 + 68] = mem[_39661 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39661 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _46677 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46677] = 30
                                        mem[_46677 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _49183 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49183 + idx + 68] = mem[_46677 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49183 + 68] = mem[_49183 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49183 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _56077 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56077] = 30
                                        mem[_56077 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57919 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57919 + idx + 68] = mem[_56077 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57919 + 68] = mem[_57919 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57919 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32347 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32347] = 30
                                        mem[_32347 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32509 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32509 + idx + 68] = mem[_32347 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32509 + 68] = mem[_32509 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32509 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33296 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33296] = 30
                                        mem[_33296 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33541 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33541 + idx + 68] = mem[_33296 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33541 + 68] = mem[_33541 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33541 + -mem[64] + 100
                                    _32409 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32409] = 26
                                    mem[_32409 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34857 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34857] = 30
                                        mem[_34857 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38066 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38066] = 30
                                        mem[_38066 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39668 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39668 + idx + 68] = mem[_38066 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39668 + 68] = mem[_39668 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39668 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _46684 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46684] = 30
                                        mem[_46684 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _49190 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49190 + idx + 68] = mem[_46684 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49190 + 68] = mem[_49190 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49190 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _56082 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56082] = 30
                                        mem[_56082 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _57924 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_57924 + idx + 68] = mem[_56082 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_57924 + 68] = mem[_57924 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _57924 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35318 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35318] = 30
                                    mem[_35318 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36037 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36037 + idx + 68] = mem[_35318 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36037 + 68] = mem[_36037 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36037 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39667 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39667] = 30
                                    mem[_39667 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41748 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41748 + idx + 68] = mem[_39667 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41748 + 68] = mem[_41748 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41748 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _49189 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49189] = 30
                                    mem[_49189 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _51170 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51170 + idx + 68] = mem[_49189 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51170 + 68] = mem[_51170 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51170 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] += arg2
                                    _57923 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_57923] = 30
                                    mem[_57923 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _59238 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59238 + idx + 68] = mem[_57923 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59238 + 68] = mem[_59238 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59238 + -mem[64] + 100
                                _31741 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31741] = 26
                                mem[_31741 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32677 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32677] = 26
                                    mem[_32677 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32676 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32676] = 26
                                    mem[_32676 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if arg2 > stor2[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor2[address(msg.sender)] -= arg2
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32196 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32196] = 26
                                        mem[_32196 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34640 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34640] = 30
                                                mem[_34640 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36620 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36620] = 30
                                                mem[_36620 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38052 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38052 + idx + 68] = mem[_36620 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38052 + 68] = mem[_38052 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38052 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44039 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44039] = 30
                                                mem[_44039 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _46652 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46652 + idx + 68] = mem[_44039 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46652 + 68] = mem[_46652 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46652 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _53974 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53974] = 30
                                                mem[_53974 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _56063 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56063 + idx + 68] = mem[_53974 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56063 + 68] = mem[_56063 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56063 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34854 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34854] = 30
                                            mem[_34854 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35308 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35308 + idx + 68] = mem[_34854 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35308 + 68] = mem[_35308 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35308 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38051 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38051] = 30
                                            mem[_38051 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39642 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39642 + idx + 68] = mem[_38051 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39642 + 68] = mem[_39642 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39642 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46651 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46651] = 30
                                            mem[_46651 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49161 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49161 + idx + 68] = mem[_46651 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49161 + 68] = mem[_49161 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49161 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _56062 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56062] = 30
                                            mem[_56062 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57905 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57905 + idx + 68] = mem[_56062 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57905 + 68] = mem[_57905 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57905 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34853 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34853] = 30
                                            mem[_34853 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35305 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35305 + idx + 68] = mem[_34853 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35305 + 68] = mem[_35305 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35305 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38050 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38050] = 30
                                            mem[_38050 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39639 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39639 + idx + 68] = mem[_38050 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39639 + 68] = mem[_39639 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39639 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46650 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46650] = 30
                                            mem[_46650 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49158 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49158 + idx + 68] = mem[_46650 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49158 + 68] = mem[_49158 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49158 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _56061 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56061] = 30
                                            mem[_56061 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57902 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57902 + idx + 68] = mem[_56061 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57902 + 68] = mem[_57902 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57902 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35304 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35304] = 30
                                        mem[_35304 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _36020 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36020 + idx + 68] = mem[_35304 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36020 + 68] = mem[_36020 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36020 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39638 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39638] = 30
                                        mem[_39638 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41712 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41712 + idx + 68] = mem[_39638 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41712 + 68] = mem[_41712 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41712 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49157 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49157] = 30
                                        mem[_49157 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51134 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51134 + idx + 68] = mem[_49157 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51134 + 68] = mem[_51134 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51134 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _57901 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57901] = 30
                                        mem[_57901 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59210 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59210 + idx + 68] = mem[_57901 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59210 + 68] = mem[_59210 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59210 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32346 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32346] = 30
                                        mem[_32346 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32506 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32506 + idx + 68] = mem[_32346 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32506 + 68] = mem[_32506 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32506 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33294 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33294] = 30
                                        mem[_33294 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33536 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33536 + idx + 68] = mem[_33294 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33536 + 68] = mem[_33536 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33536 + -mem[64] + 100
                                    _32408 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32408] = 26
                                    mem[_32408 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34855 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34855] = 30
                                            mem[_34855 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38059 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38059] = 30
                                            mem[_38059 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39652 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39652 + idx + 68] = mem[_38059 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39652 + 68] = mem[_39652 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39652 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46664 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46664] = 30
                                            mem[_46664 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49172 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49172 + idx + 68] = mem[_46664 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49172 + 68] = mem[_49172 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49172 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _56070 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56070] = 30
                                            mem[_56070 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _57912 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_57912 + idx + 68] = mem[_56070 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_57912 + 68] = mem[_57912 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _57912 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35312 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35312] = 30
                                        mem[_35312 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36030 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36030 + idx + 68] = mem[_35312 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36030 + 68] = mem[_36030 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36030 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39651 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39651] = 30
                                        mem[_39651 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41728 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41728 + idx + 68] = mem[_39651 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41728 + 68] = mem[_41728 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41728 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49171 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49171] = 30
                                        mem[_49171 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51150 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51150 + idx + 68] = mem[_49171 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51150 + 68] = mem[_51150 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51150 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _57911 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57911] = 30
                                        mem[_57911 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59222 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59222 + idx + 68] = mem[_57911 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59222 + 68] = mem[_59222 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59222 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35311 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35311] = 30
                                        mem[_35311 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36027 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36027 + idx + 68] = mem[_35311 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36027 + 68] = mem[_36027 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36027 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39650 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39650] = 30
                                        mem[_39650 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41725 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41725 + idx + 68] = mem[_39650 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41725 + 68] = mem[_41725 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41725 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49170 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49170] = 30
                                        mem[_49170 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51147 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51147 + idx + 68] = mem[_49170 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51147 + 68] = mem[_51147 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51147 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _57910 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_57910] = 30
                                        mem[_57910 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59219 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59219 + idx + 68] = mem[_57910 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59219 + 68] = mem[_59219 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59219 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36026 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36026] = 30
                                    mem[_36026 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37126 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37126 + idx + 68] = mem[_36026 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37126 + 68] = mem[_37126 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37126 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41724 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41724] = 30
                                    mem[_41724 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _44040 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44040 + idx + 68] = mem[_41724 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44040 + 68] = mem[_44040 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44040 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _51146 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51146] = 30
                                    mem[_51146 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _52978 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52978 + idx + 68] = mem[_51146 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52978 + 68] = mem[_52978 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52978 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _59218 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59218] = 30
                                    mem[_59218 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _60210 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_60210 + idx + 68] = mem[_59218 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_60210 + 68] = mem[_60210 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _60210 + -mem[64] + 100
                                _31736 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31736] = 26
                                mem[_31736 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32675 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32675] = 26
                                    mem[_32675 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32674 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32674] = 26
                                    mem[_32674 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    if not stor4[address(arg1)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32223 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32223] = 26
                                    mem[_32223 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34649 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34649] = 30
                                        mem[_34649 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36655 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36655] = 30
                                        mem[_36655 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38137 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38137 + idx + 68] = mem[_36655 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38137 + 68] = mem[_38137 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38137 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45718 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45718] = 30
                                        mem[_45718 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48271 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48271 + idx + 68] = mem[_45718 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48271 + 68] = mem[_48271 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48271 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34876 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34876] = 30
                                    mem[_34876 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35383 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35383 + idx + 68] = mem[_34876 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35383 + 68] = mem[_35383 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35383 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38136 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38136] = 30
                                    mem[_38136 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39833 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39833 + idx + 68] = mem[_38136 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39833 + 68] = mem[_39833 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39833 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _48270 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48270] = 30
                                    mem[_48270 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50386 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50386 + idx + 68] = mem[_48270 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50386 + 68] = mem[_50386 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50386 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32355 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32355] = 30
                                    mem[_32355 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32533 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32533 + idx + 68] = mem[_32355 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32533 + 68] = mem[_32533 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32533 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33312 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33312] = 30
                                    mem[_33312 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33581 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33581 + idx + 68] = mem[_33312 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33581 + 68] = mem[_33581 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33581 + -mem[64] + 100
                                _32417 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32417] = 26
                                mem[_32417 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34877 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34877] = 30
                                    mem[_34877 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38142 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38142] = 30
                                    mem[_38142 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39840 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39840 + idx + 68] = mem[_38142 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39840 + 68] = mem[_39840 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39840 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48275 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48275] = 30
                                    mem[_48275 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50391 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50391 + idx + 68] = mem[_48275 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50391 + 68] = mem[_50391 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50391 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35386 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35386] = 30
                                mem[_35386 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _36133 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36133 + idx + 68] = mem[_35386 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36133 + 68] = mem[_36133 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36133 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39839 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39839] = 30
                                mem[_39839 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _41972 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_41972 + idx + 68] = mem[_39839 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_41972 + 68] = mem[_41972 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _41972 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _50390 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50390] = 30
                                mem[_50390 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52197 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52197 + idx + 68] = mem[_50390 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52197 + 68] = mem[_52197 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52197 + -mem[64] + 100
                            _31781 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31781] = 26
                            mem[_31781 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32693 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32693] = 26
                                mem[_32693 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            else:
                                _32692 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32692] = 26
                                mem[_32692 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32220 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32220] = 26
                                    mem[_32220 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34648 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34648] = 30
                                            mem[_34648 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36652 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36652] = 30
                                            mem[_36652 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38128 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38128 + idx + 68] = mem[_36652 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38128 + 68] = mem[_38128 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38128 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45707 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45707] = 30
                                            mem[_45707 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48256 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48256 + idx + 68] = mem[_45707 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48256 + 68] = mem[_48256 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48256 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34874 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34874] = 30
                                        mem[_34874 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35376 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35376 + idx + 68] = mem[_34874 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35376 + 68] = mem[_35376 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35376 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38127 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38127] = 30
                                        mem[_38127 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39814 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39814 + idx + 68] = mem[_38127 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39814 + 68] = mem[_39814 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39814 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _48255 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48255] = 30
                                        mem[_48255 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50372 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50372 + idx + 68] = mem[_48255 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50372 + 68] = mem[_50372 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50372 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _34873 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34873] = 30
                                        mem[_34873 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35373 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35373 + idx + 68] = mem[_34873 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35373 + 68] = mem[_35373 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35373 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38126 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38126] = 30
                                        mem[_38126 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39811 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39811 + idx + 68] = mem[_38126 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39811 + 68] = mem[_39811 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39811 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48254 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48254] = 30
                                        mem[_48254 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50369 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50369 + idx + 68] = mem[_48254 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50369 + 68] = mem[_50369 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50369 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35372 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35372] = 30
                                    mem[_35372 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _36116 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36116 + idx + 68] = mem[_35372 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36116 + 68] = mem[_36116 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36116 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39810 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39810] = 30
                                    mem[_39810 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41936 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41936 + idx + 68] = mem[_39810 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41936 + 68] = mem[_41936 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41936 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _50368 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50368] = 30
                                    mem[_50368 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52169 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52169 + idx + 68] = mem[_50368 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52169 + 68] = mem[_52169 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52169 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32354 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32354] = 30
                                    mem[_32354 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32530 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32530 + idx + 68] = mem[_32354 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32530 + 68] = mem[_32530 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32530 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33310 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33310] = 30
                                    mem[_33310 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33576 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33576 + idx + 68] = mem[_33310 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33576 + 68] = mem[_33576 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33576 + -mem[64] + 100
                                _32416 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32416] = 26
                                mem[_32416 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34875 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34875] = 30
                                        mem[_34875 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38135 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38135] = 30
                                        mem[_38135 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39824 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39824 + idx + 68] = mem[_38135 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39824 + 68] = mem[_39824 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39824 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48263 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48263] = 30
                                        mem[_48263 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50379 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50379 + idx + 68] = mem[_48263 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50379 + 68] = mem[_50379 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50379 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35380 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35380] = 30
                                    mem[_35380 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _36126 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36126 + idx + 68] = mem[_35380 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36126 + 68] = mem[_36126 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36126 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39823 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39823] = 30
                                    mem[_39823 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _41952 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41952 + idx + 68] = mem[_39823 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41952 + 68] = mem[_41952 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41952 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _50378 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50378] = 30
                                    mem[_50378 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52181 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52181 + idx + 68] = mem[_50378 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52181 + 68] = mem[_52181 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52181 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _35379 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35379] = 30
                                    mem[_35379 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36123 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36123 + idx + 68] = mem[_35379 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36123 + 68] = mem[_36123 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36123 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39822 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39822] = 30
                                    mem[_39822 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41949 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41949 + idx + 68] = mem[_39822 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41949 + 68] = mem[_41949 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41949 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50377 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50377] = 30
                                    mem[_50377 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52178 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52178 + idx + 68] = mem[_50377 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52178 + 68] = mem[_52178 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52178 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36122 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36122] = 30
                                mem[_36122 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _37266 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37266 + idx + 68] = mem[_36122 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37266 + 68] = mem[_37266 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37266 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _41948 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41948] = 30
                                mem[_41948 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _44291 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44291 + idx + 68] = mem[_41948 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44291 + 68] = mem[_44291 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44291 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _52177 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52177] = 30
                                mem[_52177 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54137 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54137 + idx + 68] = mem[_52177 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54137 + 68] = mem[_54137 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54137 + -mem[64] + 100
                            _31776 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31776] = 26
                            mem[_31776 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32691 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32691] = 26
                                mem[_32691 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                _32690 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32690] = 26
                                mem[_32690 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32205 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32205] = 26
                                        mem[_32205 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34643 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34643] = 30
                                            mem[_34643 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36631 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36631] = 30
                                            mem[_36631 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38080 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38080 + idx + 68] = mem[_36631 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38080 + 68] = mem[_38080 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38080 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45646 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45646] = 30
                                            mem[_45646 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48175 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48175 + idx + 68] = mem[_45646 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48175 + 68] = mem[_48175 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48175 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34861 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34861] = 30
                                        mem[_34861 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35332 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35332 + idx + 68] = mem[_34861 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35332 + 68] = mem[_35332 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35332 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38079 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38079] = 30
                                        mem[_38079 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39704 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39704 + idx + 68] = mem[_38079 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39704 + 68] = mem[_39704 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39704 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48174 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48174] = 30
                                        mem[_48174 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50292 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50292 + idx + 68] = mem[_48174 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50292 + 68] = mem[_50292 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50292 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32349 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32349] = 30
                                        mem[_32349 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32515 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32515 + idx + 68] = mem[_32349 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32515 + 68] = mem[_32515 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32515 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33300 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33300] = 30
                                        mem[_33300 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33551 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33551 + idx + 68] = mem[_33300 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33551 + 68] = mem[_33551 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33551 + -mem[64] + 100
                                    _32411 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32411] = 26
                                    mem[_32411 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34862 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34862] = 30
                                        mem[_34862 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38085 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38085] = 30
                                        mem[_38085 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39711 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39711 + idx + 68] = mem[_38085 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39711 + 68] = mem[_39711 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39711 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48179 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48179] = 30
                                        mem[_48179 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50297 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50297 + idx + 68] = mem[_48179 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50297 + 68] = mem[_50297 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50297 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35335 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35335] = 30
                                    mem[_35335 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36061 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36061 + idx + 68] = mem[_35335 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36061 + 68] = mem[_36061 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36061 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39710 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39710] = 30
                                    mem[_39710 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _41804 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_41804 + idx + 68] = mem[_39710 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_41804 + 68] = mem[_41804 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _41804 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50296 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50296] = 30
                                    mem[_50296 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52093 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52093 + idx + 68] = mem[_50296 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52093 + 68] = mem[_52093 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52093 + -mem[64] + 100
                                _31751 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31751] = 26
                                mem[_31751 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32681 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32681] = 26
                                    mem[_32681 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32680 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32680] = 26
                                    mem[_32680 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32202 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32202] = 26
                                        mem[_32202 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34642 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34642] = 30
                                                mem[_34642 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36628 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36628] = 30
                                                mem[_36628 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38071 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38071 + idx + 68] = mem[_36628 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38071 + 68] = mem[_38071 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38071 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45635 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45635] = 30
                                                mem[_45635 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48160 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48160 + idx + 68] = mem[_45635 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48160 + 68] = mem[_48160 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48160 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34859 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34859] = 30
                                            mem[_34859 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35325 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35325 + idx + 68] = mem[_34859 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35325 + 68] = mem[_35325 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35325 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38070 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38070] = 30
                                            mem[_38070 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39685 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39685 + idx + 68] = mem[_38070 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39685 + 68] = mem[_39685 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39685 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _48159 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48159] = 30
                                            mem[_48159 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50278 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50278 + idx + 68] = mem[_48159 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50278 + 68] = mem[_50278 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50278 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34858 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34858] = 30
                                            mem[_34858 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35322 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35322 + idx + 68] = mem[_34858 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35322 + 68] = mem[_35322 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35322 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38069 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38069] = 30
                                            mem[_38069 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39682 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39682 + idx + 68] = mem[_38069 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39682 + 68] = mem[_39682 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39682 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48158 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48158] = 30
                                            mem[_48158 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50275 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50275 + idx + 68] = mem[_48158 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50275 + 68] = mem[_50275 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50275 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35321 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35321] = 30
                                        mem[_35321 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _36044 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36044 + idx + 68] = mem[_35321 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36044 + 68] = mem[_36044 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36044 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39681 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39681] = 30
                                        mem[_39681 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41768 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41768 + idx + 68] = mem[_39681 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41768 + 68] = mem[_41768 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41768 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _50274 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50274] = 30
                                        mem[_50274 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52065 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52065 + idx + 68] = mem[_50274 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52065 + 68] = mem[_52065 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52065 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32348 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32348] = 30
                                        mem[_32348 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32512 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32512 + idx + 68] = mem[_32348 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32512 + 68] = mem[_32512 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32512 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33298 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33298] = 30
                                        mem[_33298 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33546 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33546 + idx + 68] = mem[_33298 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33546 + 68] = mem[_33546 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33546 + -mem[64] + 100
                                    _32410 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32410] = 26
                                    mem[_32410 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34860 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34860] = 30
                                            mem[_34860 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38078 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38078] = 30
                                            mem[_38078 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39695 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39695 + idx + 68] = mem[_38078 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39695 + 68] = mem[_39695 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39695 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48167 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48167] = 30
                                            mem[_48167 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50285 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50285 + idx + 68] = mem[_48167 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50285 + 68] = mem[_50285 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50285 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35329 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35329] = 30
                                        mem[_35329 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36054 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36054 + idx + 68] = mem[_35329 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36054 + 68] = mem[_36054 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36054 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39694 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39694] = 30
                                        mem[_39694 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _41784 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41784 + idx + 68] = mem[_39694 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41784 + 68] = mem[_41784 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41784 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _50284 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50284] = 30
                                        mem[_50284 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52077 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52077 + idx + 68] = mem[_50284 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52077 + 68] = mem[_52077 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52077 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35328 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35328] = 30
                                        mem[_35328 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36051 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36051 + idx + 68] = mem[_35328 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36051 + 68] = mem[_36051 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36051 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39693 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39693] = 30
                                        mem[_39693 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41781 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41781 + idx + 68] = mem[_39693 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41781 + 68] = mem[_41781 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41781 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50283 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50283] = 30
                                        mem[_50283 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52074 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52074 + idx + 68] = mem[_50283 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52074 + 68] = mem[_52074 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52074 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36050 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36050] = 30
                                    mem[_36050 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37161 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37161 + idx + 68] = mem[_36050 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37161 + 68] = mem[_37161 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37161 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _41780 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41780] = 30
                                    mem[_41780 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _44103 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44103 + idx + 68] = mem[_41780 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44103 + 68] = mem[_44103 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44103 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _52073 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52073] = 30
                                    mem[_52073 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54014 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54014 + idx + 68] = mem[_52073 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54014 + 68] = mem[_54014 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54014 + -mem[64] + 100
                                _31746 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31746] = 26
                                mem[_31746 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32679 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32679] = 26
                                    mem[_32679 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32678 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32678] = 26
                                    mem[_32678 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not stor4[address(arg1)]:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32211 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32211] = 26
                                            mem[_32211 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34645 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34645] = 30
                                                mem[_34645 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36639 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36639] = 30
                                                mem[_36639 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38099 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38099 + idx + 68] = mem[_36639 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38099 + 68] = mem[_38099 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38099 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45669 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45669] = 30
                                                mem[_45669 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48208 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48208 + idx + 68] = mem[_45669 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48208 + 68] = mem[_48208 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48208 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34866 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34866] = 30
                                            mem[_34866 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35349 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35349 + idx + 68] = mem[_34866 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35349 + 68] = mem[_35349 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35349 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38098 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38098] = 30
                                            mem[_38098 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39747 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39747 + idx + 68] = mem[_38098 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39747 + 68] = mem[_39747 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39747 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48207 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48207] = 30
                                            mem[_48207 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50328 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50328 + idx + 68] = mem[_48207 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50328 + 68] = mem[_50328 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50328 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32351 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32351] = 30
                                            mem[_32351 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32521 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32521 + idx + 68] = mem[_32351 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32521 + 68] = mem[_32521 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32521 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33304 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33304] = 30
                                            mem[_33304 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33561 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33561 + idx + 68] = mem[_33304 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33561 + 68] = mem[_33561 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33561 + -mem[64] + 100
                                        _32413 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32413] = 26
                                        mem[_32413 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34867 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34867] = 30
                                            mem[_34867 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38104 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38104] = 30
                                            mem[_38104 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39754 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39754 + idx + 68] = mem[_38104 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39754 + 68] = mem[_39754 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39754 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48212 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48212] = 30
                                            mem[_48212 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50333 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50333 + idx + 68] = mem[_48212 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50333 + 68] = mem[_50333 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50333 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35352 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35352] = 30
                                        mem[_35352 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36085 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36085 + idx + 68] = mem[_35352 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36085 + 68] = mem[_36085 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36085 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39753 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39753] = 30
                                        mem[_39753 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41860 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41860 + idx + 68] = mem[_39753 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41860 + 68] = mem[_41860 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41860 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50332 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50332] = 30
                                        mem[_50332 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _52137 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52137 + idx + 68] = mem[_50332 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52137 + 68] = mem[_52137 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52137 + -mem[64] + 100
                                    _31761 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31761] = 26
                                    mem[_31761 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32685 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32685] = 26
                                        mem[_32685 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    else:
                                        _32684 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32684] = 26
                                        mem[_32684 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32208] = 26
                                            mem[_32208 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34644 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34644] = 30
                                                    mem[_34644 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36636 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36636] = 30
                                                    mem[_36636 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38090 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38090 + idx + 68] = mem[_36636 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38090 + 68] = mem[_38090 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38090 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _45658 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_45658] = 30
                                                    mem[_45658 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48193 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48193 + idx + 68] = mem[_45658 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48193 + 68] = mem[_48193 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48193 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34864 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34864] = 30
                                                mem[_34864 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _35342 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35342 + idx + 68] = mem[_34864 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35342 + 68] = mem[_35342 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35342 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38089 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38089] = 30
                                                mem[_38089 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39728 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39728 + idx + 68] = mem[_38089 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39728 + 68] = mem[_39728 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39728 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                _48192 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48192] = 30
                                                mem[_48192 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50314 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50314 + idx + 68] = mem[_48192 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50314 + 68] = mem[_50314 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50314 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _34863 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34863] = 30
                                                mem[_34863 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35339 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35339 + idx + 68] = mem[_34863 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35339 + 68] = mem[_35339 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35339 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38088 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38088] = 30
                                                mem[_38088 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _39725 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39725 + idx + 68] = mem[_38088 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39725 + 68] = mem[_39725 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39725 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                _48191 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48191] = 30
                                                mem[_48191 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50311 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50311 + idx + 68] = mem[_48191 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50311 + 68] = mem[_50311 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50311 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35338 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35338] = 30
                                            mem[_35338 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _36068 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36068 + idx + 68] = mem[_35338 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36068 + 68] = mem[_36068 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36068 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39724 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39724] = 30
                                            mem[_39724 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _41824 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41824 + idx + 68] = mem[_39724 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41824 + 68] = mem[_41824 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41824 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            _50310 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50310] = 30
                                            mem[_50310 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52109 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52109 + idx + 68] = mem[_50310 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52109 + 68] = mem[_52109 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52109 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32350 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32350] = 30
                                            mem[_32350 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32518 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32518 + idx + 68] = mem[_32350 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32518 + 68] = mem[_32518 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32518 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33302 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33302] = 30
                                            mem[_33302 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33556 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33556 + idx + 68] = mem[_33302 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33556 + 68] = mem[_33556 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33556 + -mem[64] + 100
                                        _32412 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32412] = 26
                                        mem[_32412 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34865 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34865] = 30
                                                mem[_34865 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38097 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38097] = 30
                                                mem[_38097 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39738 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39738 + idx + 68] = mem[_38097 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39738 + 68] = mem[_39738 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39738 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48200 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48200] = 30
                                                mem[_48200 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50321 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50321 + idx + 68] = mem[_48200 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50321 + 68] = mem[_50321 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50321 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35346 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35346] = 30
                                            mem[_35346 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _36078 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36078 + idx + 68] = mem[_35346 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36078 + 68] = mem[_36078 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36078 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39737 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39737] = 30
                                            mem[_39737 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41840 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41840 + idx + 68] = mem[_39737 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41840 + 68] = mem[_41840 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41840 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _50320 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50320] = 30
                                            mem[_50320 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52121 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52121 + idx + 68] = mem[_50320 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52121 + 68] = mem[_52121 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52121 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _35345 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35345] = 30
                                            mem[_35345 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36075 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36075 + idx + 68] = mem[_35345 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36075 + 68] = mem[_36075 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36075 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39736 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39736] = 30
                                            mem[_39736 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _41837 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41837 + idx + 68] = mem[_39736 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41837 + 68] = mem[_41837 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41837 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _50319 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50319] = 30
                                            mem[_50319 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52118 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52118 + idx + 68] = mem[_50319 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52118 + 68] = mem[_52118 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52118 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36074 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36074] = 30
                                        mem[_36074 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _37196 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37196 + idx + 68] = mem[_36074 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37196 + 68] = mem[_37196 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37196 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41836 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41836] = 30
                                        mem[_41836 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _44165 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44165 + idx + 68] = mem[_41836 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44165 + 68] = mem[_44165 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44165 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _52117 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52117] = 30
                                        mem[_52117 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54064 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54064 + idx + 68] = mem[_52117 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54064 + 68] = mem[_54064 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54064 + -mem[64] + 100
                                    _31756 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31756] = 26
                                    mem[_31756 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32683 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32683] = 26
                                        mem[_32683 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        _32682 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32682] = 26
                                        mem[_32682 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            else:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32217 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32217] = 26
                                            mem[_32217 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34647 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34647] = 30
                                                mem[_34647 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36647 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36647] = 30
                                                mem[_36647 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38118 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38118 + idx + 68] = mem[_36647 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38118 + 68] = mem[_38118 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38118 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44255 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44255] = 30
                                                mem[_44255 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _46842 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_46842 + idx + 68] = mem[_44255 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_46842 + 68] = mem[_46842 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _46842 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] += arg2
                                                _54108 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54108] = 30
                                                mem[_54108 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _56205 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56205 + idx + 68] = mem[_54108 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56205 + 68] = mem[_56205 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56205 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34871 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34871] = 30
                                            mem[_34871 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35366 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35366 + idx + 68] = mem[_34871 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35366 + 68] = mem[_35366 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35366 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38117 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38117] = 30
                                            mem[_38117 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39790 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39790 + idx + 68] = mem[_38117 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39790 + 68] = mem[_39790 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39790 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46841 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46841] = 30
                                            mem[_46841 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49293 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49293 + idx + 68] = mem[_46841 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49293 + 68] = mem[_49293 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49293 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _56204 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56204] = 30
                                            mem[_56204 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58033 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58033 + idx + 68] = mem[_56204 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58033 + 68] = mem[_58033 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58033 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32353 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32353] = 30
                                            mem[_32353 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32527 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32527 + idx + 68] = mem[_32353 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32527 + 68] = mem[_32527 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32527 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33308 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33308] = 30
                                            mem[_33308 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33571 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33571 + idx + 68] = mem[_33308 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33571 + 68] = mem[_33571 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33571 + -mem[64] + 100
                                        _32415 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32415] = 26
                                        mem[_32415 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34872 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34872] = 30
                                            mem[_34872 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38123 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38123] = 30
                                            mem[_38123 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39797 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39797 + idx + 68] = mem[_38123 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39797 + 68] = mem[_39797 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39797 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _46848 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46848] = 30
                                            mem[_46848 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49300 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49300 + idx + 68] = mem[_46848 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49300 + 68] = mem[_49300 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49300 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _56209 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56209] = 30
                                            mem[_56209 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58038 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58038 + idx + 68] = mem[_56209 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58038 + 68] = mem[_58038 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58038 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35369 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35369] = 30
                                        mem[_35369 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36109 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36109 + idx + 68] = mem[_35369 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36109 + 68] = mem[_36109 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36109 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39796 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39796] = 30
                                        mem[_39796 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _41916 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_41916 + idx + 68] = mem[_39796 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_41916 + 68] = mem[_41916 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _41916 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49299 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49299] = 30
                                        mem[_49299 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51248 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51248 + idx + 68] = mem[_49299 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51248 + 68] = mem[_51248 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51248 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _58037 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58037] = 30
                                        mem[_58037 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _59322 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59322 + idx + 68] = mem[_58037 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59322 + 68] = mem[_59322 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59322 + -mem[64] + 100
                                    _31771 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31771] = 26
                                    mem[_31771 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32689 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32689] = 26
                                        mem[_32689 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    else:
                                        _32688 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32688] = 26
                                        mem[_32688 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32214 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32214] = 26
                                            mem[_32214 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34646 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34646] = 30
                                                    mem[_34646 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36644 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36644] = 30
                                                    mem[_36644 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38109 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38109 + idx + 68] = mem[_36644 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38109 + 68] = mem[_38109 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38109 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _44227 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44227] = 30
                                                    mem[_44227 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _46816 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_46816 + idx + 68] = mem[_44227 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_46816 + 68] = mem[_46816 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _46816 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 2
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    _54097 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54097] = 30
                                                    mem[_54097 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _56190 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56190 + idx + 68] = mem[_54097 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56190 + 68] = mem[_56190 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56190 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34869 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34869] = 30
                                                mem[_34869 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _35359 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35359 + idx + 68] = mem[_34869 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35359 + 68] = mem[_35359 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35359 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38108 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38108] = 30
                                                mem[_38108 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39771 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39771 + idx + 68] = mem[_38108 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39771 + 68] = mem[_39771 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39771 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _46815 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46815] = 30
                                                mem[_46815 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49271 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49271 + idx + 68] = mem[_46815 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49271 + 68] = mem[_49271 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49271 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56189 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56189] = 30
                                                mem[_56189 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58019 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58019 + idx + 68] = mem[_56189 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58019 + 68] = mem[_58019 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58019 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _34868 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34868] = 30
                                                mem[_34868 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35356 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35356 + idx + 68] = mem[_34868 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35356 + 68] = mem[_35356 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35356 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38107 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38107] = 30
                                                mem[_38107 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _39768 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39768 + idx + 68] = mem[_38107 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39768 + 68] = mem[_39768 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39768 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _46814 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46814] = 30
                                                mem[_46814 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49268 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49268 + idx + 68] = mem[_46814 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49268 + 68] = mem[_49268 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49268 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56188 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56188] = 30
                                                mem[_56188 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58016 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58016 + idx + 68] = mem[_56188 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58016 + 68] = mem[_58016 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58016 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35355 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35355] = 30
                                            mem[_35355 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _36092 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36092 + idx + 68] = mem[_35355 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36092 + 68] = mem[_36092 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36092 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39767 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39767] = 30
                                            mem[_39767 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _41880 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41880 + idx + 68] = mem[_39767 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41880 + 68] = mem[_41880 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41880 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49267 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49267] = 30
                                            mem[_49267 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51212 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51212 + idx + 68] = mem[_49267 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51212 + 68] = mem[_51212 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51212 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58015 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58015] = 30
                                            mem[_58015 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59294 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59294 + idx + 68] = mem[_58015 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59294 + 68] = mem[_59294 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59294 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32352 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32352] = 30
                                            mem[_32352 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32524 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32524 + idx + 68] = mem[_32352 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32524 + 68] = mem[_32524 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32524 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33306 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33306] = 30
                                            mem[_33306 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33566 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33566 + idx + 68] = mem[_33306 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33566 + 68] = mem[_33566 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33566 + -mem[64] + 100
                                        _32414 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32414] = 26
                                        mem[_32414 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34870 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34870] = 30
                                                mem[_34870 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38116 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38116] = 30
                                                mem[_38116 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _39781 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_39781 + idx + 68] = mem[_38116 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_39781 + 68] = mem[_39781 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _39781 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _46828 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46828] = 30
                                                mem[_46828 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49282 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49282 + idx + 68] = mem[_46828 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49282 + 68] = mem[_49282 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49282 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56197 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56197] = 30
                                                mem[_56197 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58026 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58026 + idx + 68] = mem[_56197 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58026 + 68] = mem[_58026 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58026 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35363 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35363] = 30
                                            mem[_35363 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _36102 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36102 + idx + 68] = mem[_35363 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36102 + 68] = mem[_36102 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36102 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39780 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39780] = 30
                                            mem[_39780 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _41896 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41896 + idx + 68] = mem[_39780 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41896 + 68] = mem[_41896 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41896 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49281 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49281] = 30
                                            mem[_49281 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51228 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51228 + idx + 68] = mem[_49281 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51228 + 68] = mem[_51228 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51228 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58025 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58025] = 30
                                            mem[_58025 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59306 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59306 + idx + 68] = mem[_58025 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59306 + 68] = mem[_59306 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59306 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _35362 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35362] = 30
                                            mem[_35362 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36099 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36099 + idx + 68] = mem[_35362 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36099 + 68] = mem[_36099 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36099 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _39779 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39779] = 30
                                            mem[_39779 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _41893 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_41893 + idx + 68] = mem[_39779 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_41893 + 68] = mem[_41893 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _41893 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49280 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49280] = 30
                                            mem[_49280 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51225 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51225 + idx + 68] = mem[_49280 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51225 + 68] = mem[_51225 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51225 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58024 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58024] = 30
                                            mem[_58024 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59303 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59303 + idx + 68] = mem[_58024 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59303 + 68] = mem[_59303 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59303 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36098 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36098] = 30
                                        mem[_36098 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _37231 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37231 + idx + 68] = mem[_36098 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37231 + 68] = mem[_37231 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37231 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _41892 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41892] = 30
                                        mem[_41892 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _44228 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44228 + idx + 68] = mem[_41892 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44228 + 68] = mem[_44228 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44228 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _51224 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51224] = 30
                                        mem[_51224 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _53060 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53060 + idx + 68] = mem[_51224 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53060 + 68] = mem[_53060 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53060 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _59302 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59302] = 30
                                        mem[_59302 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _60268 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60268 + idx + 68] = mem[_59302 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60268 + 68] = mem[_60268 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60268 + -mem[64] + 100
                                    _31766 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31766] = 26
                                    mem[_31766 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32687 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32687] = 26
                                        mem[_32687 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        _32686 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32686] = 26
                                        mem[_32686 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
    else:
        mem[0] = arg1
        mem[32] = 4
        if not stor4[address(arg1)]:
            mem[96] = 26
            mem[128] = 'SafeMath: division by zero'
            if not arg2 / 100:
                mem[64] = 224
                mem[160] = 30
                mem[192] = 'SafeMath: subtraction overflow'
                if 0 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                idx = 0
                s = 5 * 10^13
                t = stor6
                while idx < stor5.length:
                    mem[0] = stor5[idx]
                    mem[32] = 1
                    if stor1[stor5[idx]] > t:
                        _32325 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32325] = 26
                        mem[_32325 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            _34683 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34683] = 30
                            mem[_34683 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _36791 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36791] = 30
                            mem[_36791 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _38460 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_38460 + idx + 68] = mem[_36791 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_38460 + 68] = mem[_38460 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _38460 + -mem[64] + 100
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _45381 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_45381] = 30
                            mem[_45381 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _47819 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_47819 + idx + 68] = mem[_45381 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_47819 + 68] = mem[_47819 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _47819 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            stor2[address(msg.sender)] -= arg2
                            _51690 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_51690] = 30
                            mem[_51690 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _53563 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_53563 + idx + 68] = mem[_51690 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_53563 + 68] = mem[_53563 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _53563 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _34961 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34961] = 30
                        mem[_34961 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 5 * 10^13:
                            _35672 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_35672 + idx + 68] = mem[_34961 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_35672 + 68] = mem[_35672 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _35672 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _38459 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_38459] = 30
                        mem[_38459 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                            _40564 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_40564 + idx + 68] = mem[_38459 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_40564 + 68] = mem[_40564 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _40564 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                        mem[0] = msg.sender
                        mem[32] = 2
                        _47818 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_47818] = 30
                        mem[_47818 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _49937 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_49937 + idx + 68] = mem[_47818 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_49937 + 68] = mem[_49937 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _49937 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        stor2[address(msg.sender)] -= arg2
                        _53561 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_53561] = 30
                        mem[_53561 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            return 1
                        _55646 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_55646 + idx + 68] = mem[_53561 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_55646 + 68] = mem[_55646 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _55646 + -mem[64] + 100
                    require idx < stor5.length
                    mem[0] = stor5[idx]
                    mem[32] = 2
                    if stor2[stor5[idx]] <= s:
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        _32389 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32389] = 30
                        mem[_32389 + 32] = 'SafeMath: subtraction overflow'
                        if stor1[stor5[idx]] > t:
                            _32635 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_32635 + idx + 68] = mem[_32389 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_32635 + 68] = mem[_32635 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _32635 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        _33380 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33380] = 30
                        mem[_33380 + 32] = 'SafeMath: subtraction overflow'
                        if stor2[stor5[idx]] <= s:
                            idx = idx + 1
                            s = s - stor2[stor5[idx]]
                            t = t - stor1[stor5[idx]]
                            continue 
                        _33751 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_33751 + idx + 68] = mem[_33380 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_33751 + 68] = mem[_33751 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _33751 + -mem[64] + 100
                    _32451 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32451] = 26
                    mem[_32451 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        _34962 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_34962] = 30
                        mem[_34962 + 32] = 'SafeMath: subtraction overflow'
                        mem[0] = msg.sender
                        mem[32] = 1
                        _38465 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_38465] = 30
                        mem[_38465 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _40571 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_40571 + idx + 68] = mem[_38465 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_40571 + 68] = mem[_40571 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _40571 + -mem[64] + 100
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        mem[0] = msg.sender
                        mem[32] = 2
                        _47825 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_47825] = 30
                        mem[_47825 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _49943 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_49943 + idx + 68] = mem[_47825 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_49943 + 68] = mem[_49943 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _49943 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        stor2[address(msg.sender)] -= arg2
                        _53568 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_53568] = 30
                        mem[_53568 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                            return 1
                        _55652 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_55652 + idx + 68] = mem[_53568 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_55652 + 68] = mem[_55652 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _55652 + -mem[64] + 100
                    require arg2
                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _35675 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_35675] = 30
                    mem[_35675 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > arg2 * stor6 / 5 * 10^13:
                        _36541 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_36541 + idx + 68] = mem[_35675 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_36541 + 68] = mem[_36541 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _36541 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _40570 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_40570] = 30
                    mem[_40570 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                        _42924 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_42924 + idx + 68] = mem[_40570 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_42924 + 68] = mem[_42924 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _42924 + -mem[64] + 100
                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                    mem[0] = msg.sender
                    mem[32] = 2
                    _49942 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49942] = 30
                    mem[_49942 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 > stor2[address(msg.sender)]:
                        _51692 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_51692 + idx + 68] = mem[_49942 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_51692 + 68] = mem[_51692 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _51692 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 2
                    stor2[address(msg.sender)] -= arg2
                    _55650 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_55650] = 30
                    mem[_55650 + 32] = 'SafeMath: subtraction overflow'
                    if 0 <= stor6:
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                        return 1
                    _57542 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_57542 + idx + 68] = mem[_55650 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_57542 + 68] = mem[_57542 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _57542 + -mem[64] + 100
                _31951 = mem[64]
                mem[64] = mem[64] + 64
                mem[_31951] = 26
                mem[_31951 + 32] = 'SafeMath: division by zero'
                if t < stor6 / 5 * 10^13:
                    _32761 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32761] = 26
                    mem[_32761 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if 0 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require arg2
                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if 0 > arg2 * stor6 / 5 * 10^13:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                else:
                    _32760 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32760] = 26
                    mem[_32760 + 32] = 'SafeMath: division by zero'
                    if s <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require s
                    if not arg2:
                        if 0 > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)] < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require arg2
                        if arg2 * t / s / arg2 != t / s:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if 0 > arg2 * t / s:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if arg2 * t / s > stor1[address(msg.sender)]:
                            revert with 0, 'SafeMath: subtraction overflow'
                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += arg2 * t / s
                if arg2 > stor2[address(msg.sender)]:
                    revert with 0, 'SafeMath: subtraction overflow'
                stor2[address(msg.sender)] -= arg2
                if 0 > stor6:
                    revert with 0, 'SafeMath: subtraction overflow'
                if totalFees < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                emit Transfer(arg2, msg.sender, arg1);
            else:
                require arg2 / 100
                if 3 * arg2 / 100 / arg2 / 100 != 3:
                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                mem[64] = 224
                mem[160] = 30
                mem[192] = 'SafeMath: subtraction overflow'
                if 3 * arg2 / 100 > arg2:
                    revert with 0, 'SafeMath: subtraction overflow'
                idx = 0
                s = 5 * 10^13
                t = stor6
                while idx < stor5.length:
                    mem[0] = stor5[idx]
                    mem[32] = 1
                    if stor1[stor5[idx]] > t:
                        _32322 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32322] = 26
                        mem[_32322 + 32] = 'SafeMath: division by zero'
                        if not arg2:
                            if not 3 * arg2 / 100:
                                _34682 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34682] = 30
                                mem[_34682 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _36788 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36788] = 30
                                mem[_36788 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _38451 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_38451 + idx + 68] = mem[_36788 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_38451 + 68] = mem[_38451 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _38451 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = msg.sender
                                mem[32] = 2
                                _45353 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_45353] = 30
                                mem[_45353 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 > stor2[address(msg.sender)]:
                                    _47793 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_47793 + idx + 68] = mem[_45353 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_47793 + 68] = mem[_47793 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _47793 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 2
                                stor2[address(msg.sender)] -= arg2
                                _51669 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51669] = 30
                                mem[_51669 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _53539 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53539 + idx + 68] = mem[_51669 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53539 + 68] = mem[_53539 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53539 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _34959 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34959] = 30
                            mem[_34959 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                _35665 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35665 + idx + 68] = mem[_34959 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35665 + 68] = mem[_35665 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35665 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _38450 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38450] = 30
                            mem[_38450 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _40545 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_40545 + idx + 68] = mem[_38450 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_40545 + 68] = mem[_40545 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _40545 + -mem[64] + 100
                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            mem[0] = msg.sender
                            mem[32] = 2
                            _47792 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_47792] = 30
                            mem[_47792 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _49916 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_49916 + idx + 68] = mem[_47792 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_49916 + 68] = mem[_49916 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _49916 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            stor2[address(msg.sender)] -= arg2
                            _53537 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53537] = 30
                            mem[_53537 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55625 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55625 + idx + 68] = mem[_53537 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55625 + 68] = mem[_55625 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55625 + -mem[64] + 100
                        require arg2
                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            _34958 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34958] = 30
                            mem[_34958 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                _35662 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_35662 + idx + 68] = mem[_34958 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_35662 + 68] = mem[_35662 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _35662 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _38449 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38449] = 30
                            mem[_38449 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _40542 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_40542 + idx + 68] = mem[_38449 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_40542 + 68] = mem[_40542 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _40542 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            mem[0] = msg.sender
                            mem[32] = 2
                            _47791 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_47791] = 30
                            mem[_47791 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _49913 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_49913 + idx + 68] = mem[_47791 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_49913 + 68] = mem[_49913 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _49913 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            stor2[address(msg.sender)] -= arg2
                            _53535 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53535] = 30
                            mem[_53535 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55622 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55622 + idx + 68] = mem[_53535 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55622 + 68] = mem[_55622 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55622 + -mem[64] + 100
                        require 3 * arg2 / 100
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _35661 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35661] = 30
                        mem[_35661 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                            _36524 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36524 + idx + 68] = mem[_35661 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36524 + 68] = mem[_36524 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36524 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _40541 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_40541] = 30
                        mem[_40541 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                            _42888 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42888 + idx + 68] = mem[_40541 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42888 + 68] = mem[_42888 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42888 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                        mem[0] = msg.sender
                        mem[32] = 2
                        _49912 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49912] = 30
                        mem[_49912 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _51662 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_51662 + idx + 68] = mem[_49912 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_51662 + 68] = mem[_51662 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _51662 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        stor2[address(msg.sender)] -= arg2
                        _55620 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55620] = 30
                        mem[_55620 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57511 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57511 + idx + 68] = mem[_55620 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57511 + 68] = mem[_57511 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57511 + -mem[64] + 100
                    require idx < stor5.length
                    mem[0] = stor5[idx]
                    mem[32] = 2
                    if stor2[stor5[idx]] <= s:
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 1
                        _32388 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32388] = 30
                        mem[_32388 + 32] = 'SafeMath: subtraction overflow'
                        if stor1[stor5[idx]] > t:
                            _32632 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_32632 + idx + 68] = mem[_32388 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_32632 + 68] = mem[_32632 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _32632 + -mem[64] + 100
                        require idx < stor5.length
                        mem[0] = stor5[idx]
                        mem[32] = 2
                        _33378 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_33378] = 30
                        mem[_33378 + 32] = 'SafeMath: subtraction overflow'
                        if stor2[stor5[idx]] <= s:
                            idx = idx + 1
                            s = s - stor2[stor5[idx]]
                            t = t - stor1[stor5[idx]]
                            continue 
                        _33746 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_33746 + idx + 68] = mem[_33378 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_33746 + 68] = mem[_33746 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _33746 + -mem[64] + 100
                    _32450 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32450] = 26
                    mem[_32450 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if not 3 * arg2 / 100:
                            _34960 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_34960] = 30
                            mem[_34960 + 32] = 'SafeMath: subtraction overflow'
                            mem[0] = msg.sender
                            mem[32] = 1
                            _38458 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38458] = 30
                            mem[_38458 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                _40555 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_40555 + idx + 68] = mem[_38458 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_40555 + 68] = mem[_40555 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _40555 + -mem[64] + 100
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = msg.sender
                            mem[32] = 2
                            _47805 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_47805] = 30
                            mem[_47805 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                _49926 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_49926 + idx + 68] = mem[_47805 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_49926 + 68] = mem[_49926 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _49926 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 2
                            stor2[address(msg.sender)] -= arg2
                            _53549 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53549] = 30
                            mem[_53549 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _55635 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55635 + idx + 68] = mem[_53549 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55635 + 68] = mem[_55635 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55635 + -mem[64] + 100
                        require 3 * arg2 / 100
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _35669 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35669] = 30
                        mem[_35669 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                            _36534 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36534 + idx + 68] = mem[_35669 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36534 + 68] = mem[_36534 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36534 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _40554 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_40554] = 30
                        mem[_40554 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > stor1[address(msg.sender)]:
                            _42904 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42904 + idx + 68] = mem[_40554 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42904 + 68] = mem[_42904 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42904 + -mem[64] + 100
                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                        mem[0] = msg.sender
                        mem[32] = 2
                        _49925 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49925] = 30
                        mem[_49925 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _51675 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_51675 + idx + 68] = mem[_49925 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_51675 + 68] = mem[_51675 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _51675 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        stor2[address(msg.sender)] -= arg2
                        _55633 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55633] = 30
                        mem[_55633 + 32] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57524 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57524 + idx + 68] = mem[_55633 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57524 + 68] = mem[_57524 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57524 + -mem[64] + 100
                    require arg2
                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if not 3 * arg2 / 100:
                        _35668 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_35668] = 30
                        mem[_35668 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > arg2 * stor6 / 5 * 10^13:
                            _36531 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_36531 + idx + 68] = mem[_35668 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_36531 + 68] = mem[_36531 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _36531 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 1
                        _40553 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_40553] = 30
                        mem[_40553 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                            _42901 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_42901 + idx + 68] = mem[_40553 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_42901 + 68] = mem[_42901 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _42901 + -mem[64] + 100
                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                        mem[0] = msg.sender
                        mem[32] = 2
                        _49924 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49924] = 30
                        mem[_49924 + 32] = 'SafeMath: subtraction overflow'
                        if arg2 > stor2[address(msg.sender)]:
                            _51672 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_51672 + idx + 68] = mem[_49924 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_51672 + 68] = mem[_51672 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _51672 + -mem[64] + 100
                        mem[0] = msg.sender
                        mem[32] = 2
                        stor2[address(msg.sender)] -= arg2
                        _55631 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_55631] = 30
                        mem[_55631 + 32] = 'SafeMath: subtraction overflow'
                        if 0 <= stor6:
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            return 1
                        _57521 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_57521 + idx + 68] = mem[_55631 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_57521 + 68] = mem[_57521 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _57521 + -mem[64] + 100
                    require 3 * arg2 / 100
                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _36530 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_36530] = 30
                    mem[_36530 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                        _37861 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_37861 + idx + 68] = mem[_36530 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37861 + 68] = mem[_37861 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _37861 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 1
                    _42900 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_42900] = 30
                    mem[_42900 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                        _45354 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_45354 + idx + 68] = mem[_42900 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_45354 + 68] = mem[_45354 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _45354 + -mem[64] + 100
                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                    mem[0] = msg.sender
                    mem[32] = 2
                    _51671 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51671] = 30
                    mem[_51671 + 32] = 'SafeMath: subtraction overflow'
                    if arg2 > stor2[address(msg.sender)]:
                        _53542 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[_53542 + idx + 68] = mem[_51671 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_53542 + 68] = mem[_53542 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _53542 + -mem[64] + 100
                    mem[0] = msg.sender
                    mem[32] = 2
                    stor2[address(msg.sender)] -= arg2
                    _57519 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_57519] = 30
                    mem[_57519 + 32] = 'SafeMath: subtraction overflow'
                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                        if totalFees + (3 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 3 * arg2 / 100
                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        return 1
                    _58941 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    idx = 0
                    while idx < 30:
                        mem[_58941 + idx + 68] = mem[_57519 + idx + 32]
                        idx = idx + 32
                        continue 
                    mem[_58941 + 68] = mem[_58941 + 70 len 30]
                    revert with memory
                      from mem[64]
                       len _58941 + -mem[64] + 100
                _31946 = mem[64]
                mem[64] = mem[64] + 64
                mem[_31946] = 26
                mem[_31946 + 32] = 'SafeMath: division by zero'
                if t < stor6 / 5 * 10^13:
                    _32759 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32759] = 26
                    mem[_32759 + 32] = 'SafeMath: division by zero'
                    if not arg2:
                        if not 3 * arg2 / 100:
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                    else:
                        require arg2
                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                else:
                    _32758 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32758] = 26
                    mem[_32758 + 32] = 'SafeMath: division by zero'
                    if s <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require s
                    if not arg2:
                        if not 3 * arg2 / 100:
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 3 * arg2 / 100 * t / s > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if 0 > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 3 * arg2 / 100 * t / s > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * t / s
                    else:
                        require arg2
                        if arg2 * t / s / arg2 != t / s:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if not 3 * arg2 / 100:
                            if 0 > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * t / s
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if arg2 * t / s > stor1[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                            if arg2 > stor2[address(msg.sender)]:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor2[address(msg.sender)] -= arg2
                            if 3 * arg2 / 100 * t / s > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            stor6 += -3 * arg2 / 100 * t / s
                if totalFees + (3 * arg2 / 100) < totalFees:
                    revert with 0, 'SafeMath: addition overflow'
                totalFees += 3 * arg2 / 100
                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
        else:
            if stor4[address(msg.sender)]:
                if stor4[address(msg.sender)]:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if not stor4[address(msg.sender)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32235 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32235] = 26
                                    mem[_32235 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34653 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34653] = 30
                                        mem[_34653 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36671 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36671] = 30
                                        mem[_36671 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38175 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38175 + idx + 68] = mem[_36671 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38175 + 68] = mem[_38175 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38175 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45771 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45771] = 30
                                        mem[_45771 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48344 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48344 + idx + 68] = mem[_45771 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48344 + 68] = mem[_48344 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48344 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34886 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34886] = 30
                                    mem[_34886 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35417 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35417 + idx + 68] = mem[_34886 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35417 + 68] = mem[_35417 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35417 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38174 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38174] = 30
                                    mem[_38174 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _39919 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39919 + idx + 68] = mem[_38174 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39919 + 68] = mem[_39919 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39919 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _48343 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48343] = 30
                                    mem[_48343 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50456 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50456 + idx + 68] = mem[_48343 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50456 + 68] = mem[_50456 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50456 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32359 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32359] = 30
                                    mem[_32359 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32545 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32545 + idx + 68] = mem[_32359 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32545 + 68] = mem[_32545 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32545 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33320 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33320] = 30
                                    mem[_33320 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33601 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33601 + idx + 68] = mem[_33320 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33601 + 68] = mem[_33601 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33601 + -mem[64] + 100
                                _32421 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32421] = 26
                                mem[_32421 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34887 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34887] = 30
                                    mem[_34887 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38180 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38180] = 30
                                    mem[_38180 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _39926 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_39926 + idx + 68] = mem[_38180 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_39926 + 68] = mem[_39926 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _39926 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48348 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48348] = 30
                                    mem[_48348 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50461 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50461 + idx + 68] = mem[_48348 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50461 + 68] = mem[_50461 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50461 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35420 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35420] = 30
                                mem[_35420 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _36181 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36181 + idx + 68] = mem[_35420 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36181 + 68] = mem[_36181 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36181 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _39925 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_39925] = 30
                                mem[_39925 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _42084 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42084 + idx + 68] = mem[_39925 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42084 + 68] = mem[_42084 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42084 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _50460 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50460] = 30
                                mem[_50460 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52259 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52259 + idx + 68] = mem[_50460 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52259 + 68] = mem[_52259 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52259 + -mem[64] + 100
                            _31801 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31801] = 26
                            mem[_31801 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32701 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32701] = 26
                                mem[_32701 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            else:
                                _32700 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32700] = 26
                                mem[_32700 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32232 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32232] = 26
                                    mem[_32232 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34652 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34652] = 30
                                            mem[_34652 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36668 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36668] = 30
                                            mem[_36668 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38166 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38166 + idx + 68] = mem[_36668 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38166 + 68] = mem[_38166 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38166 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45760 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45760] = 30
                                            mem[_45760 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48329 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48329 + idx + 68] = mem[_45760 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48329 + 68] = mem[_48329 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48329 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34884 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34884] = 30
                                        mem[_34884 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35410 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35410 + idx + 68] = mem[_34884 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35410 + 68] = mem[_35410 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35410 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38165 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38165] = 30
                                        mem[_38165 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39900 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39900 + idx + 68] = mem[_38165 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39900 + 68] = mem[_39900 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39900 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _48328 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48328] = 30
                                        mem[_48328 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50442 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50442 + idx + 68] = mem[_48328 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50442 + 68] = mem[_50442 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50442 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _34883 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34883] = 30
                                        mem[_34883 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35407 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35407 + idx + 68] = mem[_34883 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35407 + 68] = mem[_35407 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35407 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38164 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38164] = 30
                                        mem[_38164 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39897 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39897 + idx + 68] = mem[_38164 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39897 + 68] = mem[_39897 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39897 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48327 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48327] = 30
                                        mem[_48327 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50439 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50439 + idx + 68] = mem[_48327 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50439 + 68] = mem[_50439 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50439 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35406 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35406] = 30
                                    mem[_35406 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _36164 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36164 + idx + 68] = mem[_35406 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36164 + 68] = mem[_36164 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36164 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39896 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39896] = 30
                                    mem[_39896 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42048 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42048 + idx + 68] = mem[_39896 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42048 + 68] = mem[_42048 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42048 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _50438 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50438] = 30
                                    mem[_50438 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52231 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52231 + idx + 68] = mem[_50438 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52231 + 68] = mem[_52231 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52231 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32358 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32358] = 30
                                    mem[_32358 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32542 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32542 + idx + 68] = mem[_32358 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32542 + 68] = mem[_32542 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32542 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33318 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33318] = 30
                                    mem[_33318 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33596 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33596 + idx + 68] = mem[_33318 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33596 + 68] = mem[_33596 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33596 + -mem[64] + 100
                                _32420 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32420] = 26
                                mem[_32420 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34885 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34885] = 30
                                        mem[_34885 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38173 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38173] = 30
                                        mem[_38173 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39910 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39910 + idx + 68] = mem[_38173 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39910 + 68] = mem[_39910 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39910 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48336 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48336] = 30
                                        mem[_48336 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50449 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50449 + idx + 68] = mem[_48336 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50449 + 68] = mem[_50449 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50449 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35414 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35414] = 30
                                    mem[_35414 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _36174 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36174 + idx + 68] = mem[_35414 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36174 + 68] = mem[_36174 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36174 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39909 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39909] = 30
                                    mem[_39909 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _42064 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42064 + idx + 68] = mem[_39909 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42064 + 68] = mem[_42064 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42064 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _50448 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50448] = 30
                                    mem[_50448 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52243 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52243 + idx + 68] = mem[_50448 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52243 + 68] = mem[_52243 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52243 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _35413 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35413] = 30
                                    mem[_35413 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36171 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36171 + idx + 68] = mem[_35413 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36171 + 68] = mem[_36171 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36171 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39908 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39908] = 30
                                    mem[_39908 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42061 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42061 + idx + 68] = mem[_39908 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42061 + 68] = mem[_42061 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42061 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50447 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50447] = 30
                                    mem[_50447 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52240 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52240 + idx + 68] = mem[_50447 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52240 + 68] = mem[_52240 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52240 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36170 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36170] = 30
                                mem[_36170 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _37336 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37336 + idx + 68] = mem[_36170 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37336 + 68] = mem[_37336 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37336 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42060 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42060] = 30
                                mem[_42060 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _44415 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44415 + idx + 68] = mem[_42060 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44415 + 68] = mem[_44415 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44415 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _52239 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52239] = 30
                                mem[_52239 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54195 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54195 + idx + 68] = mem[_52239 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54195 + 68] = mem[_54195 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54195 + -mem[64] + 100
                            _31796 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31796] = 26
                            mem[_31796 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32699 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32699] = 26
                                mem[_32699 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                _32698 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32698] = 26
                                mem[_32698 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not stor4[address(arg1)]:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32241 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32241] = 26
                                        mem[_32241 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34655 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34655] = 30
                                            mem[_34655 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36679 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36679] = 30
                                            mem[_36679 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38194 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38194 + idx + 68] = mem[_36679 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38194 + 68] = mem[_38194 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38194 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45794 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45794] = 30
                                            mem[_45794 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48377 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48377 + idx + 68] = mem[_45794 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48377 + 68] = mem[_48377 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48377 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34891 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34891] = 30
                                        mem[_34891 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35434 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35434 + idx + 68] = mem[_34891 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35434 + 68] = mem[_35434 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35434 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38193 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38193] = 30
                                        mem[_38193 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _39962 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39962 + idx + 68] = mem[_38193 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39962 + 68] = mem[_39962 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39962 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48376 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48376] = 30
                                        mem[_48376 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50492 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50492 + idx + 68] = mem[_48376 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50492 + 68] = mem[_50492 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50492 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32361 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32361] = 30
                                        mem[_32361 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32551 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32551 + idx + 68] = mem[_32361 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32551 + 68] = mem[_32551 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32551 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33324 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33324] = 30
                                        mem[_33324 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33611 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33611 + idx + 68] = mem[_33324 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33611 + 68] = mem[_33611 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33611 + -mem[64] + 100
                                    _32423 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32423] = 26
                                    mem[_32423 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34892 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34892] = 30
                                        mem[_34892 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38199 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38199] = 30
                                        mem[_38199 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _39969 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_39969 + idx + 68] = mem[_38199 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_39969 + 68] = mem[_39969 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _39969 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48381 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48381] = 30
                                        mem[_48381 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50497 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50497 + idx + 68] = mem[_48381 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50497 + 68] = mem[_50497 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50497 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35437 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35437] = 30
                                    mem[_35437 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36205 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36205 + idx + 68] = mem[_35437 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36205 + 68] = mem[_36205 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36205 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _39968 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39968] = 30
                                    mem[_39968 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42140 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42140 + idx + 68] = mem[_39968 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42140 + 68] = mem[_42140 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42140 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50496 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50496] = 30
                                    mem[_50496 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52303 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52303 + idx + 68] = mem[_50496 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52303 + 68] = mem[_52303 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52303 + -mem[64] + 100
                                _31811 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31811] = 26
                                mem[_31811 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32705 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32705] = 26
                                    mem[_32705 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32704 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32704] = 26
                                    mem[_32704 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32238 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32238] = 26
                                        mem[_32238 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34654 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34654] = 30
                                                mem[_34654 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36676 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36676] = 30
                                                mem[_36676 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38185 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38185 + idx + 68] = mem[_36676 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38185 + 68] = mem[_38185 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38185 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45783 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45783] = 30
                                                mem[_45783 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48362 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48362 + idx + 68] = mem[_45783 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48362 + 68] = mem[_48362 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48362 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34889 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34889] = 30
                                            mem[_34889 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35427 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35427 + idx + 68] = mem[_34889 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35427 + 68] = mem[_35427 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35427 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38184 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38184] = 30
                                            mem[_38184 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39943 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39943 + idx + 68] = mem[_38184 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39943 + 68] = mem[_39943 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39943 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _48361 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48361] = 30
                                            mem[_48361 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50478 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50478 + idx + 68] = mem[_48361 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50478 + 68] = mem[_50478 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50478 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34888 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34888] = 30
                                            mem[_34888 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35424 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35424 + idx + 68] = mem[_34888 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35424 + 68] = mem[_35424 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35424 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38183 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38183] = 30
                                            mem[_38183 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39940 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39940 + idx + 68] = mem[_38183 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39940 + 68] = mem[_39940 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39940 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48360 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48360] = 30
                                            mem[_48360 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50475 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50475 + idx + 68] = mem[_48360 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50475 + 68] = mem[_50475 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50475 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35423 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35423] = 30
                                        mem[_35423 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _36188 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36188 + idx + 68] = mem[_35423 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36188 + 68] = mem[_36188 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36188 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39939 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39939] = 30
                                        mem[_39939 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42104 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42104 + idx + 68] = mem[_39939 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42104 + 68] = mem[_42104 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42104 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _50474 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50474] = 30
                                        mem[_50474 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52275 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52275 + idx + 68] = mem[_50474 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52275 + 68] = mem[_52275 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52275 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32360 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32360] = 30
                                        mem[_32360 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32548 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32548 + idx + 68] = mem[_32360 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32548 + 68] = mem[_32548 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32548 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33322 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33322] = 30
                                        mem[_33322 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33606 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33606 + idx + 68] = mem[_33322 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33606 + 68] = mem[_33606 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33606 + -mem[64] + 100
                                    _32422 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32422] = 26
                                    mem[_32422 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34890 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34890] = 30
                                            mem[_34890 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38192 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38192] = 30
                                            mem[_38192 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39953 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39953 + idx + 68] = mem[_38192 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39953 + 68] = mem[_39953 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39953 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48369 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48369] = 30
                                            mem[_48369 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50485 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50485 + idx + 68] = mem[_48369 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50485 + 68] = mem[_50485 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50485 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35431 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35431] = 30
                                        mem[_35431 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36198 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36198 + idx + 68] = mem[_35431 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36198 + 68] = mem[_36198 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36198 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39952 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39952] = 30
                                        mem[_39952 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42120 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42120 + idx + 68] = mem[_39952 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42120 + 68] = mem[_42120 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42120 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _50484 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50484] = 30
                                        mem[_50484 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52287 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52287 + idx + 68] = mem[_50484 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52287 + 68] = mem[_52287 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52287 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35430 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35430] = 30
                                        mem[_35430 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36195 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36195 + idx + 68] = mem[_35430 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36195 + 68] = mem[_36195 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36195 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39951 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39951] = 30
                                        mem[_39951 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42117 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42117 + idx + 68] = mem[_39951 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42117 + 68] = mem[_42117 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42117 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50483 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50483] = 30
                                        mem[_50483 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52284 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52284 + idx + 68] = mem[_50483 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52284 + 68] = mem[_52284 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52284 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36194 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36194] = 30
                                    mem[_36194 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37371 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37371 + idx + 68] = mem[_36194 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37371 + 68] = mem[_37371 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37371 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42116 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42116] = 30
                                    mem[_42116 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _44477 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44477 + idx + 68] = mem[_42116 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44477 + 68] = mem[_44477 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44477 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _52283 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52283] = 30
                                    mem[_52283 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54245 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54245 + idx + 68] = mem[_52283 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54245 + 68] = mem[_54245 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54245 + -mem[64] + 100
                                _31806 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31806] = 26
                                mem[_31806 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32703 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32703] = 26
                                    mem[_32703 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32702 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32702] = 26
                                    mem[_32702 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        else:
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32247 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32247] = 26
                                        mem[_32247 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34657 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34657] = 30
                                            mem[_34657 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36687 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36687] = 30
                                            mem[_36687 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38213 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38213 + idx + 68] = mem[_36687 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38213 + 68] = mem[_38213 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38213 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _44567 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44567] = 30
                                            mem[_44567 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _47110 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_47110 + idx + 68] = mem[_44567 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_47110 + 68] = mem[_47110 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _47110 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _54289 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_54289] = 30
                                            mem[_54289 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _56389 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_56389 + idx + 68] = mem[_54289 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_56389 + 68] = mem[_56389 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _56389 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34896 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34896] = 30
                                        mem[_34896 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35451 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35451 + idx + 68] = mem[_34896 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35451 + 68] = mem[_35451 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35451 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38212 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38212] = 30
                                        mem[_38212 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _40005 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40005 + idx + 68] = mem[_38212 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40005 + 68] = mem[_40005 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40005 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _47109 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47109] = 30
                                        mem[_47109 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _49464 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49464 + idx + 68] = mem[_47109 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49464 + 68] = mem[_49464 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49464 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _56388 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56388] = 30
                                        mem[_56388 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _58202 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_58202 + idx + 68] = mem[_56388 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_58202 + 68] = mem[_58202 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _58202 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32363 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32363] = 30
                                        mem[_32363 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32557 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32557 + idx + 68] = mem[_32363 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32557 + 68] = mem[_32557 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32557 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33328 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33328] = 30
                                        mem[_33328 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33621 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33621 + idx + 68] = mem[_33328 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33621 + 68] = mem[_33621 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33621 + -mem[64] + 100
                                    _32425 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32425] = 26
                                    mem[_32425 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34897 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34897] = 30
                                        mem[_34897 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38218 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38218] = 30
                                        mem[_38218 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40012 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40012 + idx + 68] = mem[_38218 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40012 + 68] = mem[_40012 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40012 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _47116 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47116] = 30
                                        mem[_47116 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _49471 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_49471 + idx + 68] = mem[_47116 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_49471 + 68] = mem[_49471 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _49471 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _56393 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_56393] = 30
                                        mem[_56393 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _58207 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_58207 + idx + 68] = mem[_56393 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_58207 + 68] = mem[_58207 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _58207 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35454 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35454] = 30
                                    mem[_35454 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36229 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36229 + idx + 68] = mem[_35454 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36229 + 68] = mem[_36229 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36229 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40011 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40011] = 30
                                    mem[_40011 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42196 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42196 + idx + 68] = mem[_40011 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42196 + 68] = mem[_42196 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42196 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _49470 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49470] = 30
                                    mem[_49470 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _51361 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51361 + idx + 68] = mem[_49470 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51361 + 68] = mem[_51361 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51361 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] += arg2
                                    _58206 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_58206] = 30
                                    mem[_58206 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _59444 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_59444 + idx + 68] = mem[_58206 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_59444 + 68] = mem[_59444 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _59444 + -mem[64] + 100
                                _31821 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31821] = 26
                                mem[_31821 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32709 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32709] = 26
                                    mem[_32709 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32708 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32708] = 26
                                    mem[_32708 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if arg2 > stor2[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor2[address(msg.sender)] -= arg2
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor2[address(arg1)] += arg2
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32244 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32244] = 26
                                        mem[_32244 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34656 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34656] = 30
                                                mem[_34656 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36684 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36684] = 30
                                                mem[_36684 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38204 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38204 + idx + 68] = mem[_36684 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38204 + 68] = mem[_38204 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38204 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44539 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44539] = 30
                                                mem[_44539 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _47084 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47084 + idx + 68] = mem[_44539 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47084 + 68] = mem[_47084 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47084 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _54278 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54278] = 30
                                                mem[_54278 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _56374 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56374 + idx + 68] = mem[_54278 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56374 + 68] = mem[_56374 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56374 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34894 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34894] = 30
                                            mem[_34894 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35444 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35444 + idx + 68] = mem[_34894 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35444 + 68] = mem[_35444 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35444 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38203 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38203] = 30
                                            mem[_38203 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39986 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39986 + idx + 68] = mem[_38203 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39986 + 68] = mem[_39986 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39986 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _47083 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47083] = 30
                                            mem[_47083 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49442 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49442 + idx + 68] = mem[_47083 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49442 + 68] = mem[_49442 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49442 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _56373 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56373] = 30
                                            mem[_56373 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _58188 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58188 + idx + 68] = mem[_56373 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58188 + 68] = mem[_58188 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58188 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34893 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34893] = 30
                                            mem[_34893 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35441 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35441 + idx + 68] = mem[_34893 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35441 + 68] = mem[_35441 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35441 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38202 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38202] = 30
                                            mem[_38202 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _39983 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39983 + idx + 68] = mem[_38202 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39983 + 68] = mem[_39983 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39983 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _47082 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47082] = 30
                                            mem[_47082 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49439 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49439 + idx + 68] = mem[_47082 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49439 + 68] = mem[_49439 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49439 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _56372 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56372] = 30
                                            mem[_56372 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _58185 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58185 + idx + 68] = mem[_56372 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58185 + 68] = mem[_58185 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58185 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35440 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35440] = 30
                                        mem[_35440 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _36212 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36212 + idx + 68] = mem[_35440 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36212 + 68] = mem[_36212 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36212 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39982 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39982] = 30
                                        mem[_39982 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42160 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42160 + idx + 68] = mem[_39982 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42160 + 68] = mem[_42160 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42160 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49438 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49438] = 30
                                        mem[_49438 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51325 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51325 + idx + 68] = mem[_49438 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51325 + 68] = mem[_51325 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51325 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _58184 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58184] = 30
                                        mem[_58184 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59416 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59416 + idx + 68] = mem[_58184 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59416 + 68] = mem[_59416 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59416 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32362 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32362] = 30
                                        mem[_32362 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32554 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32554 + idx + 68] = mem[_32362 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32554 + 68] = mem[_32554 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32554 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33326 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33326] = 30
                                        mem[_33326 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33616 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33616 + idx + 68] = mem[_33326 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33616 + 68] = mem[_33616 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33616 + -mem[64] + 100
                                    _32424 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32424] = 26
                                    mem[_32424 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34895 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34895] = 30
                                            mem[_34895 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38211 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38211] = 30
                                            mem[_38211 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _39996 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_39996 + idx + 68] = mem[_38211 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_39996 + 68] = mem[_39996 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _39996 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _47096 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47096] = 30
                                            mem[_47096 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49453 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49453 + idx + 68] = mem[_47096 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49453 + 68] = mem[_49453 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49453 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _56381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56381] = 30
                                            mem[_56381 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _58195 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58195 + idx + 68] = mem[_56381 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58195 + 68] = mem[_58195 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58195 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35448 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35448] = 30
                                        mem[_35448 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36222 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36222 + idx + 68] = mem[_35448 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36222 + 68] = mem[_36222 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36222 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39995 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39995] = 30
                                        mem[_39995 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42176 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42176 + idx + 68] = mem[_39995 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42176 + 68] = mem[_42176 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42176 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49452 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49452] = 30
                                        mem[_49452 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51341 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51341 + idx + 68] = mem[_49452 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51341 + 68] = mem[_51341 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51341 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _58194 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58194] = 30
                                        mem[_58194 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59428 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59428 + idx + 68] = mem[_58194 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59428 + 68] = mem[_59428 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59428 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35447 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35447] = 30
                                        mem[_35447 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36219 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36219 + idx + 68] = mem[_35447 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36219 + 68] = mem[_36219 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36219 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _39994 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39994] = 30
                                        mem[_39994 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42173 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42173 + idx + 68] = mem[_39994 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42173 + 68] = mem[_42173 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42173 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49451 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49451] = 30
                                        mem[_49451 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51338 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51338 + idx + 68] = mem[_49451 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51338 + 68] = mem[_51338 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51338 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _58193 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58193] = 30
                                        mem[_58193 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _59425 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59425 + idx + 68] = mem[_58193 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59425 + 68] = mem[_59425 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59425 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36218 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36218] = 30
                                    mem[_36218 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37406 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37406 + idx + 68] = mem[_36218 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37406 + 68] = mem[_37406 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37406 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42172 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42172] = 30
                                    mem[_42172 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _44540 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44540 + idx + 68] = mem[_42172 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44540 + 68] = mem[_44540 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44540 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    mem[0] = msg.sender
                                    mem[32] = 2
                                    _51337 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51337] = 30
                                    mem[_51337 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 > stor2[address(msg.sender)]:
                                        _53184 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_53184 + idx + 68] = mem[_51337 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_53184 + 68] = mem[_53184 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _53184 + -mem[64] + 100
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _59424 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_59424] = 30
                                    mem[_59424 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _60348 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_60348 + idx + 68] = mem[_59424 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_60348 + 68] = mem[_60348 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _60348 + -mem[64] + 100
                                _31816 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31816] = 26
                                mem[_31816 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32707 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32707] = 26
                                    mem[_32707 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32706 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32706] = 26
                                    mem[_32706 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if arg2 > stor2[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                else:
                    mem[0] = arg1
                    mem[32] = 4
                    if not stor4[address(arg1)]:
                        mem[96] = 26
                        mem[128] = 'SafeMath: division by zero'
                        if not arg2 / 100:
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 0 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32271 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32271] = 26
                                    mem[_32271 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34665 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34665] = 30
                                        mem[_34665 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36719 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36719] = 30
                                        mem[_36719 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38289 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38289 + idx + 68] = mem[_36719 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38289 + 68] = mem[_38289 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38289 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _45915 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45915] = 30
                                        mem[_45915 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _48536 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_48536 + idx + 68] = mem[_45915 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_48536 + 68] = mem[_48536 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _48536 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34916 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34916] = 30
                                    mem[_34916 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35519 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35519 + idx + 68] = mem[_34916 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35519 + 68] = mem[_35519 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35519 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38288 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38288] = 30
                                    mem[_38288 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _40177 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40177 + idx + 68] = mem[_38288 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40177 + 68] = mem[_40177 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40177 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _48535 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48535] = 30
                                    mem[_48535 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50644 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50644 + idx + 68] = mem[_48535 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50644 + 68] = mem[_50644 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50644 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32371 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32371] = 30
                                    mem[_32371 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32581 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32581 + idx + 68] = mem[_32371 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32581 + 68] = mem[_32581 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32581 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33344 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33344] = 30
                                    mem[_33344 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33661 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33661 + idx + 68] = mem[_33344 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33661 + 68] = mem[_33661 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33661 + -mem[64] + 100
                                _32433 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32433] = 26
                                mem[_32433 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34917 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34917] = 30
                                    mem[_34917 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38294 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38294] = 30
                                    mem[_38294 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40184 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40184 + idx + 68] = mem[_38294 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40184 + 68] = mem[_40184 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40184 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    _48540 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_48540] = 30
                                    mem[_48540 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _50649 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_50649 + idx + 68] = mem[_48540 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_50649 + 68] = mem[_50649 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _50649 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35522 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35522] = 30
                                mem[_35522 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _36325 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36325 + idx + 68] = mem[_35522 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36325 + 68] = mem[_36325 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36325 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40183 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40183] = 30
                                mem[_40183 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _42420 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42420 + idx + 68] = mem[_40183 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42420 + 68] = mem[_42420 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42420 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                _50648 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_50648] = 30
                                mem[_50648 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _52467 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_52467 + idx + 68] = mem[_50648 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_52467 + 68] = mem[_52467 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _52467 + -mem[64] + 100
                            _31861 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31861] = 26
                            mem[_31861 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32725 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32725] = 26
                                mem[_32725 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            else:
                                _32724 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32724] = 26
                                mem[_32724 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                            if 0 > stor6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if totalFees < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            require arg2 / 100
                            if 3 * arg2 / 100 / arg2 / 100 != 3:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                            mem[64] = 224
                            mem[160] = 30
                            mem[192] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 > arg2:
                                revert with 0, 'SafeMath: subtraction overflow'
                            idx = 0
                            s = 5 * 10^13
                            t = stor6
                            while idx < stor5.length:
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                if stor1[stor5[idx]] > t:
                                    _32268 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32268] = 26
                                    mem[_32268 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34664 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34664] = 30
                                            mem[_34664 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36716 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36716] = 30
                                            mem[_36716 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38280 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38280 + idx + 68] = mem[_36716 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38280 + 68] = mem[_38280 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38280 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45904 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45904] = 30
                                            mem[_45904 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _48521 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48521 + idx + 68] = mem[_45904 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48521 + 68] = mem[_48521 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48521 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34914 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34914] = 30
                                        mem[_34914 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _35512 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35512 + idx + 68] = mem[_34914 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35512 + 68] = mem[_35512 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35512 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38279 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38279] = 30
                                        mem[_38279 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40158 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40158 + idx + 68] = mem[_38279 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40158 + 68] = mem[_40158 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40158 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _48520 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48520] = 30
                                        mem[_48520 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50630 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50630 + idx + 68] = mem[_48520 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50630 + 68] = mem[_50630 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50630 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _34913 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34913] = 30
                                        mem[_34913 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35509 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35509 + idx + 68] = mem[_34913 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35509 + 68] = mem[_35509 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35509 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38278 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38278] = 30
                                        mem[_38278 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _40155 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40155 + idx + 68] = mem[_38278 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40155 + 68] = mem[_40155 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40155 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48519 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48519] = 30
                                        mem[_48519 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50627 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50627 + idx + 68] = mem[_48519 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50627 + 68] = mem[_50627 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50627 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35508 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35508] = 30
                                    mem[_35508 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _36308 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36308 + idx + 68] = mem[_35508 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36308 + 68] = mem[_36308 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36308 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40154 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40154] = 30
                                    mem[_40154 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42384 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42384 + idx + 68] = mem[_40154 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42384 + 68] = mem[_42384 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42384 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _50626 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50626] = 30
                                    mem[_50626 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52439 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52439 + idx + 68] = mem[_50626 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52439 + 68] = mem[_52439 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52439 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                if stor2[stor5[idx]] <= s:
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    _32370 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32370] = 30
                                    mem[_32370 + 32] = 'SafeMath: subtraction overflow'
                                    if stor1[stor5[idx]] > t:
                                        _32578 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_32578 + idx + 68] = mem[_32370 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_32578 + 68] = mem[_32578 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _32578 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    _33342 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33342] = 30
                                    mem[_33342 + 32] = 'SafeMath: subtraction overflow'
                                    if stor2[stor5[idx]] <= s:
                                        idx = idx + 1
                                        s = s - stor2[stor5[idx]]
                                        t = t - stor1[stor5[idx]]
                                        continue 
                                    _33656 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_33656 + idx + 68] = mem[_33342 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_33656 + 68] = mem[_33656 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _33656 + -mem[64] + 100
                                _32432 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32432] = 26
                                mem[_32432 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34915 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34915] = 30
                                        mem[_34915 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38287 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38287] = 30
                                        mem[_38287 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40168 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40168 + idx + 68] = mem[_38287 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40168 + 68] = mem[_40168 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40168 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48528 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48528] = 30
                                        mem[_48528 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _50637 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50637 + idx + 68] = mem[_48528 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50637 + 68] = mem[_50637 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50637 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35516 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35516] = 30
                                    mem[_35516 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _36318 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36318 + idx + 68] = mem[_35516 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36318 + 68] = mem[_36318 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36318 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40167 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40167] = 30
                                    mem[_40167 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _42400 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42400 + idx + 68] = mem[_40167 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42400 + 68] = mem[_42400 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42400 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    _50636 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50636] = 30
                                    mem[_50636 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52451 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52451 + idx + 68] = mem[_50636 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52451 + 68] = mem[_52451 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52451 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _35515 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35515] = 30
                                    mem[_35515 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36315 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36315 + idx + 68] = mem[_35515 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36315 + 68] = mem[_36315 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36315 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40166 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40166] = 30
                                    mem[_40166 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42397 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42397 + idx + 68] = mem[_40166 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42397 + 68] = mem[_42397 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42397 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50635 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50635] = 30
                                    mem[_50635 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _52448 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52448 + idx + 68] = mem[_50635 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52448 + 68] = mem[_52448 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52448 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _36314 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_36314] = 30
                                mem[_36314 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _37546 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_37546 + idx + 68] = mem[_36314 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_37546 + 68] = mem[_37546 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _37546 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _42396 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_42396] = 30
                                mem[_42396 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _44791 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_44791 + idx + 68] = mem[_42396 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_44791 + 68] = mem[_44791 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _44791 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 1
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                _52447 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_52447] = 30
                                mem[_52447 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _54441 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_54441 + idx + 68] = mem[_52447 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_54441 + 68] = mem[_54441 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _54441 + -mem[64] + 100
                            _31856 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_31856] = 26
                            mem[_31856 + 32] = 'SafeMath: division by zero'
                            if t < stor6 / 5 * 10^13:
                                _32723 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32723] = 26
                                mem[_32723 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                _32722 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32722] = 26
                                mem[_32722 + 32] = 'SafeMath: division by zero'
                                if s <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require s
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                                else:
                                    require arg2
                                    if arg2 * t / s / arg2 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                        if 3 * arg2 / 100 * t / s > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor6 += -3 * arg2 / 100 * t / s
                            if totalFees + (3 * arg2 / 100) < totalFees:
                                revert with 0, 'SafeMath: addition overflow'
                            totalFees += 3 * arg2 / 100
                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32253 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32253] = 26
                                        mem[_32253 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34659 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34659] = 30
                                            mem[_34659 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36695 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36695] = 30
                                            mem[_36695 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38232 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38232 + idx + 68] = mem[_36695 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38232 + 68] = mem[_38232 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38232 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45843 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45843] = 30
                                            mem[_45843 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48440 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48440 + idx + 68] = mem[_45843 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48440 + 68] = mem[_48440 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48440 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34901 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34901] = 30
                                        mem[_34901 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35468 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35468 + idx + 68] = mem[_34901 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35468 + 68] = mem[_35468 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35468 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38231 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38231] = 30
                                        mem[_38231 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _40048 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40048 + idx + 68] = mem[_38231 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40048 + 68] = mem[_40048 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40048 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48439 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48439] = 30
                                        mem[_48439 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50550 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50550 + idx + 68] = mem[_48439 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50550 + 68] = mem[_50550 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50550 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32365 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32365] = 30
                                        mem[_32365 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32563 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32563 + idx + 68] = mem[_32365 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32563 + 68] = mem[_32563 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32563 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33332 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33332] = 30
                                        mem[_33332 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33631 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33631 + idx + 68] = mem[_33332 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33631 + 68] = mem[_33631 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33631 + -mem[64] + 100
                                    _32427 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32427] = 26
                                    mem[_32427 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34902 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34902] = 30
                                        mem[_34902 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38237 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38237] = 30
                                        mem[_38237 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40055 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40055 + idx + 68] = mem[_38237 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40055 + 68] = mem[_40055 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40055 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48444 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48444] = 30
                                        mem[_48444 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50555 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50555 + idx + 68] = mem[_48444 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50555 + 68] = mem[_50555 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50555 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35471 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35471] = 30
                                    mem[_35471 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36253 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36253 + idx + 68] = mem[_35471 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36253 + 68] = mem[_36253 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36253 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40054 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40054] = 30
                                    mem[_40054 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42252 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42252 + idx + 68] = mem[_40054 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42252 + 68] = mem[_42252 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42252 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50554 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50554] = 30
                                    mem[_50554 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52363 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52363 + idx + 68] = mem[_50554 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52363 + 68] = mem[_52363 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52363 + -mem[64] + 100
                                _31831 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31831] = 26
                                mem[_31831 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32713 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32713] = 26
                                    mem[_32713 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32712 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32712] = 26
                                    mem[_32712 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32250 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32250] = 26
                                        mem[_32250 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34658 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34658] = 30
                                                mem[_34658 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36692 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36692] = 30
                                                mem[_36692 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38223 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38223 + idx + 68] = mem[_36692 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38223 + 68] = mem[_38223 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38223 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45832 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45832] = 30
                                                mem[_45832 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48425 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48425 + idx + 68] = mem[_45832 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48425 + 68] = mem[_48425 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48425 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34899 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34899] = 30
                                            mem[_34899 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35461 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35461 + idx + 68] = mem[_34899 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35461 + 68] = mem[_35461 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35461 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38222 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38222] = 30
                                            mem[_38222 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40029 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40029 + idx + 68] = mem[_38222 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40029 + 68] = mem[_40029 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40029 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _48424 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48424] = 30
                                            mem[_48424 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50536 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50536 + idx + 68] = mem[_48424 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50536 + 68] = mem[_50536 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50536 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34898 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34898] = 30
                                            mem[_34898 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35458 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35458 + idx + 68] = mem[_34898 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35458 + 68] = mem[_35458 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35458 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38221 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38221] = 30
                                            mem[_38221 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40026 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40026 + idx + 68] = mem[_38221 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40026 + 68] = mem[_40026 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40026 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48423 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48423] = 30
                                            mem[_48423 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50533 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50533 + idx + 68] = mem[_48423 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50533 + 68] = mem[_50533 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50533 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35457 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35457] = 30
                                        mem[_35457 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _36236 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36236 + idx + 68] = mem[_35457 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36236 + 68] = mem[_36236 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36236 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40025 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40025] = 30
                                        mem[_40025 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42216 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42216 + idx + 68] = mem[_40025 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42216 + 68] = mem[_42216 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42216 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _50532 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50532] = 30
                                        mem[_50532 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52335 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52335 + idx + 68] = mem[_50532 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52335 + 68] = mem[_52335 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52335 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32364 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32364] = 30
                                        mem[_32364 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32560 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32560 + idx + 68] = mem[_32364 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32560 + 68] = mem[_32560 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32560 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33330 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33330] = 30
                                        mem[_33330 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33626 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33626 + idx + 68] = mem[_33330 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33626 + 68] = mem[_33626 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33626 + -mem[64] + 100
                                    _32426 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32426] = 26
                                    mem[_32426 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34900 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34900] = 30
                                            mem[_34900 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38230 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38230] = 30
                                            mem[_38230 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40039 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40039 + idx + 68] = mem[_38230 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40039 + 68] = mem[_40039 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40039 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48432 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48432] = 30
                                            mem[_48432 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50543 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50543 + idx + 68] = mem[_48432 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50543 + 68] = mem[_50543 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50543 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35465 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35465] = 30
                                        mem[_35465 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36246 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36246 + idx + 68] = mem[_35465 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36246 + 68] = mem[_36246 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36246 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40038 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40038] = 30
                                        mem[_40038 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42232 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42232 + idx + 68] = mem[_40038 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42232 + 68] = mem[_42232 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42232 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _50542 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50542] = 30
                                        mem[_50542 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52347 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52347 + idx + 68] = mem[_50542 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52347 + 68] = mem[_52347 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52347 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35464 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35464] = 30
                                        mem[_35464 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36243 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36243 + idx + 68] = mem[_35464 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36243 + 68] = mem[_36243 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36243 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40037 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40037] = 30
                                        mem[_40037 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42229 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42229 + idx + 68] = mem[_40037 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42229 + 68] = mem[_42229 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42229 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50541 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50541] = 30
                                        mem[_50541 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52344 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52344 + idx + 68] = mem[_50541 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52344 + 68] = mem[_52344 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52344 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36242 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36242] = 30
                                    mem[_36242 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37441 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37441 + idx + 68] = mem[_36242 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37441 + 68] = mem[_37441 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37441 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42228 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42228] = 30
                                    mem[_42228 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _44603 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44603 + idx + 68] = mem[_42228 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44603 + 68] = mem[_44603 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44603 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _52343 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52343] = 30
                                    mem[_52343 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54318 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54318 + idx + 68] = mem[_52343 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54318 + 68] = mem[_54318 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54318 + -mem[64] + 100
                                _31826 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31826] = 26
                                mem[_31826 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32711 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32711] = 26
                                    mem[_32711 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32710 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32710] = 26
                                    mem[_32710 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not stor4[address(arg1)]:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32259 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32259] = 26
                                            mem[_32259 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34661 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34661] = 30
                                                mem[_34661 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36703 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36703] = 30
                                                mem[_36703 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38251 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38251 + idx + 68] = mem[_36703 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38251 + 68] = mem[_38251 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38251 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45866 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45866] = 30
                                                mem[_45866 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48473 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48473 + idx + 68] = mem[_45866 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48473 + 68] = mem[_48473 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48473 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34906 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34906] = 30
                                            mem[_34906 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35485 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35485 + idx + 68] = mem[_34906 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35485 + 68] = mem[_35485 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35485 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38250 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38250] = 30
                                            mem[_38250 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40091 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40091 + idx + 68] = mem[_38250 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40091 + 68] = mem[_40091 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40091 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48472 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48472] = 30
                                            mem[_48472 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50586 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50586 + idx + 68] = mem[_48472 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50586 + 68] = mem[_50586 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50586 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32367 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32367] = 30
                                            mem[_32367 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32569 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32569 + idx + 68] = mem[_32367 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32569 + 68] = mem[_32569 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32569 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33336 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33336] = 30
                                            mem[_33336 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33641 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33641 + idx + 68] = mem[_33336 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33641 + 68] = mem[_33641 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33641 + -mem[64] + 100
                                        _32429 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32429] = 26
                                        mem[_32429 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34907 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34907] = 30
                                            mem[_34907 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38256 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38256] = 30
                                            mem[_38256 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40098 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40098 + idx + 68] = mem[_38256 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40098 + 68] = mem[_40098 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40098 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48477 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48477] = 30
                                            mem[_48477 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50591 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50591 + idx + 68] = mem[_48477 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50591 + 68] = mem[_50591 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50591 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35488 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35488] = 30
                                        mem[_35488 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36277 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36277 + idx + 68] = mem[_35488 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36277 + 68] = mem[_36277 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36277 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40097 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40097] = 30
                                        mem[_40097 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42308 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42308 + idx + 68] = mem[_40097 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42308 + 68] = mem[_42308 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42308 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50590 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50590] = 30
                                        mem[_50590 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _52407 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52407 + idx + 68] = mem[_50590 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52407 + 68] = mem[_52407 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52407 + -mem[64] + 100
                                    _31841 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31841] = 26
                                    mem[_31841 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32717 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32717] = 26
                                        mem[_32717 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    else:
                                        _32716 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32716] = 26
                                        mem[_32716 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32256 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32256] = 26
                                            mem[_32256 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34660 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34660] = 30
                                                    mem[_34660 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36700 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36700] = 30
                                                    mem[_36700 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38242 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38242 + idx + 68] = mem[_36700 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38242 + 68] = mem[_38242 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38242 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _45855 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_45855] = 30
                                                    mem[_45855 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48458 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48458 + idx + 68] = mem[_45855 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48458 + 68] = mem[_48458 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48458 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34904 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34904] = 30
                                                mem[_34904 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _35478 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35478 + idx + 68] = mem[_34904 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35478 + 68] = mem[_35478 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35478 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38241 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38241] = 30
                                                mem[_38241 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40072 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40072 + idx + 68] = mem[_38241 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40072 + 68] = mem[_40072 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40072 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                _48457 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48457] = 30
                                                mem[_48457 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50572 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50572 + idx + 68] = mem[_48457 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50572 + 68] = mem[_50572 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50572 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _34903 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34903] = 30
                                                mem[_34903 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35475 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35475 + idx + 68] = mem[_34903 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35475 + 68] = mem[_35475 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35475 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38240 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38240] = 30
                                                mem[_38240 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _40069 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40069 + idx + 68] = mem[_38240 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40069 + 68] = mem[_40069 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40069 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                _48456 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48456] = 30
                                                mem[_48456 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50569 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50569 + idx + 68] = mem[_48456 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50569 + 68] = mem[_50569 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50569 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35474 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35474] = 30
                                            mem[_35474 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _36260 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36260 + idx + 68] = mem[_35474 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36260 + 68] = mem[_36260 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36260 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40068 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40068] = 30
                                            mem[_40068 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42272 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42272 + idx + 68] = mem[_40068 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42272 + 68] = mem[_42272 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42272 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            _50568 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50568] = 30
                                            mem[_50568 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52379 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52379 + idx + 68] = mem[_50568 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52379 + 68] = mem[_52379 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52379 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32366 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32366] = 30
                                            mem[_32366 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32566 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32566 + idx + 68] = mem[_32366 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32566 + 68] = mem[_32566 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32566 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33334 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33334] = 30
                                            mem[_33334 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33636 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33636 + idx + 68] = mem[_33334 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33636 + 68] = mem[_33636 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33636 + -mem[64] + 100
                                        _32428 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32428] = 26
                                        mem[_32428 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34905 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34905] = 30
                                                mem[_34905 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38249 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38249] = 30
                                                mem[_38249 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40082 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40082 + idx + 68] = mem[_38249 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40082 + 68] = mem[_40082 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40082 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48465 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48465] = 30
                                                mem[_48465 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50579 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50579 + idx + 68] = mem[_48465 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50579 + 68] = mem[_50579 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50579 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35482 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35482] = 30
                                            mem[_35482 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _36270 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36270 + idx + 68] = mem[_35482 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36270 + 68] = mem[_36270 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36270 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40081 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40081] = 30
                                            mem[_40081 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42288 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42288 + idx + 68] = mem[_40081 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42288 + 68] = mem[_42288 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42288 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _50578 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50578] = 30
                                            mem[_50578 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52391 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52391 + idx + 68] = mem[_50578 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52391 + 68] = mem[_52391 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52391 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _35481 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35481] = 30
                                            mem[_35481 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36267 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36267 + idx + 68] = mem[_35481 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36267 + 68] = mem[_36267 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36267 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40080 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40080] = 30
                                            mem[_40080 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42285 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42285 + idx + 68] = mem[_40080 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42285 + 68] = mem[_42285 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42285 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _50577 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50577] = 30
                                            mem[_50577 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52388 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52388 + idx + 68] = mem[_50577 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52388 + 68] = mem[_52388 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52388 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36266 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36266] = 30
                                        mem[_36266 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _37476 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37476 + idx + 68] = mem[_36266 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37476 + 68] = mem[_37476 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37476 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42284 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42284] = 30
                                        mem[_42284 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _44665 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44665 + idx + 68] = mem[_42284 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44665 + 68] = mem[_44665 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44665 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _52387 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52387] = 30
                                        mem[_52387 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54368 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54368 + idx + 68] = mem[_52387 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54368 + 68] = mem[_54368 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54368 + -mem[64] + 100
                                    _31836 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31836] = 26
                                    mem[_31836 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32715 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32715] = 26
                                        mem[_32715 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        _32714 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32714] = 26
                                        mem[_32714 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            else:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32265 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32265] = 26
                                            mem[_32265 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34663 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34663] = 30
                                                mem[_34663 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36711 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36711] = 30
                                                mem[_36711 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38270 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38270 + idx + 68] = mem[_36711 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38270 + 68] = mem[_38270 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38270 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _44755 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_44755] = 30
                                                mem[_44755 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _47274 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47274 + idx + 68] = mem[_44755 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47274 + 68] = mem[_47274 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47274 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] += arg2
                                                _54412 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54412] = 30
                                                mem[_54412 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _56516 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56516 + idx + 68] = mem[_54412 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56516 + 68] = mem[_56516 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56516 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34911 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34911] = 30
                                            mem[_34911 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35502 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35502 + idx + 68] = mem[_34911 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35502 + 68] = mem[_35502 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35502 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38269 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38269] = 30
                                            mem[_38269 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40134 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40134 + idx + 68] = mem[_38269 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40134 + 68] = mem[_40134 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40134 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _47273 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47273] = 30
                                            mem[_47273 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49574 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49574 + idx + 68] = mem[_47273 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49574 + 68] = mem[_49574 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49574 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _56515 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56515] = 30
                                            mem[_56515 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58316 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58316 + idx + 68] = mem[_56515 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58316 + 68] = mem[_58316 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58316 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32369 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32369] = 30
                                            mem[_32369 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32575 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32575 + idx + 68] = mem[_32369 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32575 + 68] = mem[_32575 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32575 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33340 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33340] = 30
                                            mem[_33340 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33651 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33651 + idx + 68] = mem[_33340 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33651 + 68] = mem[_33651 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33651 + -mem[64] + 100
                                        _32431 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32431] = 26
                                        mem[_32431 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34912 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34912] = 30
                                            mem[_34912 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38275 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38275] = 30
                                            mem[_38275 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40141 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40141 + idx + 68] = mem[_38275 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40141 + 68] = mem[_40141 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40141 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _47280 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47280] = 30
                                            mem[_47280 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49581 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49581 + idx + 68] = mem[_47280 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49581 + 68] = mem[_49581 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49581 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _56520 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56520] = 30
                                            mem[_56520 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58321 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58321 + idx + 68] = mem[_56520 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58321 + 68] = mem[_58321 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58321 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35505 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35505] = 30
                                        mem[_35505 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36301 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36301 + idx + 68] = mem[_35505 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36301 + 68] = mem[_36301 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36301 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40140 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40140] = 30
                                        mem[_40140 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42364 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42364 + idx + 68] = mem[_40140 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42364 + 68] = mem[_42364 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42364 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49580 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49580] = 30
                                        mem[_49580 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51439 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51439 + idx + 68] = mem[_49580 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51439 + 68] = mem[_51439 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51439 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _58320 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58320] = 30
                                        mem[_58320 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _59528 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59528 + idx + 68] = mem[_58320 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59528 + 68] = mem[_59528 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59528 + -mem[64] + 100
                                    _31851 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31851] = 26
                                    mem[_31851 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32721 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32721] = 26
                                        mem[_32721 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    else:
                                        _32720 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32720] = 26
                                        mem[_32720 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32262 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32262] = 26
                                            mem[_32262 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34662 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34662] = 30
                                                    mem[_34662 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36708 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36708] = 30
                                                    mem[_36708 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38261 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38261 + idx + 68] = mem[_36708 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38261 + 68] = mem[_38261 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38261 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _44727 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44727] = 30
                                                    mem[_44727 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _47248 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_47248 + idx + 68] = mem[_44727 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_47248 + 68] = mem[_47248 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _47248 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 2
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    _54401 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54401] = 30
                                                    mem[_54401 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _56501 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56501 + idx + 68] = mem[_54401 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56501 + 68] = mem[_56501 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56501 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34909 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34909] = 30
                                                mem[_34909 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _35495 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35495 + idx + 68] = mem[_34909 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35495 + 68] = mem[_35495 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35495 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38260 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38260] = 30
                                                mem[_38260 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40115 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40115 + idx + 68] = mem[_38260 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40115 + 68] = mem[_40115 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40115 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47247 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47247] = 30
                                                mem[_47247 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49552 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49552 + idx + 68] = mem[_47247 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49552 + 68] = mem[_49552 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49552 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56500 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56500] = 30
                                                mem[_56500 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58302 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58302 + idx + 68] = mem[_56500 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58302 + 68] = mem[_58302 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58302 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _34908 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34908] = 30
                                                mem[_34908 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35492 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35492 + idx + 68] = mem[_34908 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35492 + 68] = mem[_35492 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35492 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38259 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38259] = 30
                                                mem[_38259 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _40112 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40112 + idx + 68] = mem[_38259 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40112 + 68] = mem[_40112 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40112 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47246 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47246] = 30
                                                mem[_47246 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49549 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49549 + idx + 68] = mem[_47246 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49549 + 68] = mem[_49549 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49549 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56499 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56499] = 30
                                                mem[_56499 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58299 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58299 + idx + 68] = mem[_56499 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58299 + 68] = mem[_58299 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58299 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35491 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35491] = 30
                                            mem[_35491 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _36284 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36284 + idx + 68] = mem[_35491 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36284 + 68] = mem[_36284 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36284 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40111 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40111] = 30
                                            mem[_40111 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42328 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42328 + idx + 68] = mem[_40111 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42328 + 68] = mem[_42328 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42328 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49548 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49548] = 30
                                            mem[_49548 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51403 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51403 + idx + 68] = mem[_49548 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51403 + 68] = mem[_51403 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51403 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58298 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58298] = 30
                                            mem[_58298 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59500 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59500 + idx + 68] = mem[_58298 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59500 + 68] = mem[_59500 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59500 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32368 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32368] = 30
                                            mem[_32368 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32572 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32572 + idx + 68] = mem[_32368 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32572 + 68] = mem[_32572 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32572 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33338 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33338] = 30
                                            mem[_33338 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33646 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33646 + idx + 68] = mem[_33338 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33646 + 68] = mem[_33646 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33646 + -mem[64] + 100
                                        _32430 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32430] = 26
                                        mem[_32430 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34910 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34910] = 30
                                                mem[_34910 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38268 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38268] = 30
                                                mem[_38268 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40125 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40125 + idx + 68] = mem[_38268 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40125 + 68] = mem[_40125 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40125 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47260 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47260] = 30
                                                mem[_47260 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49563 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49563 + idx + 68] = mem[_47260 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49563 + 68] = mem[_49563 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49563 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56508 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56508] = 30
                                                mem[_56508 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58309 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58309 + idx + 68] = mem[_56508 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58309 + 68] = mem[_58309 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58309 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35499 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35499] = 30
                                            mem[_35499 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _36294 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36294 + idx + 68] = mem[_35499 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36294 + 68] = mem[_36294 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36294 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40124 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40124] = 30
                                            mem[_40124 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42344 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42344 + idx + 68] = mem[_40124 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42344 + 68] = mem[_42344 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42344 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49562 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49562] = 30
                                            mem[_49562 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51419 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51419 + idx + 68] = mem[_49562 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51419 + 68] = mem[_51419 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51419 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58308 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58308] = 30
                                            mem[_58308 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59512 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59512 + idx + 68] = mem[_58308 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59512 + 68] = mem[_59512 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59512 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _35498 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35498] = 30
                                            mem[_35498 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36291 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36291 + idx + 68] = mem[_35498 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36291 + 68] = mem[_36291 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36291 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40123 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40123] = 30
                                            mem[_40123 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42341 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42341 + idx + 68] = mem[_40123 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42341 + 68] = mem[_42341 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42341 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49561 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49561] = 30
                                            mem[_49561 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51416 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51416 + idx + 68] = mem[_49561 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51416 + 68] = mem[_51416 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51416 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58307 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58307] = 30
                                            mem[_58307 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59509 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59509 + idx + 68] = mem[_58307 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59509 + 68] = mem[_59509 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59509 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36290 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36290] = 30
                                        mem[_36290 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _37511 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37511 + idx + 68] = mem[_36290 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37511 + 68] = mem[_37511 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37511 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42340 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42340] = 30
                                        mem[_42340 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _44728 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44728 + idx + 68] = mem[_42340 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44728 + 68] = mem[_44728 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44728 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _51415 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51415] = 30
                                        mem[_51415 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _53266 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53266 + idx + 68] = mem[_51415 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53266 + 68] = mem[_53266 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53266 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _59508 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59508] = 30
                                        mem[_59508 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _60406 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60406 + idx + 68] = mem[_59508 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60406 + 68] = mem[_60406 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60406 + -mem[64] + 100
                                    _31846 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31846] = 26
                                    mem[_31846 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32719 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32719] = 26
                                        mem[_32719 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        _32718 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32718] = 26
                                        mem[_32718 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
            else:
                mem[0] = arg1
                mem[32] = 4
                if stor4[address(arg1)]:
                    mem[96] = 26
                    mem[128] = 'SafeMath: division by zero'
                    if not arg2 / 100:
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 0 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 5 * 10^13
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32319 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32319] = 26
                                mem[_32319 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    _34681 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34681] = 30
                                    mem[_34681 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _36783 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36783] = 30
                                    mem[_36783 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _38441 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_38441 + idx + 68] = mem[_36783 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_38441 + 68] = mem[_38441 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _38441 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] += arg2
                                    _49890 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_49890] = 30
                                    mem[_49890 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _51641 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_51641 + idx + 68] = mem[_49890 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_51641 + 68] = mem[_51641 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _51641 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _34956 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34956] = 30
                                mem[_34956 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _35655 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_35655 + idx + 68] = mem[_34956 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_35655 + 68] = mem[_35655 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _35655 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38440 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38440] = 30
                                mem[_38440 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _40521 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_40521 + idx + 68] = mem[_38440 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_40521 + 68] = mem[_40521 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _40521 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] += arg2
                                _51640 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51640] = 30
                                mem[_51640 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _53507 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53507 + idx + 68] = mem[_51640 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53507 + 68] = mem[_53507 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53507 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32387 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32387] = 30
                                mem[_32387 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32629 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32629 + idx + 68] = mem[_32387 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32629 + 68] = mem[_32629 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32629 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33376 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33376] = 30
                                mem[_33376 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33741 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33741 + idx + 68] = mem[_33376 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33741 + 68] = mem[_33741 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33741 + -mem[64] + 100
                            _32449 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32449] = 26
                            mem[_32449 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                _34957 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_34957] = 30
                                mem[_34957 + 32] = 'SafeMath: subtraction overflow'
                                mem[0] = msg.sender
                                mem[32] = 1
                                _38446 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38446] = 30
                                mem[_38446 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _40528 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_40528 + idx + 68] = mem[_38446 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_40528 + 68] = mem[_40528 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _40528 + -mem[64] + 100
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] += arg2
                                _51645 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_51645] = 30
                                mem[_51645 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                    return 1
                                _53512 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_53512 + idx + 68] = mem[_51645 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_53512 + 68] = mem[_53512 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _53512 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _35658 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_35658] = 30
                            mem[_35658 + 32] = 'SafeMath: subtraction overflow'
                            if 0 > arg2 * stor6 / 5 * 10^13:
                                _36517 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_36517 + idx + 68] = mem[_35658 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_36517 + 68] = mem[_36517 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _36517 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _40527 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_40527] = 30
                            mem[_40527 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _42868 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_42868 + idx + 68] = mem[_40527 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_42868 + 68] = mem[_42868 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _42868 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 2
                            stor2[address(arg1)] += arg2
                            _53511 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_53511] = 30
                            mem[_53511 + 32] = 'SafeMath: subtraction overflow'
                            if 0 <= stor6:
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                                return 1
                            _55598 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_55598 + idx + 68] = mem[_53511 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_55598 + 68] = mem[_55598 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _55598 + -mem[64] + 100
                        _31941 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31941] = 26
                        mem[_31941 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 5 * 10^13:
                            _32757 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32757] = 26
                            mem[_32757 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                        else:
                            _32756 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32756] = 26
                            mem[_32756 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if 0 > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if 0 > arg2 * t / s:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if arg2 * t / s > stor1[address(msg.sender)]:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * t / s
                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        stor2[address(arg1)] += arg2
                        if 0 > stor6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if totalFees < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        require arg2 / 100
                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        mem[64] = 224
                        mem[160] = 30
                        mem[192] = 'SafeMath: subtraction overflow'
                        if 3 * arg2 / 100 > arg2:
                            revert with 0, 'SafeMath: subtraction overflow'
                        idx = 0
                        s = 5 * 10^13
                        t = stor6
                        while idx < stor5.length:
                            mem[0] = stor5[idx]
                            mem[32] = 1
                            if stor1[stor5[idx]] > t:
                                _32316 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32316] = 26
                                mem[_32316 + 32] = 'SafeMath: division by zero'
                                if not arg2:
                                    if not 3 * arg2 / 100:
                                        _34680 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34680] = 30
                                        mem[_34680 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _36780 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36780] = 30
                                        mem[_36780 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _38432 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_38432 + idx + 68] = mem[_36780 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_38432 + 68] = mem[_38432 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _38432 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _49878 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49878] = 30
                                        mem[_49878 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _51632 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_51632 + idx + 68] = mem[_49878 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_51632 + 68] = mem[_51632 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _51632 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _34954 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34954] = 30
                                    mem[_34954 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        _35648 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35648 + idx + 68] = mem[_34954 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35648 + 68] = mem[_35648 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35648 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38431 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38431] = 30
                                    mem[_38431 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40502 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40502 + idx + 68] = mem[_38431 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40502 + 68] = mem[_40502 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40502 + -mem[64] + 100
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _51631 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51631] = 30
                                    mem[_51631 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53493 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53493 + idx + 68] = mem[_51631 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53493 + 68] = mem[_53493 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53493 + -mem[64] + 100
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    _34953 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34953] = 30
                                    mem[_34953 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _35645 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_35645 + idx + 68] = mem[_34953 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_35645 + 68] = mem[_35645 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _35645 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38430 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38430] = 30
                                    mem[_38430 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _40499 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40499 + idx + 68] = mem[_38430 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40499 + 68] = mem[_40499 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40499 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _51630 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51630] = 30
                                    mem[_51630 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53490 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53490 + idx + 68] = mem[_51630 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53490 + 68] = mem[_53490 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53490 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35644 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35644] = 30
                                mem[_35644 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                    _36500 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36500 + idx + 68] = mem[_35644 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36500 + 68] = mem[_36500 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36500 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40498 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40498] = 30
                                mem[_40498 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _42832 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42832 + idx + 68] = mem[_40498 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42832 + 68] = mem[_42832 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42832 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                _53489 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53489] = 30
                                mem[_53489 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _55570 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55570 + idx + 68] = mem[_53489 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55570 + 68] = mem[_55570 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55570 + -mem[64] + 100
                            require idx < stor5.length
                            mem[0] = stor5[idx]
                            mem[32] = 2
                            if stor2[stor5[idx]] <= s:
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 1
                                _32386 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32386] = 30
                                mem[_32386 + 32] = 'SafeMath: subtraction overflow'
                                if stor1[stor5[idx]] > t:
                                    _32626 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_32626 + idx + 68] = mem[_32386 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_32626 + 68] = mem[_32626 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _32626 + -mem[64] + 100
                                require idx < stor5.length
                                mem[0] = stor5[idx]
                                mem[32] = 2
                                _33374 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_33374] = 30
                                mem[_33374 + 32] = 'SafeMath: subtraction overflow'
                                if stor2[stor5[idx]] <= s:
                                    idx = idx + 1
                                    s = s - stor2[stor5[idx]]
                                    t = t - stor1[stor5[idx]]
                                    continue 
                                _33736 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_33736 + idx + 68] = mem[_33374 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_33736 + 68] = mem[_33736 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _33736 + -mem[64] + 100
                            _32448 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32448] = 26
                            mem[_32448 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    _34955 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_34955] = 30
                                    mem[_34955 + 32] = 'SafeMath: subtraction overflow'
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _38439 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_38439] = 30
                                    mem[_38439 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        _40512 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_40512 + idx + 68] = mem[_38439 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_40512 + 68] = mem[_40512 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _40512 + -mem[64] + 100
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 2
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    _51637 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_51637] = 30
                                    mem[_51637 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _53500 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_53500 + idx + 68] = mem[_51637 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_53500 + 68] = mem[_53500 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _53500 + -mem[64] + 100
                                require 3 * arg2 / 100
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _35652 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35652] = 30
                                mem[_35652 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                    _36510 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36510 + idx + 68] = mem[_35652 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36510 + 68] = mem[_36510 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36510 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40511 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40511] = 30
                                mem[_40511 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > stor1[address(msg.sender)]:
                                    _42848 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42848 + idx + 68] = mem[_40511 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42848 + 68] = mem[_42848 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42848 + -mem[64] + 100
                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                _53499 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53499] = 30
                                mem[_53499 + 32] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _55582 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55582 + idx + 68] = mem[_53499 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55582 + 68] = mem[_55582 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55582 + -mem[64] + 100
                            require arg2
                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not 3 * arg2 / 100:
                                _35651 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_35651] = 30
                                mem[_35651 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > arg2 * stor6 / 5 * 10^13:
                                    _36507 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_36507 + idx + 68] = mem[_35651 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_36507 + 68] = mem[_36507 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _36507 + -mem[64] + 100
                                mem[0] = msg.sender
                                mem[32] = 1
                                _40510 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_40510] = 30
                                mem[_40510 + 32] = 'SafeMath: subtraction overflow'
                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                    _42845 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_42845 + idx + 68] = mem[_40510 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_42845 + 68] = mem[_42845 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _42845 + -mem[64] + 100
                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[0] = arg1
                                mem[32] = 2
                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                _53498 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_53498] = 30
                                mem[_53498 + 32] = 'SafeMath: subtraction overflow'
                                if 0 <= stor6:
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                    return 1
                                _55579 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_55579 + idx + 68] = mem[_53498 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_55579 + 68] = mem[_55579 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _55579 + -mem[64] + 100
                            require 3 * arg2 / 100
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _36506 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_36506] = 30
                            mem[_36506 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                _37826 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37826 + idx + 68] = mem[_36506 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37826 + 68] = mem[_37826 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37826 + -mem[64] + 100
                            mem[0] = msg.sender
                            mem[32] = 1
                            _42844 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_42844] = 30
                            mem[_42844 + 32] = 'SafeMath: subtraction overflow'
                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                _45291 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_45291 + idx + 68] = mem[_42844 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_45291 + 68] = mem[_45291 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _45291 + -mem[64] + 100
                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            mem[0] = arg1
                            mem[32] = 2
                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                            _55578 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_55578] = 30
                            mem[_55578 + 32] = 'SafeMath: subtraction overflow'
                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                return 1
                            _57468 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_57468 + idx + 68] = mem[_55578 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_57468 + 68] = mem[_57468 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _57468 + -mem[64] + 100
                        _31936 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_31936] = 26
                        mem[_31936 + 32] = 'SafeMath: division by zero'
                        if t < stor6 / 5 * 10^13:
                            _32755 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32755] = 26
                            mem[_32755 + 32] = 'SafeMath: division by zero'
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                            else:
                                require arg2
                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                        else:
                            _32754 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32754] = 26
                            mem[_32754 + 32] = 'SafeMath: division by zero'
                            if s <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require s
                            if not arg2:
                                if not 3 * arg2 / 100:
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * t / s > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if 0 > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                            else:
                                require arg2
                                if arg2 * t / s / arg2 != t / s:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not 3 * arg2 / 100:
                                    if 0 > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] += arg2 * t / s
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                    if 3 * arg2 / 100 * t / s > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor6 += -3 * arg2 / 100 * t / s
                        if totalFees + (3 * arg2 / 100) < totalFees:
                            revert with 0, 'SafeMath: addition overflow'
                        totalFees += 3 * arg2 / 100
                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                else:
                    if stor4[address(msg.sender)]:
                        mem[0] = msg.sender
                        mem[32] = 4
                        if not stor4[address(msg.sender)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32277 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32277] = 26
                                        mem[_32277 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34667 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34667] = 30
                                            mem[_34667 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36727 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36727] = 30
                                            mem[_36727 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38308 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38308 + idx + 68] = mem[_36727 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38308 + 68] = mem[_38308 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38308 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _45938 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45938] = 30
                                            mem[_45938 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48569 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48569 + idx + 68] = mem[_45938 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48569 + 68] = mem[_48569 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48569 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34921 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34921] = 30
                                        mem[_34921 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35536 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35536 + idx + 68] = mem[_34921 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35536 + 68] = mem[_35536 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35536 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38307 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38307] = 30
                                        mem[_38307 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _40220 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40220 + idx + 68] = mem[_38307 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40220 + 68] = mem[_40220 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40220 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48568 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48568] = 30
                                        mem[_48568 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50680 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50680 + idx + 68] = mem[_48568 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50680 + 68] = mem[_50680 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50680 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32373 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32373] = 30
                                        mem[_32373 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32587 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32587 + idx + 68] = mem[_32373 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32587 + 68] = mem[_32587 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32587 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33348 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33348] = 30
                                        mem[_33348 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33671 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33671 + idx + 68] = mem[_33348 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33671 + 68] = mem[_33671 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33671 + -mem[64] + 100
                                    _32435 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32435] = 26
                                    mem[_32435 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34922 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34922] = 30
                                        mem[_34922 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38313 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38313] = 30
                                        mem[_38313 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40227 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40227 + idx + 68] = mem[_38313 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40227 + 68] = mem[_40227 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40227 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48573 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48573] = 30
                                        mem[_48573 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50685 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50685 + idx + 68] = mem[_48573 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50685 + 68] = mem[_50685 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50685 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35539 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35539] = 30
                                    mem[_35539 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36349 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36349 + idx + 68] = mem[_35539 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36349 + 68] = mem[_36349 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36349 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40226 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40226] = 30
                                    mem[_40226 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42476 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42476 + idx + 68] = mem[_40226 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42476 + 68] = mem[_42476 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42476 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50684 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50684] = 30
                                    mem[_50684 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52511 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52511 + idx + 68] = mem[_50684 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52511 + 68] = mem[_52511 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52511 + -mem[64] + 100
                                _31871 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31871] = 26
                                mem[_31871 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32729 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32729] = 26
                                    mem[_32729 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32728 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32728] = 26
                                    mem[_32728 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32274 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32274] = 26
                                        mem[_32274 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34666 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34666] = 30
                                                mem[_34666 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36724 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36724] = 30
                                                mem[_36724 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38299 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38299 + idx + 68] = mem[_36724 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38299 + 68] = mem[_38299 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38299 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45927 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45927] = 30
                                                mem[_45927 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48554 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48554 + idx + 68] = mem[_45927 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48554 + 68] = mem[_48554 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48554 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34919 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34919] = 30
                                            mem[_34919 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35529 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35529 + idx + 68] = mem[_34919 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35529 + 68] = mem[_35529 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35529 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38298 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38298] = 30
                                            mem[_38298 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40201 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40201 + idx + 68] = mem[_38298 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40201 + 68] = mem[_40201 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40201 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _48553 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48553] = 30
                                            mem[_48553 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50666 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50666 + idx + 68] = mem[_48553 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50666 + 68] = mem[_50666 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50666 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34918 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34918] = 30
                                            mem[_34918 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35526 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35526 + idx + 68] = mem[_34918 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35526 + 68] = mem[_35526 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35526 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38297 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38297] = 30
                                            mem[_38297 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40198 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40198 + idx + 68] = mem[_38297 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40198 + 68] = mem[_40198 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40198 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48552 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48552] = 30
                                            mem[_48552 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50663 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50663 + idx + 68] = mem[_48552 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50663 + 68] = mem[_50663 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50663 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35525 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35525] = 30
                                        mem[_35525 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _36332 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36332 + idx + 68] = mem[_35525 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36332 + 68] = mem[_36332 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36332 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40197 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40197] = 30
                                        mem[_40197 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42440 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42440 + idx + 68] = mem[_40197 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42440 + 68] = mem[_42440 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42440 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _50662 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50662] = 30
                                        mem[_50662 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52483 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52483 + idx + 68] = mem[_50662 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52483 + 68] = mem[_52483 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52483 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32372 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32372] = 30
                                        mem[_32372 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32584 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32584 + idx + 68] = mem[_32372 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32584 + 68] = mem[_32584 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32584 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33346 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33346] = 30
                                        mem[_33346 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33666 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33666 + idx + 68] = mem[_33346 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33666 + 68] = mem[_33666 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33666 + -mem[64] + 100
                                    _32434 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32434] = 26
                                    mem[_32434 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34920 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34920] = 30
                                            mem[_34920 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38306 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38306] = 30
                                            mem[_38306 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40211 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40211 + idx + 68] = mem[_38306 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40211 + 68] = mem[_40211 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40211 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48561 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48561] = 30
                                            mem[_48561 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50673 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50673 + idx + 68] = mem[_48561 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50673 + 68] = mem[_50673 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50673 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35533 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35533] = 30
                                        mem[_35533 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36342 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36342 + idx + 68] = mem[_35533 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36342 + 68] = mem[_36342 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36342 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40210 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40210] = 30
                                        mem[_40210 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42456 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42456 + idx + 68] = mem[_40210 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42456 + 68] = mem[_42456 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42456 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _50672 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50672] = 30
                                        mem[_50672 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52495 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52495 + idx + 68] = mem[_50672 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52495 + 68] = mem[_52495 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52495 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35532 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35532] = 30
                                        mem[_35532 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36339 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36339 + idx + 68] = mem[_35532 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36339 + 68] = mem[_36339 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36339 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40209 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40209] = 30
                                        mem[_40209 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42453 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42453 + idx + 68] = mem[_40209 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42453 + 68] = mem[_42453 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42453 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50671 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50671] = 30
                                        mem[_50671 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52492 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52492 + idx + 68] = mem[_50671 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52492 + 68] = mem[_52492 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52492 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36338 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36338] = 30
                                    mem[_36338 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37581 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37581 + idx + 68] = mem[_36338 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37581 + 68] = mem[_37581 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37581 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42452 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42452] = 30
                                    mem[_42452 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _44853 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_44853 + idx + 68] = mem[_42452 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_44853 + 68] = mem[_44853 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _44853 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _52491 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52491] = 30
                                    mem[_52491 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54491 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54491 + idx + 68] = mem[_52491 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54491 + 68] = mem[_54491 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54491 + -mem[64] + 100
                                _31866 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31866] = 26
                                mem[_31866 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32727 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32727] = 26
                                    mem[_32727 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32726 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32726] = 26
                                    mem[_32726 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = arg1
                            mem[32] = 4
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not stor4[address(arg1)]:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32283 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32283] = 26
                                            mem[_32283 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34669 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34669] = 30
                                                mem[_34669 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36735 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36735] = 30
                                                mem[_36735 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38327 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38327 + idx + 68] = mem[_36735 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38327 + 68] = mem[_38327 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38327 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _45961 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45961] = 30
                                                mem[_45961 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48602 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48602 + idx + 68] = mem[_45961 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48602 + 68] = mem[_48602 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48602 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34926 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34926] = 30
                                            mem[_34926 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35553 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35553 + idx + 68] = mem[_34926 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35553 + 68] = mem[_35553 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35553 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38326 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38326] = 30
                                            mem[_38326 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40263 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40263 + idx + 68] = mem[_38326 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40263 + 68] = mem[_40263 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40263 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48601 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48601] = 30
                                            mem[_48601 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50716 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50716 + idx + 68] = mem[_48601 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50716 + 68] = mem[_50716 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50716 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32375 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32375] = 30
                                            mem[_32375 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32593 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32593 + idx + 68] = mem[_32375 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32593 + 68] = mem[_32593 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32593 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33352 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33352] = 30
                                            mem[_33352 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33681 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33681 + idx + 68] = mem[_33352 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33681 + 68] = mem[_33681 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33681 + -mem[64] + 100
                                        _32437 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32437] = 26
                                        mem[_32437 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34927 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34927] = 30
                                            mem[_34927 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38332 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38332] = 30
                                            mem[_38332 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40270 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40270 + idx + 68] = mem[_38332 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40270 + 68] = mem[_40270 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40270 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48606 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48606] = 30
                                            mem[_48606 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50721 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50721 + idx + 68] = mem[_48606 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50721 + 68] = mem[_50721 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50721 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35556 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35556] = 30
                                        mem[_35556 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36373 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36373 + idx + 68] = mem[_35556 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36373 + 68] = mem[_36373 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36373 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40269 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40269] = 30
                                        mem[_40269 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42532 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42532 + idx + 68] = mem[_40269 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42532 + 68] = mem[_42532 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42532 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50720 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50720] = 30
                                        mem[_50720 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _52555 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52555 + idx + 68] = mem[_50720 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52555 + 68] = mem[_52555 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52555 + -mem[64] + 100
                                    _31881 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31881] = 26
                                    mem[_31881 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32733 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32733] = 26
                                        mem[_32733 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    else:
                                        _32732 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32732] = 26
                                        mem[_32732 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32280 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32280] = 26
                                            mem[_32280 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34668 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34668] = 30
                                                    mem[_34668 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36732 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36732] = 30
                                                    mem[_36732 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38318 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38318 + idx + 68] = mem[_36732 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38318 + 68] = mem[_38318 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38318 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _45950 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_45950] = 30
                                                    mem[_45950 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48587 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48587 + idx + 68] = mem[_45950 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48587 + 68] = mem[_48587 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48587 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34924 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34924] = 30
                                                mem[_34924 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _35546 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35546 + idx + 68] = mem[_34924 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35546 + 68] = mem[_35546 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35546 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38317 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38317] = 30
                                                mem[_38317 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40244 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40244 + idx + 68] = mem[_38317 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40244 + 68] = mem[_40244 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40244 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                _48586 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48586] = 30
                                                mem[_48586 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50702 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50702 + idx + 68] = mem[_48586 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50702 + 68] = mem[_50702 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50702 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _34923 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34923] = 30
                                                mem[_34923 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35543 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35543 + idx + 68] = mem[_34923 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35543 + 68] = mem[_35543 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35543 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38316 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38316] = 30
                                                mem[_38316 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _40241 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40241 + idx + 68] = mem[_38316 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40241 + 68] = mem[_40241 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40241 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                _48585 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48585] = 30
                                                mem[_48585 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50699 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50699 + idx + 68] = mem[_48585 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50699 + 68] = mem[_50699 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50699 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35542 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35542] = 30
                                            mem[_35542 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _36356 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36356 + idx + 68] = mem[_35542 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36356 + 68] = mem[_36356 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36356 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40240 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40240] = 30
                                            mem[_40240 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42496 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42496 + idx + 68] = mem[_40240 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42496 + 68] = mem[_42496 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42496 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            _50698 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50698] = 30
                                            mem[_50698 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52527 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52527 + idx + 68] = mem[_50698 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52527 + 68] = mem[_52527 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52527 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32374 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32374] = 30
                                            mem[_32374 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32590 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32590 + idx + 68] = mem[_32374 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32590 + 68] = mem[_32590 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32590 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33350 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33350] = 30
                                            mem[_33350 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33676 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33676 + idx + 68] = mem[_33350 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33676 + 68] = mem[_33676 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33676 + -mem[64] + 100
                                        _32436 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32436] = 26
                                        mem[_32436 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34925 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34925] = 30
                                                mem[_34925 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38325 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38325] = 30
                                                mem[_38325 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40254 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40254 + idx + 68] = mem[_38325 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40254 + 68] = mem[_40254 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40254 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48594 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48594] = 30
                                                mem[_48594 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50709 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50709 + idx + 68] = mem[_48594 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50709 + 68] = mem[_50709 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50709 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35550 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35550] = 30
                                            mem[_35550 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _36366 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36366 + idx + 68] = mem[_35550 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36366 + 68] = mem[_36366 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36366 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40253 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40253] = 30
                                            mem[_40253 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42512 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42512 + idx + 68] = mem[_40253 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42512 + 68] = mem[_42512 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42512 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _50708 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50708] = 30
                                            mem[_50708 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52539 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52539 + idx + 68] = mem[_50708 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52539 + 68] = mem[_52539 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52539 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _35549 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35549] = 30
                                            mem[_35549 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36363 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36363 + idx + 68] = mem[_35549 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36363 + 68] = mem[_36363 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36363 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40252 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40252] = 30
                                            mem[_40252 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42509 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42509 + idx + 68] = mem[_40252 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42509 + 68] = mem[_42509 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42509 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _50707 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50707] = 30
                                            mem[_50707 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52536 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52536 + idx + 68] = mem[_50707 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52536 + 68] = mem[_52536 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52536 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36362 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36362] = 30
                                        mem[_36362 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _37616 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37616 + idx + 68] = mem[_36362 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37616 + 68] = mem[_37616 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37616 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42508 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42508] = 30
                                        mem[_42508 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _44915 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44915 + idx + 68] = mem[_42508 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44915 + 68] = mem[_44915 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44915 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _52535 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52535] = 30
                                        mem[_52535 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54541 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54541 + idx + 68] = mem[_52535 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54541 + 68] = mem[_54541 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54541 + -mem[64] + 100
                                    _31876 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31876] = 26
                                    mem[_31876 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32731 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32731] = 26
                                        mem[_32731 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        _32730 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32730] = 26
                                        mem[_32730 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            else:
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32289 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32289] = 26
                                            mem[_32289 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34671 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34671] = 30
                                                mem[_34671 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36743 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36743] = 30
                                                mem[_36743 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38346 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38346 + idx + 68] = mem[_36743 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38346 + 68] = mem[_38346 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38346 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _45005 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45005] = 30
                                                mem[_45005 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _47489 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_47489 + idx + 68] = mem[_45005 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_47489 + 68] = mem[_47489 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _47489 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] += arg2
                                                _54585 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_54585] = 30
                                                mem[_54585 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _56690 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_56690 + idx + 68] = mem[_54585 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_56690 + 68] = mem[_56690 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _56690 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34931 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34931] = 30
                                            mem[_34931 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35570 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35570 + idx + 68] = mem[_34931 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35570 + 68] = mem[_35570 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35570 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38345 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38345] = 30
                                            mem[_38345 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40306 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40306 + idx + 68] = mem[_38345 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40306 + 68] = mem[_40306 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40306 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _47488 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47488] = 30
                                            mem[_47488 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49711 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49711 + idx + 68] = mem[_47488 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49711 + 68] = mem[_49711 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49711 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _56689 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56689] = 30
                                            mem[_56689 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58469 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58469 + idx + 68] = mem[_56689 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58469 + 68] = mem[_58469 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58469 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32377 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32377] = 30
                                            mem[_32377 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32599 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32599 + idx + 68] = mem[_32377 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32599 + 68] = mem[_32599 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32599 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33356 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33356] = 30
                                            mem[_33356 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33691 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33691 + idx + 68] = mem[_33356 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33691 + 68] = mem[_33691 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33691 + -mem[64] + 100
                                        _32439 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32439] = 26
                                        mem[_32439 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34932 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34932] = 30
                                            mem[_34932 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38351 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38351] = 30
                                            mem[_38351 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40313 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40313 + idx + 68] = mem[_38351 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40313 + 68] = mem[_40313 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40313 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _47495 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47495] = 30
                                            mem[_47495 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _49718 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_49718 + idx + 68] = mem[_47495 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_49718 + 68] = mem[_49718 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _49718 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _56694 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_56694] = 30
                                            mem[_56694 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _58474 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_58474 + idx + 68] = mem[_56694 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_58474 + 68] = mem[_58474 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _58474 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35573 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35573] = 30
                                        mem[_35573 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36397 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36397 + idx + 68] = mem[_35573 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36397 + 68] = mem[_36397 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36397 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40312 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40312] = 30
                                        mem[_40312 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42588 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42588 + idx + 68] = mem[_40312 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42588 + 68] = mem[_42588 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42588 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _49717 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_49717] = 30
                                        mem[_49717 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _51527 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_51527 + idx + 68] = mem[_49717 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_51527 + 68] = mem[_51527 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _51527 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] += arg2
                                        _58473 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_58473] = 30
                                        mem[_58473 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _59636 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_59636 + idx + 68] = mem[_58473 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_59636 + 68] = mem[_59636 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _59636 + -mem[64] + 100
                                    _31891 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31891] = 26
                                    mem[_31891 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32737 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32737] = 26
                                        mem[_32737 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    else:
                                        _32736 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32736] = 26
                                        mem[_32736 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if arg2 > stor2[address(msg.sender)]:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stor2[address(msg.sender)] -= arg2
                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    stor2[address(arg1)] += arg2
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32286 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32286] = 26
                                            mem[_32286 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34670 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34670] = 30
                                                    mem[_34670 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36740 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36740] = 30
                                                    mem[_36740 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38337 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38337 + idx + 68] = mem[_36740 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38337 + 68] = mem[_38337 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38337 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _44977 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_44977] = 30
                                                    mem[_44977 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _47463 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_47463 + idx + 68] = mem[_44977 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_47463 + 68] = mem[_47463 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _47463 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 2
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    _54574 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54574] = 30
                                                    mem[_54574 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _56675 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56675 + idx + 68] = mem[_54574 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56675 + 68] = mem[_56675 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56675 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34929 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34929] = 30
                                                mem[_34929 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _35563 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35563 + idx + 68] = mem[_34929 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35563 + 68] = mem[_35563 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35563 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38336 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38336] = 30
                                                mem[_38336 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40287 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40287 + idx + 68] = mem[_38336 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40287 + 68] = mem[_40287 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40287 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47462 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47462] = 30
                                                mem[_47462 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49689 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49689 + idx + 68] = mem[_47462 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49689 + 68] = mem[_49689 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49689 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56674 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56674] = 30
                                                mem[_56674 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58455 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58455 + idx + 68] = mem[_56674 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58455 + 68] = mem[_58455 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58455 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _34928 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34928] = 30
                                                mem[_34928 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35560 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35560 + idx + 68] = mem[_34928 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35560 + 68] = mem[_35560 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35560 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38335 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38335] = 30
                                                mem[_38335 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _40284 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40284 + idx + 68] = mem[_38335 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40284 + 68] = mem[_40284 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40284 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47461 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47461] = 30
                                                mem[_47461 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49686 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49686 + idx + 68] = mem[_47461 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49686 + 68] = mem[_49686 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49686 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56673 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56673] = 30
                                                mem[_56673 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58452 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58452 + idx + 68] = mem[_56673 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58452 + 68] = mem[_58452 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58452 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35559 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35559] = 30
                                            mem[_35559 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _36380 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36380 + idx + 68] = mem[_35559 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36380 + 68] = mem[_36380 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36380 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40283 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40283] = 30
                                            mem[_40283 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42552 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42552 + idx + 68] = mem[_40283 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42552 + 68] = mem[_42552 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42552 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49685 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49685] = 30
                                            mem[_49685 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51491 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51491 + idx + 68] = mem[_49685 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51491 + 68] = mem[_51491 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51491 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58451 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58451] = 30
                                            mem[_58451 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59608 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59608 + idx + 68] = mem[_58451 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59608 + 68] = mem[_59608 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59608 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32376 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32376] = 30
                                            mem[_32376 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32596 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32596 + idx + 68] = mem[_32376 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32596 + 68] = mem[_32596 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32596 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33354 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33354] = 30
                                            mem[_33354 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33686 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33686 + idx + 68] = mem[_33354 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33686 + 68] = mem[_33686 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33686 + -mem[64] + 100
                                        _32438 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32438] = 26
                                        mem[_32438 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34930 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34930] = 30
                                                mem[_34930 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38344 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38344] = 30
                                                mem[_38344 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40297 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40297 + idx + 68] = mem[_38344 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40297 + 68] = mem[_40297 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40297 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47475 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47475] = 30
                                                mem[_47475 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49700 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49700 + idx + 68] = mem[_47475 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49700 + 68] = mem[_49700 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49700 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _56682 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56682] = 30
                                                mem[_56682 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _58462 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58462 + idx + 68] = mem[_56682 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58462 + 68] = mem[_58462 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58462 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35567 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35567] = 30
                                            mem[_35567 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _36390 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36390 + idx + 68] = mem[_35567 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36390 + 68] = mem[_36390 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36390 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40296 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40296] = 30
                                            mem[_40296 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42568 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42568 + idx + 68] = mem[_40296 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42568 + 68] = mem[_42568 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42568 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49699 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49699] = 30
                                            mem[_49699 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51507 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51507 + idx + 68] = mem[_49699 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51507 + 68] = mem[_51507 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51507 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58461 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58461] = 30
                                            mem[_58461 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59620 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59620 + idx + 68] = mem[_58461 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59620 + 68] = mem[_59620 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59620 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _35566 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35566] = 30
                                            mem[_35566 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36387 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36387 + idx + 68] = mem[_35566 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36387 + 68] = mem[_36387 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36387 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40295 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40295] = 30
                                            mem[_40295 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42565 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42565 + idx + 68] = mem[_40295 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42565 + 68] = mem[_42565 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42565 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49698 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49698] = 30
                                            mem[_49698 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51504 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51504 + idx + 68] = mem[_49698 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51504 + 68] = mem[_51504 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51504 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _58460 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58460] = 30
                                            mem[_58460 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _59617 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59617 + idx + 68] = mem[_58460 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59617 + 68] = mem[_59617 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59617 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36386 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36386] = 30
                                        mem[_36386 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _37651 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37651 + idx + 68] = mem[_36386 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37651 + 68] = mem[_37651 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37651 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42564 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42564] = 30
                                        mem[_42564 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _44978 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_44978 + idx + 68] = mem[_42564 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_44978 + 68] = mem[_44978 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _44978 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        mem[0] = msg.sender
                                        mem[32] = 2
                                        _51503 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_51503] = 30
                                        mem[_51503 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 > stor2[address(msg.sender)]:
                                            _53358 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_53358 + idx + 68] = mem[_51503 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_53358 + 68] = mem[_53358 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _53358 + -mem[64] + 100
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 2
                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                        _59616 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_59616] = 30
                                        mem[_59616 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _60478 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_60478 + idx + 68] = mem[_59616 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_60478 + 68] = mem[_60478 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _60478 + -mem[64] + 100
                                    _31886 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31886] = 26
                                    mem[_31886 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32735 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32735] = 26
                                        mem[_32735 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        _32734 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32734] = 26
                                        mem[_32734 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                if arg2 > stor2[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                    else:
                        mem[0] = arg1
                        mem[32] = 4
                        if not stor4[address(arg1)]:
                            mem[96] = 26
                            mem[128] = 'SafeMath: division by zero'
                            if not arg2 / 100:
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32313 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32313] = 26
                                        mem[_32313 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34679 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34679] = 30
                                            mem[_34679 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _36775 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36775] = 30
                                            mem[_36775 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _38422 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_38422 + idx + 68] = mem[_36775 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38422 + 68] = mem[_38422 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _38422 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _46082 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46082] = 30
                                            mem[_46082 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _48761 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_48761 + idx + 68] = mem[_46082 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_48761 + 68] = mem[_48761 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _48761 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _34951 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34951] = 30
                                        mem[_34951 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _35638 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_35638 + idx + 68] = mem[_34951 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_35638 + 68] = mem[_35638 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _35638 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38421 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38421] = 30
                                        mem[_38421 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _40478 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40478 + idx + 68] = mem[_38421 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40478 + 68] = mem[_40478 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40478 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _48760 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48760] = 30
                                        mem[_48760 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50868 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50868 + idx + 68] = mem[_48760 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50868 + 68] = mem[_50868 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50868 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32385 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32385] = 30
                                        mem[_32385 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32623 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32623 + idx + 68] = mem[_32385 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32623 + 68] = mem[_32623 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32623 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33372 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33372] = 30
                                        mem[_33372 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33731 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33731 + idx + 68] = mem[_33372 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33731 + 68] = mem[_33731 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33731 + -mem[64] + 100
                                    _32447 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32447] = 26
                                    mem[_32447 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        _34952 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_34952] = 30
                                        mem[_34952 + 32] = 'SafeMath: subtraction overflow'
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _38427 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38427] = 30
                                        mem[_38427 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _40485 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_40485 + idx + 68] = mem[_38427 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_40485 + 68] = mem[_40485 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _40485 + -mem[64] + 100
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        _48765 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48765] = 30
                                        mem[_48765 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _50873 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_50873 + idx + 68] = mem[_48765 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_50873 + 68] = mem[_50873 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _50873 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _35641 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_35641] = 30
                                    mem[_35641 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                        _36493 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_36493 + idx + 68] = mem[_35641 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_36493 + 68] = mem[_36493 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _36493 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _40484 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40484] = 30
                                    mem[_40484 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _42812 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_42812 + idx + 68] = mem[_40484 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_42812 + 68] = mem[_42812 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _42812 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    _50872 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_50872] = 30
                                    mem[_50872 + 32] = 'SafeMath: subtraction overflow'
                                    if 0 <= stor6:
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                        return 1
                                    _52719 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_52719 + idx + 68] = mem[_50872 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_52719 + 68] = mem[_52719 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _52719 + -mem[64] + 100
                                _31931 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31931] = 26
                                mem[_31931 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32753 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32753] = 26
                                    mem[_32753 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                else:
                                    _32752 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32752] = 26
                                    mem[_32752 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if 0 > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if 0 > arg2 * t / s:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if arg2 * t / s > stor1[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor1[address(msg.sender)] += -1 * arg2 * t / s
                                        if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor1[address(arg1)] += arg2 * t / s
                                if 0 > stor6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if totalFees < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                require arg2 / 100
                                if 3 * arg2 / 100 / arg2 / 100 != 3:
                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                mem[64] = 224
                                mem[160] = 30
                                mem[192] = 'SafeMath: subtraction overflow'
                                if 3 * arg2 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                idx = 0
                                s = 5 * 10^13
                                t = stor6
                                while idx < stor5.length:
                                    mem[0] = stor5[idx]
                                    mem[32] = 1
                                    if stor1[stor5[idx]] > t:
                                        _32310 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32310] = 26
                                        mem[_32310 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34678 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34678] = 30
                                                mem[_34678 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36772 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36772] = 30
                                                mem[_36772 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38413 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38413 + idx + 68] = mem[_36772 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38413 + 68] = mem[_38413 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38413 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _46071 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46071] = 30
                                                mem[_46071 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _48746 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48746 + idx + 68] = mem[_46071 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48746 + 68] = mem[_48746 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48746 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34949 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34949] = 30
                                            mem[_34949 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _35631 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35631 + idx + 68] = mem[_34949 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35631 + 68] = mem[_35631 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35631 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38412 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38412] = 30
                                            mem[_38412 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40459 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40459 + idx + 68] = mem[_38412 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40459 + 68] = mem[_40459 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40459 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _48745 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48745] = 30
                                            mem[_48745 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50854 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50854 + idx + 68] = mem[_48745 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50854 + 68] = mem[_50854 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50854 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _34948 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34948] = 30
                                            mem[_34948 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35628 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35628 + idx + 68] = mem[_34948 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35628 + 68] = mem[_35628 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35628 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38411 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38411] = 30
                                            mem[_38411 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40456 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40456 + idx + 68] = mem[_38411 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40456 + 68] = mem[_40456 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40456 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48744 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48744] = 30
                                            mem[_48744 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50851 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50851 + idx + 68] = mem[_48744 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50851 + 68] = mem[_50851 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50851 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35627 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35627] = 30
                                        mem[_35627 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _36476 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36476 + idx + 68] = mem[_35627 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36476 + 68] = mem[_36476 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36476 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40455 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40455] = 30
                                        mem[_40455 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42776 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42776 + idx + 68] = mem[_40455 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42776 + 68] = mem[_42776 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42776 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _50850 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50850] = 30
                                        mem[_50850 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52691 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52691 + idx + 68] = mem[_50850 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52691 + 68] = mem[_52691 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52691 + -mem[64] + 100
                                    require idx < stor5.length
                                    mem[0] = stor5[idx]
                                    mem[32] = 2
                                    if stor2[stor5[idx]] <= s:
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        _32384 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32384] = 30
                                        mem[_32384 + 32] = 'SafeMath: subtraction overflow'
                                        if stor1[stor5[idx]] > t:
                                            _32620 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_32620 + idx + 68] = mem[_32384 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_32620 + 68] = mem[_32620 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _32620 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        _33370 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33370] = 30
                                        mem[_33370 + 32] = 'SafeMath: subtraction overflow'
                                        if stor2[stor5[idx]] <= s:
                                            idx = idx + 1
                                            s = s - stor2[stor5[idx]]
                                            t = t - stor1[stor5[idx]]
                                            continue 
                                        _33726 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_33726 + idx + 68] = mem[_33370 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_33726 + 68] = mem[_33726 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _33726 + -mem[64] + 100
                                    _32446 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32446] = 26
                                    mem[_32446 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            _34950 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34950] = 30
                                            mem[_34950 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38420 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38420] = 30
                                            mem[_38420 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40469 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40469 + idx + 68] = mem[_38420 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40469 + 68] = mem[_40469 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40469 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48753 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48753] = 30
                                            mem[_48753 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _50861 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50861 + idx + 68] = mem[_48753 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50861 + 68] = mem[_50861 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50861 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35635 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35635] = 30
                                        mem[_35635 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                            _36486 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36486 + idx + 68] = mem[_35635 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36486 + 68] = mem[_36486 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36486 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40468 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40468] = 30
                                        mem[_40468 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > stor1[address(msg.sender)]:
                                            _42792 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42792 + idx + 68] = mem[_40468 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42792 + 68] = mem[_42792 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42792 + -mem[64] + 100
                                        if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        _50860 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50860] = 30
                                        mem[_50860 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52703 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52703 + idx + 68] = mem[_50860 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52703 + 68] = mem[_52703 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52703 + -mem[64] + 100
                                    require arg2
                                    if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not 3 * arg2 / 100:
                                        _35634 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35634] = 30
                                        mem[_35634 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36483 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36483 + idx + 68] = mem[_35634 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36483 + 68] = mem[_36483 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36483 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40467 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40467] = 30
                                        mem[_40467 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42789 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42789 + idx + 68] = mem[_40467 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42789 + 68] = mem[_42789 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42789 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50859 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50859] = 30
                                        mem[_50859 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _52700 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52700 + idx + 68] = mem[_50859 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52700 + 68] = mem[_52700 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52700 + -mem[64] + 100
                                    require 3 * arg2 / 100
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _36482 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_36482] = 30
                                    mem[_36482 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                        _37791 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_37791 + idx + 68] = mem[_36482 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_37791 + 68] = mem[_37791 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _37791 + -mem[64] + 100
                                    mem[0] = msg.sender
                                    mem[32] = 1
                                    _42788 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42788] = 30
                                    mem[_42788 + 32] = 'SafeMath: subtraction overflow'
                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                        _45229 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_45229 + idx + 68] = mem[_42788 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_45229 + 68] = mem[_45229 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _45229 + -mem[64] + 100
                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[0] = arg1
                                    mem[32] = 1
                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                    _52699 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_52699] = 30
                                    mem[_52699 + 32] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                        return 1
                                    _54737 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[_54737 + idx + 68] = mem[_52699 + idx + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_54737 + 68] = mem[_54737 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _54737 + -mem[64] + 100
                                _31926 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_31926] = 26
                                mem[_31926 + 32] = 'SafeMath: division by zero'
                                if t < stor6 / 5 * 10^13:
                                    _32751 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32751] = 26
                                    mem[_32751 + 32] = 'SafeMath: division by zero'
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                else:
                                    _32750 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32750] = 26
                                    mem[_32750 + 32] = 'SafeMath: division by zero'
                                    if s <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require s
                                    if not arg2:
                                        if not 3 * arg2 / 100:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                    else:
                                        require arg2
                                        if arg2 * t / s / arg2 != t / s:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                            if 0 > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                        else:
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                            if 3 * arg2 / 100 * t / s > stor6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor6 += -3 * arg2 / 100 * t / s
                                if totalFees + (3 * arg2 / 100) < totalFees:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalFees += 3 * arg2 / 100
                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                        else:
                            mem[0] = msg.sender
                            mem[32] = 4
                            if not stor4[address(msg.sender)]:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                if not arg2 / 100:
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32295 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32295] = 26
                                            mem[_32295 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34673 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34673] = 30
                                                mem[_34673 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _36751 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_36751] = 30
                                                mem[_36751 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _38365 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_38365 + idx + 68] = mem[_36751 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38365 + 68] = mem[_38365 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _38365 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _46010 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46010] = 30
                                                mem[_46010 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _48665 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_48665 + idx + 68] = mem[_46010 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_48665 + 68] = mem[_48665 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _48665 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _34936 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34936] = 30
                                            mem[_34936 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _35587 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_35587 + idx + 68] = mem[_34936 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_35587 + 68] = mem[_35587 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _35587 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38364 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38364] = 30
                                            mem[_38364 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _40349 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40349 + idx + 68] = mem[_38364 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40349 + 68] = mem[_40349 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40349 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _48664 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48664] = 30
                                            mem[_48664 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50774 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50774 + idx + 68] = mem[_48664 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50774 + 68] = mem[_50774 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50774 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32379 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32379] = 30
                                            mem[_32379 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32605 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32605 + idx + 68] = mem[_32379 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32605 + 68] = mem[_32605 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32605 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33360 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33360] = 30
                                            mem[_33360 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33701 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33701 + idx + 68] = mem[_33360 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33701 + 68] = mem[_33701 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33701 + -mem[64] + 100
                                        _32441 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32441] = 26
                                        mem[_32441 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            _34937 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_34937] = 30
                                            mem[_34937 + 32] = 'SafeMath: subtraction overflow'
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _38370 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38370] = 30
                                            mem[_38370 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _40356 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_40356 + idx + 68] = mem[_38370 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_40356 + 68] = mem[_40356 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _40356 + -mem[64] + 100
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            _48669 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48669] = 30
                                            mem[_48669 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _50779 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_50779 + idx + 68] = mem[_48669 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_50779 + 68] = mem[_50779 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _50779 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _35590 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_35590] = 30
                                        mem[_35590 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2 * stor6 / 5 * 10^13:
                                            _36421 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_36421 + idx + 68] = mem[_35590 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_36421 + 68] = mem[_36421 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _36421 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _40355 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40355] = 30
                                        mem[_40355 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _42644 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_42644 + idx + 68] = mem[_40355 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_42644 + 68] = mem[_42644 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _42644 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        _50778 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_50778] = 30
                                        mem[_50778 + 32] = 'SafeMath: subtraction overflow'
                                        if 0 <= stor6:
                                            if totalFees < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(arg2, msg.sender, arg1);
                                            return 1
                                        _52615 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_52615 + idx + 68] = mem[_50778 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_52615 + 68] = mem[_52615 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _52615 + -mem[64] + 100
                                    _31901 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31901] = 26
                                    mem[_31901 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32741 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32741] = 26
                                        mem[_32741 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                    else:
                                        _32740 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32740] = 26
                                        mem[_32740 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if 0 > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if stor1[address(arg1)] < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if 0 > arg2 * t / s:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if arg2 * t / s > stor1[address(msg.sender)]:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stor1[address(msg.sender)] += -1 * arg2 * t / s
                                            if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * t / s
                                    if 0 > stor6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if totalFees < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    require arg2 / 100
                                    if 3 * arg2 / 100 / arg2 / 100 != 3:
                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    mem[64] = 224
                                    mem[160] = 30
                                    mem[192] = 'SafeMath: subtraction overflow'
                                    if 3 * arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    idx = 0
                                    s = 5 * 10^13
                                    t = stor6
                                    while idx < stor5.length:
                                        mem[0] = stor5[idx]
                                        mem[32] = 1
                                        if stor1[stor5[idx]] > t:
                                            _32292 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32292] = 26
                                            mem[_32292 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34672 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34672] = 30
                                                    mem[_34672 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36748 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36748] = 30
                                                    mem[_36748 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38356 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38356 + idx + 68] = mem[_36748 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38356 + 68] = mem[_38356 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38356 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _45999 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_45999] = 30
                                                    mem[_45999 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _48650 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48650 + idx + 68] = mem[_45999 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48650 + 68] = mem[_48650 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48650 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34934 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34934] = 30
                                                mem[_34934 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _35580 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35580 + idx + 68] = mem[_34934 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35580 + 68] = mem[_35580 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35580 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38355 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38355] = 30
                                                mem[_38355 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40330 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40330 + idx + 68] = mem[_38355 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40330 + 68] = mem[_40330 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40330 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                _48649 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48649] = 30
                                                mem[_48649 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50760 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50760 + idx + 68] = mem[_48649 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50760 + 68] = mem[_50760 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50760 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _34933 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34933] = 30
                                                mem[_34933 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35577 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35577 + idx + 68] = mem[_34933 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35577 + 68] = mem[_35577 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35577 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38354 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38354] = 30
                                                mem[_38354 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _40327 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40327 + idx + 68] = mem[_38354 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40327 + 68] = mem[_40327 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40327 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                _48648 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48648] = 30
                                                mem[_48648 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50757 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50757 + idx + 68] = mem[_48648 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50757 + 68] = mem[_50757 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50757 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35576 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35576] = 30
                                            mem[_35576 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _36404 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36404 + idx + 68] = mem[_35576 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36404 + 68] = mem[_36404 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36404 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40326 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40326] = 30
                                            mem[_40326 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42608 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42608 + idx + 68] = mem[_40326 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42608 + 68] = mem[_42608 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42608 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            _50756 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50756] = 30
                                            mem[_50756 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52587 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52587 + idx + 68] = mem[_50756 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52587 + 68] = mem[_52587 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52587 + -mem[64] + 100
                                        require idx < stor5.length
                                        mem[0] = stor5[idx]
                                        mem[32] = 2
                                        if stor2[stor5[idx]] <= s:
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            _32378 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32378] = 30
                                            mem[_32378 + 32] = 'SafeMath: subtraction overflow'
                                            if stor1[stor5[idx]] > t:
                                                _32602 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_32602 + idx + 68] = mem[_32378 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_32602 + 68] = mem[_32602 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _32602 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            _33358 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_33358] = 30
                                            mem[_33358 + 32] = 'SafeMath: subtraction overflow'
                                            if stor2[stor5[idx]] <= s:
                                                idx = idx + 1
                                                s = s - stor2[stor5[idx]]
                                                t = t - stor1[stor5[idx]]
                                                continue 
                                            _33696 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_33696 + idx + 68] = mem[_33358 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_33696 + 68] = mem[_33696 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _33696 + -mem[64] + 100
                                        _32440 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32440] = 26
                                        mem[_32440 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                _34935 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34935] = 30
                                                mem[_34935 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38363 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38363] = 30
                                                mem[_38363 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40340 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40340 + idx + 68] = mem[_38363 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40340 + 68] = mem[_40340 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40340 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48657 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48657] = 30
                                                mem[_48657 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _50767 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50767 + idx + 68] = mem[_48657 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50767 + 68] = mem[_50767 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50767 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35584 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35584] = 30
                                            mem[_35584 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                _36414 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36414 + idx + 68] = mem[_35584 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36414 + 68] = mem[_36414 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36414 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40339 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40339] = 30
                                            mem[_40339 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > stor1[address(msg.sender)]:
                                                _42624 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42624 + idx + 68] = mem[_40339 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42624 + 68] = mem[_42624 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42624 + -mem[64] + 100
                                            if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            _50766 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50766] = 30
                                            mem[_50766 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52599 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52599 + idx + 68] = mem[_50766 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52599 + 68] = mem[_52599 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52599 + -mem[64] + 100
                                        require arg2
                                        if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not 3 * arg2 / 100:
                                            _35583 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35583] = 30
                                            mem[_35583 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36411 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36411 + idx + 68] = mem[_35583 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36411 + 68] = mem[_36411 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36411 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40338 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40338] = 30
                                            mem[_40338 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42621 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42621 + idx + 68] = mem[_40338 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42621 + 68] = mem[_42621 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42621 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _50765 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50765] = 30
                                            mem[_50765 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _52596 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52596 + idx + 68] = mem[_50765 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52596 + 68] = mem[_52596 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52596 + -mem[64] + 100
                                        require 3 * arg2 / 100
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _36410 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_36410] = 30
                                        mem[_36410 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                            _37686 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_37686 + idx + 68] = mem[_36410 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_37686 + 68] = mem[_37686 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _37686 + -mem[64] + 100
                                        mem[0] = msg.sender
                                        mem[32] = 1
                                        _42620 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42620] = 30
                                        mem[_42620 + 32] = 'SafeMath: subtraction overflow'
                                        if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                            _45041 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_45041 + idx + 68] = mem[_42620 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_45041 + 68] = mem[_45041 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _45041 + -mem[64] + 100
                                        stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                        if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        mem[0] = arg1
                                        mem[32] = 1
                                        stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                        _52595 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_52595] = 30
                                        mem[_52595 + 32] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                            stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalFees += 3 * arg2 / 100
                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                            return 1
                                        _54614 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        idx = 0
                                        while idx < 30:
                                            mem[_54614 + idx + 68] = mem[_52595 + idx + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_54614 + 68] = mem[_54614 + 70 len 30]
                                        revert with memory
                                          from mem[64]
                                           len _54614 + -mem[64] + 100
                                    _31896 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_31896] = 26
                                    mem[_31896 + 32] = 'SafeMath: division by zero'
                                    if t < stor6 / 5 * 10^13:
                                        _32739 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32739] = 26
                                        mem[_32739 + 32] = 'SafeMath: division by zero'
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                    else:
                                        _32738 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32738] = 26
                                        mem[_32738 + 32] = 'SafeMath: division by zero'
                                        if s <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require s
                                        if not arg2:
                                            if not 3 * arg2 / 100:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                        else:
                                            require arg2
                                            if arg2 * t / s / arg2 != t / s:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                                if 0 > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                            else:
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                if 3 * arg2 / 100 * t / s > stor6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor6 += -3 * arg2 / 100 * t / s
                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalFees += 3 * arg2 / 100
                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                            else:
                                mem[0] = arg1
                                mem[32] = 4
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                if not stor4[address(arg1)]:
                                    if not arg2 / 100:
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 5 * 10^13
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32301 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32301] = 26
                                                mem[_32301 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    _34675 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34675] = 30
                                                    mem[_34675 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36759 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36759] = 30
                                                    mem[_36759 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38384 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38384 + idx + 68] = mem[_36759 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38384 + 68] = mem[_38384 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38384 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _46033 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_46033] = 30
                                                    mem[_46033 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    _48698 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_48698 + idx + 68] = mem[_46033 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_48698 + 68] = mem[_48698 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _48698 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34941 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34941] = 30
                                                mem[_34941 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35604 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35604 + idx + 68] = mem[_34941 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35604 + 68] = mem[_35604 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35604 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38383 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38383] = 30
                                                mem[_38383 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _40392 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40392 + idx + 68] = mem[_38383 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40392 + 68] = mem[_40392 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40392 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                _48697 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48697] = 30
                                                mem[_48697 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _50810 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50810 + idx + 68] = mem[_48697 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50810 + 68] = mem[_50810 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50810 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32381 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32381] = 30
                                                mem[_32381 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32611 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32611 + idx + 68] = mem[_32381 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32611 + 68] = mem[_32611 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32611 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33364 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33364] = 30
                                                mem[_33364 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33711 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33711 + idx + 68] = mem[_33364 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33711 + 68] = mem[_33711 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33711 + -mem[64] + 100
                                            _32443 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32443] = 26
                                            mem[_32443 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34942 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34942] = 30
                                                mem[_34942 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38389 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38389] = 30
                                                mem[_38389 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40399 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40399 + idx + 68] = mem[_38389 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40399 + 68] = mem[_40399 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40399 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                _48702 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48702] = 30
                                                mem[_48702 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _50815 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_50815 + idx + 68] = mem[_48702 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_50815 + 68] = mem[_50815 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _50815 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35607 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35607] = 30
                                            mem[_35607 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36445 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36445 + idx + 68] = mem[_35607 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36445 + 68] = mem[_36445 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36445 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40398 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40398] = 30
                                            mem[_40398 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42700 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42700 + idx + 68] = mem[_40398 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42700 + 68] = mem[_42700 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42700 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            _50814 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_50814] = 30
                                            mem[_50814 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _52659 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_52659 + idx + 68] = mem[_50814 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_52659 + 68] = mem[_52659 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _52659 + -mem[64] + 100
                                        _31911 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31911] = 26
                                        mem[_31911 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 5 * 10^13:
                                            _32745 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32745] = 26
                                            mem[_32745 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        else:
                                            _32744 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32744] = 26
                                            mem[_32744 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        require arg2 / 100
                                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 5 * 10^13
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32298 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32298] = 26
                                                mem[_32298 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    if not 3 * arg2 / 100:
                                                        _34674 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_34674] = 30
                                                        mem[_34674 + 32] = 'SafeMath: subtraction overflow'
                                                        mem[0] = msg.sender
                                                        mem[32] = 1
                                                        _36756 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_36756] = 30
                                                        mem[_36756 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > stor1[address(msg.sender)]:
                                                            _38375 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_38375 + idx + 68] = mem[_36756 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_38375 + 68] = mem[_38375 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _38375 + -mem[64] + 100
                                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = arg1
                                                        mem[32] = 1
                                                        _46022 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_46022] = 30
                                                        mem[_46022 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 <= stor6:
                                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalFees += 3 * arg2 / 100
                                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                            return 1
                                                        _48683 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_48683 + idx + 68] = mem[_46022 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_48683 + 68] = mem[_48683 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _48683 + -mem[64] + 100
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _34939 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34939] = 30
                                                    mem[_34939 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                        _35597 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35597 + idx + 68] = mem[_34939 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35597 + 68] = mem[_35597 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35597 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38374 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38374] = 30
                                                    mem[_38374 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _40373 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40373 + idx + 68] = mem[_38374 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40373 + 68] = mem[_40373 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40373 + -mem[64] + 100
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    _48682 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_48682] = 30
                                                    mem[_48682 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _50796 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50796 + idx + 68] = mem[_48682 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50796 + 68] = mem[_50796 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50796 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _34938 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34938] = 30
                                                    mem[_34938 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                                        _35594 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35594 + idx + 68] = mem[_34938 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35594 + 68] = mem[_35594 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35594 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38373 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38373] = 30
                                                    mem[_38373 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                        _40370 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40370 + idx + 68] = mem[_38373 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40370 + 68] = mem[_40370 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40370 + -mem[64] + 100
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                    _48681 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_48681] = 30
                                                    mem[_48681 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _50793 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50793 + idx + 68] = mem[_48681 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50793 + 68] = mem[_50793 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50793 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35593 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35593] = 30
                                                mem[_35593 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    _36428 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36428 + idx + 68] = mem[_35593 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36428 + 68] = mem[_36428 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36428 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40369 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40369] = 30
                                                mem[_40369 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _42664 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42664 + idx + 68] = mem[_40369 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42664 + 68] = mem[_42664 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42664 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                _50792 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50792] = 30
                                                mem[_50792 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _52631 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52631 + idx + 68] = mem[_50792 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52631 + 68] = mem[_52631 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52631 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32380 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32380] = 30
                                                mem[_32380 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32608 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32608 + idx + 68] = mem[_32380 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32608 + 68] = mem[_32608 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32608 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33362 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33362] = 30
                                                mem[_33362 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33706 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33706 + idx + 68] = mem[_33362 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33706 + 68] = mem[_33706 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33706 + -mem[64] + 100
                                            _32442 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32442] = 26
                                            mem[_32442 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34940 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34940] = 30
                                                    mem[_34940 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38382 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38382] = 30
                                                    mem[_38382 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _40383 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40383 + idx + 68] = mem[_38382 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40383 + 68] = mem[_40383 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40383 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 1
                                                    _48690 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_48690] = 30
                                                    mem[_48690 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _50803 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_50803 + idx + 68] = mem[_48690 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_50803 + 68] = mem[_50803 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _50803 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35601 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35601] = 30
                                                mem[_35601 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _36438 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36438 + idx + 68] = mem[_35601 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36438 + 68] = mem[_36438 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36438 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40382 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40382] = 30
                                                mem[_40382 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _42680 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42680 + idx + 68] = mem[_40382 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42680 + 68] = mem[_42680 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42680 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                _50802 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50802] = 30
                                                mem[_50802 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _52643 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52643 + idx + 68] = mem[_50802 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52643 + 68] = mem[_52643 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52643 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _35600 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35600] = 30
                                                mem[_35600 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _36435 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36435 + idx + 68] = mem[_35600 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36435 + 68] = mem[_36435 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36435 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40381 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40381] = 30
                                                mem[_40381 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _42677 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42677 + idx + 68] = mem[_40381 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42677 + 68] = mem[_42677 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42677 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 1
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                _50801 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50801] = 30
                                                mem[_50801 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _52640 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_52640 + idx + 68] = mem[_50801 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_52640 + 68] = mem[_52640 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _52640 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36434 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36434] = 30
                                            mem[_36434 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _37721 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37721 + idx + 68] = mem[_36434 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37721 + 68] = mem[_37721 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37721 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42676 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42676] = 30
                                            mem[_42676 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _45103 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45103 + idx + 68] = mem[_42676 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45103 + 68] = mem[_45103 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45103 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 1
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            _52639 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_52639] = 30
                                            mem[_52639 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _54664 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_54664 + idx + 68] = mem[_52639 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_54664 + 68] = mem[_54664 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _54664 + -mem[64] + 100
                                        _31906 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31906] = 26
                                        mem[_31906 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 5 * 10^13:
                                            _32743 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32743] = 26
                                            mem[_32743 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            _32742 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32742] = 26
                                            mem[_32742 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * t / s > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    if 0 > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * t / s
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                else:
                                    if not arg2 / 100:
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 5 * 10^13
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32307 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32307] = 26
                                                mem[_32307 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    _34677 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34677] = 30
                                                    mem[_34677 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _36767 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_36767] = 30
                                                    mem[_36767 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _38403 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_38403 + idx + 68] = mem[_36767 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_38403 + 68] = mem[_38403 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _38403 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _45193 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_45193] = 30
                                                    mem[_45193 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _47653 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_47653 + idx + 68] = mem[_45193 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_47653 + 68] = mem[_47653 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _47653 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 2
                                                    stor2[address(arg1)] += arg2
                                                    _54708 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_54708] = 30
                                                    mem[_54708 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                    _56817 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_56817 + idx + 68] = mem[_54708 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_56817 + 68] = mem[_56817 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _56817 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _34946 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34946] = 30
                                                mem[_34946 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _35621 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_35621 + idx + 68] = mem[_34946 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_35621 + 68] = mem[_35621 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _35621 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38402 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38402] = 30
                                                mem[_38402 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _40435 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40435 + idx + 68] = mem[_38402 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40435 + 68] = mem[_40435 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40435 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47652 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47652] = 30
                                                mem[_47652 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49821 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49821 + idx + 68] = mem[_47652 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49821 + 68] = mem[_49821 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49821 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] += arg2
                                                _56816 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56816] = 30
                                                mem[_56816 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _58583 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58583 + idx + 68] = mem[_56816 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58583 + 68] = mem[_58583 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58583 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32383 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32383] = 30
                                                mem[_32383 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32617 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32617 + idx + 68] = mem[_32383 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32617 + 68] = mem[_32617 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32617 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33368 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33368] = 30
                                                mem[_33368 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33721 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33721 + idx + 68] = mem[_33368 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33721 + 68] = mem[_33721 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33721 + -mem[64] + 100
                                            _32445 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32445] = 26
                                            mem[_32445 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                _34947 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_34947] = 30
                                                mem[_34947 + 32] = 'SafeMath: subtraction overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _38408 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_38408] = 30
                                                mem[_38408 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _40442 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_40442 + idx + 68] = mem[_38408 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_40442 + 68] = mem[_40442 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _40442 + -mem[64] + 100
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _47659 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47659] = 30
                                                mem[_47659 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _49828 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_49828 + idx + 68] = mem[_47659 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_49828 + 68] = mem[_49828 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _49828 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] += arg2
                                                _56821 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_56821] = 30
                                                mem[_56821 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                _58588 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_58588 + idx + 68] = mem[_56821 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_58588 + 68] = mem[_58588 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _58588 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _35624 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_35624] = 30
                                            mem[_35624 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 > arg2 * stor6 / 5 * 10^13:
                                                _36469 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_36469 + idx + 68] = mem[_35624 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_36469 + 68] = mem[_36469 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _36469 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _40441 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40441] = 30
                                            mem[_40441 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _42756 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_42756 + idx + 68] = mem[_40441 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_42756 + 68] = mem[_42756 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _42756 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _49827 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49827] = 30
                                            mem[_49827 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _51605 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_51605 + idx + 68] = mem[_49827 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_51605 + 68] = mem[_51605 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _51605 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] += arg2
                                            _58587 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_58587] = 30
                                            mem[_58587 + 32] = 'SafeMath: subtraction overflow'
                                            if 0 <= stor6:
                                                if totalFees < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            _59720 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_59720 + idx + 68] = mem[_58587 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_59720 + 68] = mem[_59720 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _59720 + -mem[64] + 100
                                        _31921 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31921] = 26
                                        mem[_31921 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 5 * 10^13:
                                            _32749 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32749] = 26
                                            mem[_32749 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                        else:
                                            _32748 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32748] = 26
                                            mem[_32748 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if 0 > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if stor1[address(arg1)] < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if 0 > arg2 * t / s:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if arg2 * t / s > stor1[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * t / s
                                        if arg2 > stor2[address(msg.sender)]:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stor2[address(msg.sender)] -= arg2
                                        if stor2[address(arg1)] + arg2 < stor2[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        stor2[address(arg1)] += arg2
                                        if 0 > stor6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if totalFees < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        require arg2 / 100
                                        if 3 * arg2 / 100 / arg2 / 100 != 3:
                                            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        mem[64] = 224
                                        mem[160] = 30
                                        mem[192] = 'SafeMath: subtraction overflow'
                                        if 3 * arg2 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        idx = 0
                                        s = 5 * 10^13
                                        t = stor6
                                        while idx < stor5.length:
                                            mem[0] = stor5[idx]
                                            mem[32] = 1
                                            if stor1[stor5[idx]] > t:
                                                _32304 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32304] = 26
                                                mem[_32304 + 32] = 'SafeMath: division by zero'
                                                if not arg2:
                                                    if not 3 * arg2 / 100:
                                                        _34676 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_34676] = 30
                                                        mem[_34676 + 32] = 'SafeMath: subtraction overflow'
                                                        mem[0] = msg.sender
                                                        mem[32] = 1
                                                        _36764 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_36764] = 30
                                                        mem[_36764 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > stor1[address(msg.sender)]:
                                                            _38394 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_38394 + idx + 68] = mem[_36764 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_38394 + 68] = mem[_38394 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _38394 + -mem[64] + 100
                                                        if stor1[address(arg1)] < stor1[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = msg.sender
                                                        mem[32] = 2
                                                        _45165 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_45165] = 30
                                                        mem[_45165 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 > stor2[address(msg.sender)]:
                                                            _47627 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 30
                                                            idx = 0
                                                            while idx < 30:
                                                                mem[_47627 + idx + 68] = mem[_45165 + idx + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_47627 + 68] = mem[_47627 + 70 len 30]
                                                            revert with memory
                                                              from mem[64]
                                                               len _47627 + -mem[64] + 100
                                                        stor2[address(msg.sender)] -= arg2
                                                        if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = arg1
                                                        mem[32] = 2
                                                        stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                        _54697 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_54697] = 30
                                                        mem[_54697 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 <= stor6:
                                                            if totalFees + (3 * arg2 / 100) < totalFees:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            totalFees += 3 * arg2 / 100
                                                            emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                            return 1
                                                        _56802 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_56802 + idx + 68] = mem[_54697 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_56802 + 68] = mem[_56802 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _56802 + -mem[64] + 100
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _34944 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34944] = 30
                                                    mem[_34944 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                        _35614 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35614 + idx + 68] = mem[_34944 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35614 + 68] = mem[_35614 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35614 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38393 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38393] = 30
                                                    mem[_38393 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _40416 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40416 + idx + 68] = mem[_38393 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40416 + 68] = mem[_40416 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40416 + -mem[64] + 100
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _47626 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47626] = 30
                                                    mem[_47626 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _49799 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_49799 + idx + 68] = mem[_47626 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_49799 + 68] = mem[_49799 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _49799 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 2
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    _56801 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56801] = 30
                                                    mem[_56801 + 32] = 'SafeMath: subtraction overflow'
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                        stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _58569 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58569 + idx + 68] = mem[_56801 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58569 + 68] = mem[_58569 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58569 + -mem[64] + 100
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    _34943 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34943] = 30
                                                    mem[_34943 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                                        _35611 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_35611 + idx + 68] = mem[_34943 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_35611 + 68] = mem[_35611 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _35611 + -mem[64] + 100
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38392 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38392] = 30
                                                    mem[_38392 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                        _40413 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40413 + idx + 68] = mem[_38392 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40413 + 68] = mem[_40413 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40413 + -mem[64] + 100
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _47625 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47625] = 30
                                                    mem[_47625 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _49796 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_49796 + idx + 68] = mem[_47625 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_49796 + 68] = mem[_49796 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _49796 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 2
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    _56800 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56800] = 30
                                                    mem[_56800 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _58566 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58566 + idx + 68] = mem[_56800 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58566 + 68] = mem[_58566 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58566 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35610 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35610] = 30
                                                mem[_35610 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                    _36452 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36452 + idx + 68] = mem[_35610 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36452 + 68] = mem[_36452 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36452 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40412 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40412] = 30
                                                mem[_40412 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _42720 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42720 + idx + 68] = mem[_40412 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42720 + 68] = mem[_42720 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42720 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _49795 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49795] = 30
                                                mem[_49795 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _51569 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_51569 + idx + 68] = mem[_49795 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_51569 + 68] = mem[_51569 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _51569 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _58565 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58565] = 30
                                                mem[_58565 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _59692 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59692 + idx + 68] = mem[_58565 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59692 + 68] = mem[_59692 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59692 + -mem[64] + 100
                                            require idx < stor5.length
                                            mem[0] = stor5[idx]
                                            mem[32] = 2
                                            if stor2[stor5[idx]] <= s:
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 1
                                                _32382 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_32382] = 30
                                                mem[_32382 + 32] = 'SafeMath: subtraction overflow'
                                                if stor1[stor5[idx]] > t:
                                                    _32614 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_32614 + idx + 68] = mem[_32382 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_32614 + 68] = mem[_32614 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _32614 + -mem[64] + 100
                                                require idx < stor5.length
                                                mem[0] = stor5[idx]
                                                mem[32] = 2
                                                _33366 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_33366] = 30
                                                mem[_33366 + 32] = 'SafeMath: subtraction overflow'
                                                if stor2[stor5[idx]] <= s:
                                                    idx = idx + 1
                                                    s = s - stor2[stor5[idx]]
                                                    t = t - stor1[stor5[idx]]
                                                    continue 
                                                _33716 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_33716 + idx + 68] = mem[_33366 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33716 + 68] = mem[_33716 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _33716 + -mem[64] + 100
                                            _32444 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32444] = 26
                                            mem[_32444 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    _34945 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_34945] = 30
                                                    mem[_34945 + 32] = 'SafeMath: subtraction overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 1
                                                    _38401 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_38401] = 30
                                                    mem[_38401 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        _40426 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_40426 + idx + 68] = mem[_38401 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_40426 + 68] = mem[_40426 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _40426 + -mem[64] + 100
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = msg.sender
                                                    mem[32] = 2
                                                    _47639 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_47639] = 30
                                                    mem[_47639 + 32] = 'SafeMath: subtraction overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        _49810 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 30
                                                        idx = 0
                                                        while idx < 30:
                                                            mem[_49810 + idx + 68] = mem[_47639 + idx + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_49810 + 68] = mem[_49810 + 70 len 30]
                                                        revert with memory
                                                          from mem[64]
                                                           len _49810 + -mem[64] + 100
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    mem[0] = arg1
                                                    mem[32] = 2
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    _56809 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_56809] = 30
                                                    mem[_56809 + 32] = 'SafeMath: subtraction overflow'
                                                    if 0 <= stor6:
                                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        totalFees += 3 * arg2 / 100
                                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                        return 1
                                                    _58576 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_58576 + idx + 68] = mem[_56809 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_58576 + 68] = mem[_58576 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _58576 + -mem[64] + 100
                                                require 3 * arg2 / 100
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _35618 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35618] = 30
                                                mem[_35618 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                    _36462 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36462 + idx + 68] = mem[_35618 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36462 + 68] = mem[_36462 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36462 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40425 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40425] = 30
                                                mem[_40425 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > stor1[address(msg.sender)]:
                                                    _42736 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42736 + idx + 68] = mem[_40425 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42736 + 68] = mem[_42736 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42736 + -mem[64] + 100
                                                if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _49809 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49809] = 30
                                                mem[_49809 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _51585 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_51585 + idx + 68] = mem[_49809 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_51585 + 68] = mem[_51585 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _51585 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _58575 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58575] = 30
                                                mem[_58575 + 32] = 'SafeMath: subtraction overflow'
                                                if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _59704 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59704 + idx + 68] = mem[_58575 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59704 + 68] = mem[_59704 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59704 + -mem[64] + 100
                                            require arg2
                                            if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not 3 * arg2 / 100:
                                                _35617 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_35617] = 30
                                                mem[_35617 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > arg2 * stor6 / 5 * 10^13:
                                                    _36459 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_36459 + idx + 68] = mem[_35617 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_36459 + 68] = mem[_36459 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _36459 + -mem[64] + 100
                                                mem[0] = msg.sender
                                                mem[32] = 1
                                                _40424 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_40424] = 30
                                                mem[_40424 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                    _42733 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_42733 + idx + 68] = mem[_40424 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_42733 + 68] = mem[_42733 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _42733 + -mem[64] + 100
                                                stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                mem[0] = msg.sender
                                                mem[32] = 2
                                                _49808 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49808] = 30
                                                mem[_49808 + 32] = 'SafeMath: subtraction overflow'
                                                if arg2 > stor2[address(msg.sender)]:
                                                    _51582 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[_51582 + idx + 68] = mem[_49808 + idx + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_51582 + 68] = mem[_51582 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _51582 + -mem[64] + 100
                                                stor2[address(msg.sender)] -= arg2
                                                if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                mem[0] = arg1
                                                mem[32] = 2
                                                stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                _58574 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_58574] = 30
                                                mem[_58574 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 <= stor6:
                                                    if totalFees + (3 * arg2 / 100) < totalFees:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    totalFees += 3 * arg2 / 100
                                                    emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                    return 1
                                                _59701 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_59701 + idx + 68] = mem[_58574 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_59701 + 68] = mem[_59701 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _59701 + -mem[64] + 100
                                            require 3 * arg2 / 100
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _36458 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_36458] = 30
                                            mem[_36458 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                _37756 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_37756 + idx + 68] = mem[_36458 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37756 + 68] = mem[_37756 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _37756 + -mem[64] + 100
                                            mem[0] = msg.sender
                                            mem[32] = 1
                                            _42732 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_42732] = 30
                                            mem[_42732 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                _45166 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_45166 + idx + 68] = mem[_42732 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_45166 + 68] = mem[_45166 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _45166 + -mem[64] + 100
                                            stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                            if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                            mem[0] = msg.sender
                                            mem[32] = 2
                                            _51581 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_51581] = 30
                                            mem[_51581 + 32] = 'SafeMath: subtraction overflow'
                                            if arg2 > stor2[address(msg.sender)]:
                                                _53440 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[_53440 + idx + 68] = mem[_51581 + idx + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_53440 + 68] = mem[_53440 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _53440 + -mem[64] + 100
                                            stor2[address(msg.sender)] -= arg2
                                            if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            mem[0] = arg1
                                            mem[32] = 2
                                            stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                            _59700 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_59700] = 30
                                            mem[_59700 + 32] = 'SafeMath: subtraction overflow'
                                            if 3 * arg2 / 100 * stor6 / 5 * 10^13 <= stor6:
                                                stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                if totalFees + (3 * arg2 / 100) < totalFees:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                totalFees += 3 * arg2 / 100
                                                emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
                                                return 1
                                            _60536 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 30
                                            idx = 0
                                            while idx < 30:
                                                mem[_60536 + idx + 68] = mem[_59700 + idx + 32]
                                                idx = idx + 32
                                                continue 
                                            mem[_60536 + 68] = mem[_60536 + 70 len 30]
                                            revert with memory
                                              from mem[64]
                                               len _60536 + -mem[64] + 100
                                        _31916 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_31916] = 26
                                        mem[_31916 + 32] = 'SafeMath: division by zero'
                                        if t < stor6 / 5 * 10^13:
                                            _32747 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32747] = 26
                                            mem[_32747 + 32] = 'SafeMath: division by zero'
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                            else:
                                                require arg2
                                                if arg2 * stor6 / 5 * 10^13 / arg2 != stor6 / 5 * 10^13:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    if 0 > arg2 * stor6 / 5 * 10^13:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * stor6 / 5 * 10^13
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 / 3 * arg2 / 100 != stor6 / 5 * 10^13:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > arg2 * stor6 / 5 * 10^13:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * stor6 / 5 * 10^13 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * stor6 / 5 * 10^13
                                                    if stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * stor6 / 5 * 10^13) - (3 * arg2 / 100 * stor6 / 5 * 10^13)
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 3 * arg2 / 100 * stor6 / 5 * 10^13 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * stor6 / 5 * 10^13
                                        else:
                                            _32746 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_32746] = 26
                                            mem[_32746 + 32] = 'SafeMath: division by zero'
                                            if s <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require s
                                            if not arg2:
                                                if not 3 * arg2 / 100:
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * t / s > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if 0 > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if stor1[address(arg1)] - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += -3 * arg2 / 100 * t / s
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                            else:
                                                require arg2
                                                if arg2 * t / s / arg2 != t / s:
                                                    revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not 3 * arg2 / 100:
                                                    if 0 > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] += arg2 * t / s
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 0 > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                else:
                                                    require 3 * arg2 / 100
                                                    if 3 * arg2 / 100 * t / s / 3 * arg2 / 100 != t / s:
                                                        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if 3 * arg2 / 100 * t / s > arg2 * t / s:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if arg2 * t / s > stor1[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor1[address(msg.sender)] += -1 * arg2 * t / s
                                                    if stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s) < stor1[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor1[address(arg1)] = stor1[address(arg1)] + (arg2 * t / s) - (3 * arg2 / 100 * t / s)
                                                    if arg2 > stor2[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor2[address(msg.sender)] -= arg2
                                                    if stor2[address(arg1)] + arg2 - (3 * arg2 / 100) < stor2[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    stor2[address(arg1)] = stor2[address(arg1)] + arg2 - (3 * arg2 / 100)
                                                    if 3 * arg2 / 100 * t / s > stor6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stor6 += -3 * arg2 / 100 * t / s
                                        if totalFees + (3 * arg2 / 100) < totalFees:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalFees += 3 * arg2 / 100
                                        emit Transfer((arg2 - (3 * arg2 / 100)), msg.sender, arg1);
    return 1
}



}
