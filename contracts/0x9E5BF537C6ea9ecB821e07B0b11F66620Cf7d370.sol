contract main {




// =====================  Runtime code  =====================


#
#  - deposit(address arg1, uint256 arg2, uint256 arg3)
#  - setPool(uint256 arg1, uint256 arg2, bool arg3)
#  - withdraw(address arg1, uint256 arg2, uint256 arg3)
#  - withdrawAll(address arg1, uint256 arg2)
#  - harvest(uint256 arg1)
#
address owner;
address alpacaAddress;
address devaddr;
uint256 alpacaPerBlock;
uint256 bonusMultiplier;
uint256 bonusEndBlock;
uint256 bonusLockUpBps;
array of struct poolInfo;
mapping of struct userInfo;
uint256 totalAllocPoint;
uint256 startBlock;

function poolLength() payable {
    return poolInfo.length
}

function poolInfo(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    return poolInfo[arg1].field_0, 
           poolInfo[arg1].field_256,
           poolInfo[arg1].field_512,
           poolInfo[arg1].field_768,
           poolInfo[arg1].field_1024
}

function totalAllocPoint() payable {
    return totalAllocPoint
}

function bonusEndBlock() payable {
    return bonusEndBlock
}

function alpacaPerBlock() payable {
    return alpacaPerBlock
}

function startBlock() payable {
    return startBlock
}

function owner() payable {
    return owner
}

function userInfo(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return userInfo[arg1][arg2].field_0, 
           userInfo[arg1][arg2].field_256,
           userInfo[arg1][arg2].field_512,
           userInfo[arg1][arg2].field_768
}

function alpaca() payable {
    return alpacaAddress
}

function bonusMultiplier() payable {
    return bonusMultiplier
}

function bonusLockUpBps() payable {
    return bonusLockUpBps
}

function devaddr() payable {
    return devaddr
}

function _fallback() payable {
    revert
}

function setDev(address arg1) payable {
    require calldata.size - 4 >= 32
    if devaddr != msg.sender:
        revert with 0, 'dev: wut?'
    devaddr = arg1
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setAlpacaPerBlock(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    alpacaPerBlock = arg1
}

function isDuplicatedPool(address arg1) payable {
    require calldata.size - 4 >= 32
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 7
        if poolInfo[idx].field_0 != arg1:
            idx = idx + 1
            continue 
        return 1
    return 0
}

function manualMint(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(alpacaAddress)
    call alpacaAddress.0xe4c5ff46 with:
         gas gas_remaining wei
        args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function setBonus(uint256 arg1, uint256 arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg2 <= block.number:
        revert with 0, 'setBonus: bad bonusEndBlock'
    if arg1 <= 1:
        revert with 0, 'setBonus: bad bonusMultiplier'
    bonusMultiplier = arg1
    bonusEndBlock = arg2
    bonusLockUpBps = arg3
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0xfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function getMultiplier(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 <= bonusEndBlock:
        if arg1 > arg2:
            revert with 0, 'SafeMath: subtraction overflow'
        if not arg2 - arg1:
            return 0
        require arg2 - arg1
        if (arg2 * bonusMultiplier) - (arg1 * bonusMultiplier) / arg2 - arg1 != bonusMultiplier:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        return ((arg2 * bonusMultiplier) - (arg1 * bonusMultiplier))
    if arg1 >= bonusEndBlock:
        if arg1 > arg2:
            revert with 0, 'SafeMath: subtraction overflow'
        return (arg2 - arg1)
    if bonusEndBlock > arg2:
        revert with 0, 'SafeMath: subtraction overflow'
    if arg1 > bonusEndBlock:
        revert with 0, 'SafeMath: subtraction overflow'
    if not bonusEndBlock - arg1:
        if arg2 - bonusEndBlock < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (arg2 - bonusEndBlock)
    require bonusEndBlock - arg1
    if (bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) / bonusEndBlock - arg1 != bonusMultiplier:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if arg2 - bonusEndBlock < 0:
        revert with 0, 'SafeMath: addition overflow'
    return ((bonusEndBlock * bonusMultiplier) - (arg1 * bonusMultiplier) + arg2 - bonusEndBlock)
}

function emergencyWithdraw(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
    if ext_code.size(poolInfo[arg1].field_0) <= 0:
        revert with 0, 'Address: call to non-contract'
    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][address(msg.sender)].field_32
    mem[324 len 0] = 0
    call poolInfo[arg1].field_0 with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args userInfo[arg1][address(msg.sender)].field_0, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][address(msg.sender)].field_0
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size > 0:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size > 0:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    emit EmergencyWithdraw(userInfo[arg1][address(msg.sender)].field_0, msg.sender, arg1);
    userInfo[arg1][address(msg.sender)].field_0 = 0
    userInfo[arg1][address(msg.sender)].field_256 = 0
}

function pendingAlpaca(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    require ext_code.size(poolInfo[arg1].field_0)
    staticcall poolInfo[arg1].field_0.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.number <= poolInfo[arg1].field_512:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not ext_call.return_data[0]:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((userInfo[arg1][address(arg2)].field_0 * poolInfo[arg1].field_768 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if block.number <= bonusEndBlock:
        if poolInfo[arg1].field_512 > block.number:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.number - poolInfo[arg1].field_512:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require block.number - poolInfo[arg1].field_512
        if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
        if (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
        if (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
        if 10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if poolInfo[arg1].field_512 >= bonusEndBlock:
        if poolInfo[arg1].field_512 > block.number:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.number - poolInfo[arg1].field_512:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require block.number - poolInfo[arg1].field_512
        if (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock) / block.number - poolInfo[arg1].field_512 != alpacaPerBlock:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock):
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock)
        if (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock) != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
        if 10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if bonusEndBlock > block.number:
        revert with 0, 'SafeMath: subtraction overflow'
    if poolInfo[arg1].field_512 > bonusEndBlock:
        revert with 0, 'SafeMath: subtraction overflow'
    if not bonusEndBlock - poolInfo[arg1].field_512:
        if block.number - bonusEndBlock < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not block.number - bonusEndBlock:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require block.number - bonusEndBlock
        if (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / block.number - bonusEndBlock != alpacaPerBlock:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[arg1][address(arg2)].field_0:
                    if userInfo[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -userInfo[arg1][address(arg2)].field_256
                require userInfo[arg1][address(arg2)].field_0
                if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
            require 0 / totalAllocPoint
            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
        if (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
        if 10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require bonusEndBlock - poolInfo[arg1].field_512
    if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if block.number - bonusEndBlock < 0:
        revert with 0, 'SafeMath: addition overflow'
    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) + block.number - bonusEndBlock:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require 0 / totalAllocPoint
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) + block.number - bonusEndBlock
    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) + block.number - bonusEndBlock != alpacaPerBlock:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            require userInfo[arg1][address(arg2)].field_0
            if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        require 0 / totalAllocPoint
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[arg1].field_256:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if totalAllocPoint <= 0:
        revert with 0, 'SafeMath: division by zero'
    require totalAllocPoint
    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        require userInfo[arg1][address(arg2)].field_0
        if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if poolInfo[arg1].field_768 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
        revert with 0, 'SafeMath: addition overflow'
    if not userInfo[arg1][address(arg2)].field_0:
        if userInfo[arg1][address(arg2)].field_256 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        return -userInfo[arg1][address(arg2)].field_256
    require userInfo[arg1][address(arg2)].field_0
    if (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if userInfo[arg1][address(arg2)].field_256 > (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12:
        revert with 0, 'SafeMath: subtraction overflow'
    return (((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
}

function massUpdatePools() payable {
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 7
        if block.number > poolInfo[idx].field_512:
            mem[100] = this.address
            require ext_code.size(poolInfo[idx].field_0)
            staticcall poolInfo[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                if block.number <= bonusEndBlock:
                    if poolInfo[idx].field_512 > block.number:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.number - poolInfo[idx].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        require ext_code.size(alpacaAddress)
                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args devaddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                        mem[100] = this.address
                        mem[132] = 0 / totalAllocPoint
                        require ext_code.size(alpacaAddress)
                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        else:
                            require 0 / totalAllocPoint
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        if block.number > bonusEndBlock:
                            if poolInfo[idx].field_512 < bonusEndBlock:
                                if poolInfo[idx].field_512 > bonusEndBlock:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not bonusEndBlock - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require bonusEndBlock - poolInfo[idx].field_512
                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if not 0 / totalAllocPoint / 10:
                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                mem[100] = devaddr
                                mem[132] = 0
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0
                            else:
                                require 0 / totalAllocPoint / 10
                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                mem[100] = devaddr
                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            poolInfo[idx].field_1024 = poolInfo[idx].field_768
                            if block.number > bonusEndBlock:
                                if poolInfo[idx].field_512 < bonusEndBlock:
                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[idx].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        require block.number - poolInfo[idx].field_512
                        if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                        if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                            mem[100] = this.address
                            mem[132] = 0 / totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[idx].field_512 < bonusEndBlock:
                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[idx].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not 0 / totalAllocPoint / 10:
                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                    mem[100] = devaddr
                                    mem[132] = 0
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                    mem[100] = devaddr
                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                            if (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if not (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = 0 / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                if (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                        if (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                else:
                    if poolInfo[idx].field_512 >= bonusEndBlock:
                        if poolInfo[idx].field_512 > block.number:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.number - poolInfo[idx].field_512:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                            mem[100] = this.address
                            mem[132] = 0 / totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[idx].field_512 < bonusEndBlock:
                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[idx].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not 0 / totalAllocPoint / 10:
                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                    mem[100] = devaddr
                                    mem[132] = 0
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                    mem[100] = devaddr
                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require block.number - poolInfo[idx].field_512
                            if (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock) / block.number - poolInfo[idx].field_512 != alpacaPerBlock:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if not (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = 0 / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock)
                                if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock) != poolInfo[idx].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                        if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if bonusEndBlock > block.number:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if poolInfo[idx].field_512 > bonusEndBlock:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not bonusEndBlock - poolInfo[idx].field_512:
                            if block.number - bonusEndBlock < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not block.number - bonusEndBlock:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = 0 / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require block.number - bonusEndBlock
                                if (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / block.number - bonusEndBlock != alpacaPerBlock:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if not (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = 0 / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
                                    if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        if 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                            if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require bonusEndBlock - poolInfo[idx].field_512
                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if block.number - bonusEndBlock < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) + block.number - bonusEndBlock:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = 0 / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) + block.number - bonusEndBlock
                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) + block.number - bonusEndBlock != alpacaPerBlock:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = 0 / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
            poolInfo[idx].field_512 = block.number
        idx = idx + 1
        continue 
}

function updatePool(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if block.number > poolInfo[arg1].field_512:
        require ext_code.size(poolInfo[arg1].field_0)
        staticcall poolInfo[arg1].field_0.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            if block.number <= bonusEndBlock:
                if poolInfo[arg1].field_512 > block.number:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.number - poolInfo[arg1].field_512:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    require ext_code.size(alpacaAddress)
                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args devaddr, 0 / totalAllocPoint / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(alpacaAddress)
                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(this.address), 0 / totalAllocPoint
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                    else:
                        require 0 / totalAllocPoint
                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    if block.number > bonusEndBlock:
                        if poolInfo[arg1].field_512 < bonusEndBlock:
                            if poolInfo[arg1].field_512 > bonusEndBlock:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not bonusEndBlock - poolInfo[arg1].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint / 10:
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require bonusEndBlock - poolInfo[arg1].field_512
                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if not 0 / totalAllocPoint / 10:
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0
                        else:
                            require 0 / totalAllocPoint / 10
                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                        if block.number > bonusEndBlock:
                            if poolInfo[arg1].field_512 < bonusEndBlock:
                                if poolInfo[arg1].field_512 > bonusEndBlock:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not bonusEndBlock - poolInfo[arg1].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require bonusEndBlock - poolInfo[arg1].field_512
                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                else:
                    require block.number - poolInfo[arg1].field_512
                    if (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / block.number - poolInfo[arg1].field_512 != bonusMultiplier:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        require ext_code.size(alpacaAddress)
                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args devaddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(alpacaAddress)
                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            require 0 / totalAllocPoint
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        if block.number > bonusEndBlock:
                            if poolInfo[arg1].field_512 < bonusEndBlock:
                                if poolInfo[arg1].field_512 > bonusEndBlock:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not bonusEndBlock - poolInfo[arg1].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require bonusEndBlock - poolInfo[arg1].field_512
                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if not 0 / totalAllocPoint / 10:
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0
                            else:
                                require 0 / totalAllocPoint / 10
                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        require (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                        if (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (block.number * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not 0 / totalAllocPoint / 10:
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                            if (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if 10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                    if (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
            else:
                if poolInfo[arg1].field_512 >= bonusEndBlock:
                    if poolInfo[arg1].field_512 > block.number:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.number - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        require ext_code.size(alpacaAddress)
                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args devaddr, 0 / totalAllocPoint / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(alpacaAddress)
                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(this.address), 0 / totalAllocPoint
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            require 0 / totalAllocPoint
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        if block.number > bonusEndBlock:
                            if poolInfo[arg1].field_512 < bonusEndBlock:
                                if poolInfo[arg1].field_512 > bonusEndBlock:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not bonusEndBlock - poolInfo[arg1].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require bonusEndBlock - poolInfo[arg1].field_512
                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if not 0 / totalAllocPoint / 10:
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0
                            else:
                                require 0 / totalAllocPoint / 10
                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        require block.number - poolInfo[arg1].field_512
                        if (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock) / block.number - poolInfo[arg1].field_512 != alpacaPerBlock:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not 0 / totalAllocPoint / 10:
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock)
                            if (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / (block.number * alpacaPerBlock) - (poolInfo[arg1].field_512 * alpacaPerBlock) != poolInfo[arg1].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if 10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                    if (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                else:
                    if bonusEndBlock > block.number:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if poolInfo[arg1].field_512 > bonusEndBlock:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not bonusEndBlock - poolInfo[arg1].field_512:
                        if block.number - bonusEndBlock < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not block.number - bonusEndBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not 0 / totalAllocPoint / 10:
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require block.number - bonusEndBlock
                            if (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / block.number - bonusEndBlock != alpacaPerBlock:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[arg1].field_512 < bonusEndBlock:
                                            if poolInfo[arg1].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[arg1].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[arg1].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
                                if (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                        if (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[arg1].field_512 < bonusEndBlock:
                                            if poolInfo[arg1].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[arg1].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[arg1].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        require bonusEndBlock - poolInfo[arg1].field_512
                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if block.number - bonusEndBlock < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) + block.number - bonusEndBlock:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[arg1].field_512 < bonusEndBlock:
                                    if poolInfo[arg1].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[arg1].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[arg1].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not 0 / totalAllocPoint / 10:
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) + block.number - bonusEndBlock
                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) + block.number - bonusEndBlock != alpacaPerBlock:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[arg1].field_512 < bonusEndBlock:
                                            if poolInfo[arg1].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[arg1].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[arg1].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[arg1].field_768 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[arg1].field_512 < bonusEndBlock:
                                        if poolInfo[arg1].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[arg1].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[arg1].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) + (block.number * alpacaPerBlock * poolInfo[arg1].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[arg1].field_1024 = poolInfo[arg1].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[arg1].field_512 < bonusEndBlock:
                                            if poolInfo[arg1].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[arg1].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[arg1].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[arg1].field_512 != bonusMultiplier:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[arg1].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[arg1].field_256:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10:
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[arg1].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[arg1].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[arg1].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
        poolInfo[arg1].field_512 = block.number
}

function addPool(uint256 arg1, address arg2, bool arg3) payable {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg3:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 7
            if block.number > poolInfo[idx].field_512:
                mem[100] = this.address
                require ext_code.size(poolInfo[idx].field_0)
                staticcall poolInfo[idx].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0]:
                    if block.number <= bonusEndBlock:
                        if poolInfo[idx].field_512 > block.number:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.number - poolInfo[idx].field_512:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args devaddr, 0 / totalAllocPoint / 10
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                            mem[100] = this.address
                            mem[132] = 0 / totalAllocPoint
                            require ext_code.size(alpacaAddress)
                            call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(this.address), 0 / totalAllocPoint
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                require 0 / totalAllocPoint
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            if block.number > bonusEndBlock:
                                if poolInfo[idx].field_512 < bonusEndBlock:
                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require bonusEndBlock - poolInfo[idx].field_512
                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if not 0 / totalAllocPoint / 10:
                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                    mem[100] = devaddr
                                    mem[132] = 0
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0
                                else:
                                    require 0 / totalAllocPoint / 10
                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                    mem[100] = devaddr
                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            require block.number - poolInfo[idx].field_512
                            if (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / block.number - poolInfo[idx].field_512 != bonusMultiplier:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if not (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = 0 / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                if (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (block.number * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if not (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = 0 / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                    if (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (block.number * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        if 10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                            if (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, (block.number * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if poolInfo[idx].field_512 >= bonusEndBlock:
                            if poolInfo[idx].field_512 > block.number:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.number - poolInfo[idx].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args devaddr, 0 / totalAllocPoint / 10
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                mem[100] = this.address
                                mem[132] = 0 / totalAllocPoint
                                require ext_code.size(alpacaAddress)
                                call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(this.address), 0 / totalAllocPoint
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    require 0 / totalAllocPoint
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                if block.number > bonusEndBlock:
                                    if poolInfo[idx].field_512 < bonusEndBlock:
                                        if poolInfo[idx].field_512 > bonusEndBlock:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not bonusEndBlock - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                            else:
                                                require 0 / totalAllocPoint
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            require bonusEndBlock - poolInfo[idx].field_512
                                            if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                        if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if not 0 / totalAllocPoint / 10:
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0
                                    else:
                                        require 0 / totalAllocPoint / 10
                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                        mem[100] = devaddr
                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require block.number - poolInfo[idx].field_512
                                if (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock) / block.number - poolInfo[idx].field_512 != alpacaPerBlock:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if not (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = 0 / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock)
                                    if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / (block.number * alpacaPerBlock) - (poolInfo[idx].field_512 * alpacaPerBlock) != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        if 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                            if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if bonusEndBlock > block.number:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if poolInfo[idx].field_512 > bonusEndBlock:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not bonusEndBlock - poolInfo[idx].field_512:
                                if block.number - bonusEndBlock < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not block.number - bonusEndBlock:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = 0 / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require block.number - bonusEndBlock
                                    if (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / block.number - bonusEndBlock != alpacaPerBlock:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if not (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                        mem[100] = this.address
                                        mem[132] = 0 / totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), 0 / totalAllocPoint
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                            if block.number > bonusEndBlock:
                                                if poolInfo[idx].field_512 < bonusEndBlock:
                                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require bonusEndBlock - poolInfo[idx].field_512
                                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require 0 / totalAllocPoint / 10
                                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require 0 / totalAllocPoint
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
                                        if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                        mem[100] = this.address
                                        mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                            if 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if not (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                if (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                            if block.number > bonusEndBlock:
                                                if poolInfo[idx].field_512 < bonusEndBlock:
                                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require bonusEndBlock - poolInfo[idx].field_512
                                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require 0 / totalAllocPoint / 10
                                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require 0 / totalAllocPoint
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                            else:
                                require bonusEndBlock - poolInfo[idx].field_512
                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if block.number - bonusEndBlock < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) + block.number - bonusEndBlock:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args devaddr, 0 / totalAllocPoint / 10
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                    mem[100] = this.address
                                    mem[132] = 0 / totalAllocPoint
                                    require ext_code.size(alpacaAddress)
                                    call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(this.address), 0 / totalAllocPoint
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        require 0 / totalAllocPoint
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    if block.number > bonusEndBlock:
                                        if poolInfo[idx].field_512 < bonusEndBlock:
                                            if poolInfo[idx].field_512 > bonusEndBlock:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not bonusEndBlock - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint / 10:
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0
                                                else:
                                                    require 0 / totalAllocPoint / 10
                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                    mem[100] = devaddr
                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    require ext_code.size(alpacaAddress)
                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                else:
                                                    require 0 / totalAllocPoint
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            else:
                                                require bonusEndBlock - poolInfo[idx].field_512
                                                if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if not 0 / totalAllocPoint / 10:
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0
                                        else:
                                            require 0 / totalAllocPoint / 10
                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                            mem[100] = devaddr
                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            require ext_code.size(alpacaAddress)
                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) + block.number - bonusEndBlock
                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) + block.number - bonusEndBlock != alpacaPerBlock:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, 0 / totalAllocPoint / 10
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                        mem[100] = this.address
                                        mem[132] = 0 / totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), 0 / totalAllocPoint
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            require 0 / totalAllocPoint
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if not 0 / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require 0 / totalAllocPoint / 10
                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                            if block.number > bonusEndBlock:
                                                if poolInfo[idx].field_512 < bonusEndBlock:
                                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require bonusEndBlock - poolInfo[idx].field_512
                                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require 0 / totalAllocPoint / 10
                                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require 0 / totalAllocPoint
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock)
                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) + (block.number * alpacaPerBlock) - (bonusEndBlock * alpacaPerBlock) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[96] = 0x40c10f1900000000000000000000000000000000000000000000000000000000
                                        mem[100] = this.address
                                        mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        require ext_code.size(alpacaAddress)
                                        call alpacaAddress.mint(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(this.address), (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                            if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if poolInfo[idx].field_768 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        if block.number > bonusEndBlock:
                                            if poolInfo[idx].field_512 < bonusEndBlock:
                                                if poolInfo[idx].field_512 > bonusEndBlock:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not bonusEndBlock - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint / 10:
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0
                                                    else:
                                                        require 0 / totalAllocPoint / 10
                                                        if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                        mem[100] = devaddr
                                                        mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        require ext_code.size(alpacaAddress)
                                                        call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                    else:
                                                        require 0 / totalAllocPoint
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                else:
                                                    require bonusEndBlock - poolInfo[idx].field_512
                                                    if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                    if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                        if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        else:
                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = 0
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, 0
                                            else:
                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                mem[100] = devaddr
                                                mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                require ext_code.size(alpacaAddress)
                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) + (block.number * alpacaPerBlock * poolInfo[idx].field_256) - (bonusEndBlock * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            poolInfo[idx].field_1024 = poolInfo[idx].field_768
                                            if block.number > bonusEndBlock:
                                                if poolInfo[idx].field_512 < bonusEndBlock:
                                                    if poolInfo[idx].field_512 > bonusEndBlock:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not bonusEndBlock - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint / 10:
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0
                                                        else:
                                                            require 0 / totalAllocPoint / 10
                                                            if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                            mem[100] = devaddr
                                                            mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            require ext_code.size(alpacaAddress)
                                                            call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                        else:
                                                            require 0 / totalAllocPoint
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    else:
                                                        require bonusEndBlock - poolInfo[idx].field_512
                                                        if (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) / bonusEndBlock - poolInfo[idx].field_512 != bonusMultiplier:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                        if not (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint / 10:
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0
                                                            else:
                                                                require 0 / totalAllocPoint / 10
                                                                if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                mem[100] = devaddr
                                                                mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                require ext_code.size(alpacaAddress)
                                                                call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                            else:
                                                                require 0 / totalAllocPoint
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        else:
                                                            require (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier)
                                                            if (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) / (bonusEndBlock * bonusMultiplier) - (poolInfo[idx].field_512 * bonusMultiplier) != alpacaPerBlock:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                            if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require 0 / totalAllocPoint / 10
                                                                    if 0 / totalAllocPoint / 10 * bonusLockUpBps / 0 / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0 / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require 0 / totalAllocPoint
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            else:
                                                                require (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock)
                                                                if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / (bonusEndBlock * bonusMultiplier * alpacaPerBlock) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10:
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = 0
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, 0
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10
                                                                    if (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 != bonusLockUpBps:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    mem[96] = 0x282d3fdf00000000000000000000000000000000000000000000000000000000
                                                                    mem[100] = devaddr
                                                                    mem[132] = (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                    require ext_code.size(alpacaAddress)
                                                                    call alpacaAddress.lock(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args devaddr, (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / 10 * bonusLockUpBps / 10000
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                if not (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (0 / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 0 / ext_call.return_data[0]
                                                                else:
                                                                    require (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint
                                                                    if 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if poolInfo[idx].field_1024 + (10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) < poolInfo[idx].field_1024:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_1024 += 10^12 * (bonusEndBlock * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * bonusMultiplier * alpacaPerBlock * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.number
            idx = idx + 1
            continue 
    if not arg2:
        revert with 0, 'add: not stakeToken addr'
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 7
        if poolInfo[idx].field_0 == arg2:
            revert with 0, 'add: stakeToken dup'
        idx = idx + 1
        continue 
    if totalAllocPoint + arg1 < totalAllocPoint:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint += arg1
    poolInfo.length++
    poolInfo[poolInfo.length].field_0 = arg2
    poolInfo[poolInfo.length].field_256 = arg1
    if block.number > startBlock:
        poolInfo[poolInfo.length].field_512 = block.number
    else:
        poolInfo[poolInfo.length].field_512 = startBlock
    poolInfo[poolInfo.length].field_768 = 0
    poolInfo[poolInfo.length].field_1024 = 0
}



}
